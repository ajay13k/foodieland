{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useControllableState, useFocusOnPointerDown, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { ariaAttr, callAllHandlers, contains, focus, getRelatedTarget, isEmpty, normalizeEventKey } from \"@chakra-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\n\nexport function useEditable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      onChangeProp = _props.onChange,\n      onCancelProp = _props.onCancel,\n      onSubmitProp = _props.onSubmit,\n      valueProp = _props.value,\n      isDisabled = _props.isDisabled,\n      defaultValue = _props.defaultValue,\n      startWithEditView = _props.startWithEditView,\n      _props$isPreviewFocus = _props.isPreviewFocusable,\n      isPreviewFocusable = _props$isPreviewFocus === void 0 ? true : _props$isPreviewFocus,\n      _props$submitOnBlur = _props.submitOnBlur,\n      submitOnBlur = _props$submitOnBlur === void 0 ? true : _props$submitOnBlur,\n      _props$selectAllOnFoc = _props.selectAllOnFocus,\n      selectAllOnFocus = _props$selectAllOnFoc === void 0 ? true : _props$selectAllOnFoc,\n      placeholder = _props.placeholder,\n      onEditProp = _props.onEdit,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"onCancel\", \"onSubmit\", \"value\", \"isDisabled\", \"defaultValue\", \"startWithEditView\", \"isPreviewFocusable\", \"submitOnBlur\", \"selectAllOnFocus\", \"placeholder\", \"onEdit\"]);\n\n  var defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n\n  var _useState = useState(defaultIsEditing),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEditing = _useState2[0],\n      setIsEditing = _useState2[1];\n\n  var _useControllableState = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      value = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n\n\n  var _useState3 = useState(value),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevValue = _useState4[0],\n      setPrevValue = _useState4[1];\n  /**\n   * Ref to help focus the input in edit mode\n   */\n\n\n  var inputRef = useRef(null);\n  var previewRef = useRef(null);\n  var editButtonRef = useRef(null);\n  var cancelButtonRef = useRef(null);\n  var submitButtonRef = useRef(null);\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  var isInteractive = !isEditing || !isDisabled;\n  useUpdateEffect(function () {\n    if (!isEditing) {\n      focus(editButtonRef.current);\n      return;\n    }\n\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus\n    });\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  var onEdit = useCallback(function () {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  var onCancel = useCallback(function () {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n  }, [onCancelProp, setValue, prevValue]);\n  var onSubmit = useCallback(function () {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n  }, [value, onSubmitProp]);\n  var onChange = useCallback(function (event) {\n    setValue(event.target.value);\n  }, [setValue]);\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Escape: onCancel,\n      Enter: function Enter(event) {\n        if (!event.shiftKey && !event.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  var isValueEmpty = isEmpty(value);\n  var onBlur = useCallback(function (event) {\n    var relatedTarget = getRelatedTarget(event);\n    var targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    var targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    var isValidBlur = !targetIsCancel && !targetIsSubmit;\n\n    if (isValidBlur && submitOnBlur) {\n      onSubmit();\n    }\n  }, [submitOnBlur, onSubmit]);\n  var getPreviewProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined;\n    return _extends({}, props, {\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex: tabIndex,\n      onFocus: callAllHandlers(props.onFocus, onEdit)\n    });\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, placeholder, value]);\n  var getInputProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      hidden: !isEditing,\n      placeholder: placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value: value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n    });\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value]);\n  var getEditButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      \"aria-label\": \"Edit\"\n    }, props, {\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef)\n    });\n  }, [onEdit]);\n  var getSubmitButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit)\n    });\n  }, [onSubmit]);\n  var getCancelButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\"\n    }, props, {\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel)\n    });\n  }, [onCancel]);\n  return {\n    isEditing: isEditing,\n    isDisabled: isDisabled,\n    isValueEmpty: isValueEmpty,\n    value: value,\n    onEdit: onEdit,\n    onCancel: onCancel,\n    onSubmit: onSubmit,\n    getPreviewProps: getPreviewProps,\n    getInputProps: getInputProps,\n    getEditButtonProps: getEditButtonProps,\n    getSubmitButtonProps: getSubmitButtonProps,\n    getCancelButtonProps: getCancelButtonProps,\n    htmlProps: htmlProps\n  };\n}","map":{"version":3,"mappings":"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","names":["useControllableState","useFocusOnPointerDown","useUpdateEffect","mergeRefs","ariaAttr","callAllHandlers","contains","focus","getRelatedTarget","isEmpty","normalizeEventKey","useCallback","useRef","useState","useEditable","props","onChangeProp","onChange","onCancelProp","onCancel","onSubmitProp","onSubmit","valueProp","value","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEditProp","onEdit","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","ref","enabled","elements","isInteractive","current","selectTextIfInput","event","target","onKeyDown","eventKey","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","isValueEmpty","onBlur","relatedTarget","targetIsCancel","targetIsSubmit","isValidBlur","getPreviewProps","tabIndex","undefined","children","hidden","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id"],"sources":["../../src/use-editable.ts"],"sourcesContent":["import {\n  useControllableState,\n  useFocusOnPointerDown,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  contains,\n  focus,\n  getRelatedTarget,\n  isEmpty,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport React, { useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      focus(editButtonRef.current)\n      return\n    }\n\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus,\n    })\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      const relatedTarget = getRelatedTarget(event)\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur && submitOnBlur) {\n        onSubmit()\n      }\n    },\n    [submitOnBlur, onSubmit],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n    }),\n    [onEdit],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n    }),\n    [onSubmit],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n    }),\n    [onCancel],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"]},"metadata":{},"sourceType":"module"}