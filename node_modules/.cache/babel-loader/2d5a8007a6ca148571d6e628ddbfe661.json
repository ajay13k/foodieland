{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { Collapse } from \"@chakra-ui/transition\";\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { AccordionProvider, useAccordion, useAccordionContext, useAccordionItem, AccordionDescendantsProvider } from \"./use-accordion\";\n/* -------------------------------------------------------------------------------------------------\n * Accordion - The wrapper that provides context for all accordion items\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/docs/components/accordion\n */\n\nexport var Accordion = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      reduceMotion = _ref.reduceMotion,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"reduceMotion\"]);\n\n  var styles = useMultiStyleConfig(\"Accordion\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useAccordion = useAccordion(ownProps),\n      htmlProps = _useAccordion.htmlProps,\n      descendants = _useAccordion.descendants,\n      context = _objectWithoutPropertiesLoose(_useAccordion, [\"htmlProps\", \"descendants\"]);\n\n  var ctx = React.useMemo(function () {\n    return _extends({}, context, {\n      reduceMotion: !!reduceMotion\n    });\n  }, [context, reduceMotion]);\n  return /*#__PURE__*/React.createElement(AccordionDescendantsProvider, {\n    value: descendants\n  }, /*#__PURE__*/React.createElement(AccordionProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion\", props.className)\n  }), children))));\n});\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item\n * -----------------------------------------------------------------------------------------------*/\n\n\nvar _createContext = createContext({\n  name: \"AccordionItemContext\",\n  errorMessage: \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    AccordionItemProvider = _createContext2[0],\n    useAccordionItemContext = _createContext2[1];\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\n\n\nexport var AccordionItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className;\n\n  var _useAccordionItem = useAccordionItem(props),\n      htmlProps = _useAccordionItem.htmlProps,\n      context = _objectWithoutPropertiesLoose(_useAccordionItem, [\"htmlProps\"]);\n\n  var styles = useStyles();\n\n  var containerStyles = _extends({}, styles.container, {\n    overflowAnchor: \"none\"\n  });\n\n  var ctx = React.useMemo(function () {\n    return context;\n  }, [context]);\n  return /*#__PURE__*/React.createElement(AccordionItemProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion__item\", className),\n    __css: containerStyles\n  }), runIfFn(children, {\n    isExpanded: !!context.isOpen,\n    isDisabled: !!context.isDisabled\n  })));\n});\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\";\n}\n/**\n * React hook to get the state and actions of an accordion item\n */\n\n\nexport function useAccordionItemState() {\n  var _useAccordionItemCont = useAccordionItemContext(),\n      isOpen = _useAccordionItemCont.isOpen,\n      isDisabled = _useAccordionItemCont.isDisabled,\n      onClose = _useAccordionItemCont.onClose,\n      onOpen = _useAccordionItemCont.onOpen;\n\n  return {\n    isOpen: isOpen,\n    onClose: onClose,\n    isDisabled: isDisabled,\n    onOpen: onOpen\n  };\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Button\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\n\nexport var AccordionButton = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useAccordionItemCont2 = useAccordionItemContext(),\n      getButtonProps = _useAccordionItemCont2.getButtonProps;\n\n  var buttonProps = getButtonProps(props, ref);\n  var styles = useStyles();\n\n  var buttonStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    transition: \"all 0.2s\",\n    outline: 0\n  }, styles.button);\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, buttonProps, {\n    className: cx(\"chakra-accordion__button\", props.className),\n    __css: buttonStyles\n  }));\n});\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Panel\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\n\n\nexport var AccordionPanel = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useAccordionContext = useAccordionContext(),\n      reduceMotion = _useAccordionContext.reduceMotion;\n\n  var _useAccordionItemCont3 = useAccordionItemContext(),\n      getPanelProps = _useAccordionItemCont3.getPanelProps,\n      isOpen = _useAccordionItemCont3.isOpen; // remove `hidden` prop, 'coz we're using height animation\n\n\n  var panelProps = getPanelProps(props, ref);\n\n  var _className = cx(\"chakra-accordion__panel\", props.className);\n\n  var styles = useStyles();\n\n  if (!reduceMotion) {\n    delete panelProps.hidden;\n  }\n\n  var child = /*#__PURE__*/React.createElement(chakra.div, _extends({}, panelProps, {\n    __css: styles.panel,\n    className: _className\n  }));\n\n  if (!reduceMotion) {\n    return /*#__PURE__*/React.createElement(Collapse, {\n      in: isOpen\n    }, child);\n  }\n\n  return child;\n});\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Icon\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\n\n\nexport var AccordionIcon = function AccordionIcon(props) {\n  var _useAccordionItemCont4 = useAccordionItemContext(),\n      isOpen = _useAccordionItemCont4.isOpen,\n      isDisabled = _useAccordionItemCont4.isDisabled;\n\n  var _useAccordionContext2 = useAccordionContext(),\n      reduceMotion = _useAccordionContext2.reduceMotion;\n\n  var _className = cx(\"chakra-accordion__icon\", props.className);\n\n  var styles = useStyles();\n\n  var iconStyles = _extends({\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\"\n  }, styles.icon);\n\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": true,\n    className: _className,\n    __css: iconStyles\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }));\n};\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\";\n}","map":{"version":3,"mappings":"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","names":["Icon","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","Collapse","cx","runIfFn","__DEV__","createContext","React","AccordionProvider","useAccordion","useAccordionContext","useAccordionItem","AccordionDescendantsProvider","Accordion","ref","children","reduceMotion","props","styles","ownProps","htmlProps","descendants","context","ctx","useMemo","value","div","className","displayName","name","errorMessage","AccordionItemProvider","useAccordionItemContext","AccordionItem","containerStyles","container","overflowAnchor","__css","isExpanded","isOpen","isDisabled","useAccordionItemState","onClose","onOpen","AccordionButton","getButtonProps","buttonProps","buttonStyles","display","alignItems","width","transition","outline","button","AccordionPanel","getPanelProps","panelProps","_className","hidden","child","panel","in","AccordionIcon","iconStyles","opacity","transform","undefined","transformOrigin","icon","viewBox","fill","d"],"sources":["../../src/accordion.tsx"],"sourcesContent":["import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Collapse } from \"@chakra-ui/transition\"\nimport { cx, Omit, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext, MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n  AccordionDescendantsProvider,\n} from \"./use-accordion\"\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion - The wrapper that provides context for all accordion items\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<HTMLChakraProps<\"div\">, keyof UseAccordionProps>,\n    ThemingProps<\"Accordion\"> {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/docs/components/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(\n  ({ children, reduceMotion, ...props }, ref) => {\n    const styles = useMultiStyleConfig(\"Accordion\", props)\n    const ownProps = omitThemingProps(props)\n\n    const { htmlProps, descendants, ...context } = useAccordion(ownProps)\n\n    const ctx = React.useMemo(\n      () => ({ ...context, reduceMotion: !!reduceMotion }),\n      [context, reduceMotion],\n    )\n\n    return (\n      <AccordionDescendantsProvider value={descendants}>\n        <AccordionProvider value={ctx}>\n          <StylesProvider value={styles}>\n            <chakra.div\n              ref={ref}\n              {...htmlProps}\n              className={cx(\"chakra-accordion\", props.className)}\n            >\n              {children}\n            </chakra.div>\n          </StylesProvider>\n        </AccordionProvider>\n      </AccordionDescendantsProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item\n * -----------------------------------------------------------------------------------------------*/\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nconst [\n  AccordionItemProvider,\n  useAccordionItemContext,\n] = createContext<AccordionItemContext>({\n  name: \"AccordionItemContext\",\n  errorMessage:\n    \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \",\n})\n\nexport interface AccordionItemProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof UseAccordionItemProps>,\n    UseAccordionItemProps {\n  children?: MaybeRenderProp<{\n    isExpanded: boolean\n    isDisabled: boolean\n  }>\n}\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  (props, ref) => {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useStyles()\n    const containerStyles: SystemStyleObject = {\n      ...styles.container,\n      overflowAnchor: \"none\",\n    }\n\n    const ctx = React.useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={ctx}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={containerStyles}\n        >\n          {runIfFn(children, {\n            isExpanded: !!context.isOpen,\n            isDisabled: !!context.isDisabled,\n          })}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\"\n}\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Button\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionButtonProps extends HTMLChakraProps<\"button\"> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  (props, ref) => {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useStyles()\n    const buttonStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      transition: \"all 0.2s\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Panel\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  (props, ref) => {\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const panelProps = getPanelProps(props, ref)\n\n    const _className = cx(\"chakra-accordion__panel\", props.className)\n    const styles = useStyles()\n\n    if (!reduceMotion) {\n      delete panelProps.hidden\n    }\n\n    const child = (\n      <chakra.div {...panelProps} __css={styles.panel} className={_className} />\n    )\n\n    if (!reduceMotion) {\n      return <Collapse in={isOpen}>{child}</Collapse>\n    }\n\n    return child\n  },\n)\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Icon\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\nexport const AccordionIcon: React.FC<IconProps> = (props) => {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const _className = cx(\"chakra-accordion__icon\", props.className)\n  const styles = useStyles()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n    ...styles.icon,\n  }\n\n  return (\n    <Icon\n      viewBox=\"0 0 24 24\"\n      aria-hidden\n      className={_className}\n      __css={iconStyles}\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}