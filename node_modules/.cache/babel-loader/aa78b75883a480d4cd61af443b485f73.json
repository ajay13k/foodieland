{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { useRef, useState } from \"react\";\nimport { DescendantsManager } from \"./descendant\";\nimport { useSafeLayoutEffect, cast } from \"./utils\";\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\n\nfunction useDescendants() {\n  var _useState = useState(function () {\n    return new DescendantsManager();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      descendants = _useState2[0];\n\n  useSafeLayoutEffect(function () {\n    return function () {\n      return descendants.destroy();\n    };\n  });\n  return descendants;\n}\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\n\nvar _createContext = createContext({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    DescendantsContextProvider = _createContext2[0],\n    useDescendantsContext = _createContext2[1];\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\n\n\nfunction useDescendant(options) {\n  var descendants = useDescendantsContext();\n\n  var _useState3 = useState(-1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      index = _useState4[0],\n      setIndex = _useState4[1];\n\n  var ref = useRef(null);\n  useSafeLayoutEffect(function () {\n    return function () {\n      if (!ref.current) return;\n      descendants.unregister(ref.current);\n    };\n  }, []);\n  useSafeLayoutEffect(function () {\n    if (!ref.current) return;\n    var dataIndex = Number(ref.current.dataset.index);\n\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex);\n    }\n  });\n  var refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n  return {\n    descendants: descendants,\n    index: index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref)\n  };\n}\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\n\nexport function createDescendantContext() {\n  var ContextProvider = cast(DescendantsContextProvider);\n\n  var _useDescendantsContext = function _useDescendantsContext() {\n    return cast(useDescendantsContext());\n  };\n\n  var _useDescendant = function _useDescendant(options) {\n    return useDescendant(options);\n  };\n\n  var _useDescendants = function _useDescendants() {\n    return useDescendants();\n  };\n\n  return [// context provider\n  ContextProvider, // call this when you need to read from context\n  _useDescendantsContext, // descendants state information, to be called and passed to `ContextProvider`\n  _useDescendants, // descendant index information\n  _useDescendant];\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,EAAwBC,SAAxB,QAAyC,wBAAzC;AACA,SAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,kBAAT,QAAsD,cAAtD;AACA,SAASC,mBAAT,EAA8BC,IAA9B,QAA0C,SAA1C;AAEA;AACA;AACA;AACA;;AACA,SAASC,cAAT,GAAuE;EACrE,gBAAsBJ,QAAQ,CAAC;IAAA,OAAM,IAAIC,kBAAJ,EAAN;EAAA,CAAD,CAA9B;EAAA;EAAA,IAAOI,WAAP;;EACAH,mBAAmB,CAAC,YAAM;IACxB,OAAO;MAAA,OAAMG,WAAW,CAACC,OAAZD,EAAN;IAAA,CAAP;EADiB,EAAnBH;EAGA,OAAOG,WAAP;AACD;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,qBAGIR,aAAa,CAAuB;EACtCU,IAAI,EAAE,qBADgC;EAEtCC,YAAY,EAAE;AAFwB,CAAvB,CAHjB;AAAA;AAAA,IACEC,0BADF;AAAA,IAEEC,qBAFF;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CACEC,OADF,EAEE;EACA,IAAMP,WAAW,GAAGK,qBAAqB,EAAzC;;EACA,iBAA0BV,QAAQ,CAAC,CAAC,CAAF,CAAlC;EAAA;EAAA,IAAOa,KAAP;EAAA,IAAcC,QAAd;;EACA,IAAMC,GAAG,GAAGhB,MAAM,CAAI,IAAJ,CAAlB;EAEAG,mBAAmB,CAAC,YAAM;IACxB,OAAO,YAAM;MACX,IAAI,CAACa,GAAG,CAACC,OAAT,EAAkB;MAClBX,WAAW,CAACY,UAAZZ,CAAuBU,GAAG,CAACC,OAA3BX;IAFF;EADiB,GAKhB,EALgB,CAAnBH;EAOAA,mBAAmB,CAAC,YAAM;IACxB,IAAI,CAACa,GAAG,CAACC,OAAT,EAAkB;IAClB,IAAME,SAAS,GAAGC,MAAM,CAACJ,GAAG,CAACC,OAAJD,CAAYK,OAAZL,CAAoBF,KAArB,CAAxB;;IACA,IAAIA,KAAK,IAAIK,SAATL,IAAsB,CAACM,MAAM,CAACE,KAAPF,CAAaD,SAAbC,CAA3B,EAAoD;MAClDL,QAAQ,CAACI,SAAD,CAARJ;IACD;EALgB,EAAnBZ;EAQA,IAAMoB,WAAW,GAAGV,OAAO,GACvBT,IAAI,CAAiBE,WAAW,CAACkB,QAAZlB,CAAqBO,OAArBP,CAAjB,CADmB,GAEvBF,IAAI,CAAiBE,WAAW,CAACkB,QAA7B,CAFR;EAIA,OAAO;IACLlB,WADK,EACLA,WADK;IAELQ,KAFK,EAELA,KAFK;IAGLW,YAAY,EAAEnB,WAAW,CAACoB,cAAZpB,CAA2BU,GAAG,CAACC,OAA/BX,CAHT;IAILkB,QAAQ,EAAEzB,SAAS,CAACwB,WAAD,EAAcP,GAAd;EAJd,CAAP;AAMD;AAED;AACA;AACA;AACA;;;AAEA,OAAO,SAASW,uBAAT,GAGH;EAEF,IAAMC,eAAe,GAAGxB,IAAI,CAAsBM,0BAAtB,CAA5B;;EAEA,IAAMmB,sBAAsB,GAAG,SAAzBA,sBAAyB;IAAA,OAC7BzB,IAAI,CAA2BO,qBAAqB,EAAhD,CADyB;EAAA,CAA/B;;EAGA,IAAMmB,cAAc,GAAIjB,SAAlBiB,cAAkBjB,QAAD;IAAA,OACrBD,aAAa,CAAOC,OAAP,CADQ;EAAA,CAAvB;;EAGA,IAAMkB,eAAe,GAAG,SAAlBA,eAAkB;IAAA,OAAM1B,cAAc,EAApB;EAAA,CAAxB;;EAEA,OAAO,CACL;EACAuB,eAFK,EAGL;EACAC,sBAJK,EAKL;EACAE,eANK,EAOL;EACAD,cARK,CAAP;AAUD","names":["createContext","mergeRefs","useRef","useState","DescendantsManager","useSafeLayoutEffect","cast","useDescendants","descendants","destroy","name","errorMessage","DescendantsContextProvider","useDescendantsContext","useDescendant","options","index","setIndex","ref","current","unregister","dataIndex","Number","dataset","isNaN","refCallback","register","enabledIndex","enabledIndexOf","createDescendantContext","ContextProvider","_useDescendantsContext","_useDescendant","_useDescendants"],"sources":["../../src/use-descendant.ts"],"sourcesContent":["import { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport { RefCallback, useRef, useState } from \"react\"\nimport { DescendantsManager, DescendantOptions } from \"./descendant\"\nimport { useSafeLayoutEffect, cast } from \"./utils\"\n\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\nfunction useDescendants<T extends HTMLElement = HTMLElement, K = {}>() {\n  const [descendants] = useState(() => new DescendantsManager<T, K>())\n  useSafeLayoutEffect(() => {\n    return () => descendants.destroy()\n  })\n  return descendants\n}\n\nexport interface UseDescendantsReturn\n  extends ReturnType<typeof useDescendants> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\nconst [\n  DescendantsContextProvider,\n  useDescendantsContext,\n] = createContext<UseDescendantsReturn>({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\",\n})\n\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant<T extends HTMLElement = HTMLElement, K = {}>(\n  options?: DescendantOptions<K>,\n) {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const dataIndex = Number(ref.current.dataset.index)\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex)\n    }\n  })\n\n  const refCallback = options\n    ? cast<RefCallback<T>>(descendants.register(options))\n    : cast<RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext<\n  T extends HTMLElement = HTMLElement,\n  K = {}\n>() {\n  type ContextProviderType = React.Provider<DescendantsManager<T, K>>\n  const ContextProvider = cast<ContextProviderType>(DescendantsContextProvider)\n\n  const _useDescendantsContext = () =>\n    cast<DescendantsManager<T, K>>(useDescendantsContext())\n\n  const _useDescendant = (options?: DescendantOptions<K>) =>\n    useDescendant<T, K>(options)\n\n  const _useDescendants = () => useDescendants<T, K>()\n\n  return [\n    // context provider\n    ContextProvider,\n    // call this when you need to read from context\n    _useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    _useDescendants,\n    // descendant index information\n    _useDescendant,\n  ] as const\n}\n"]},"metadata":{},"sourceType":"module"}