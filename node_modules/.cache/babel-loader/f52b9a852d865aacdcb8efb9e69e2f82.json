{"ast":null,"code":"import { noop, PanSession } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { usePointerEvent } from \"./use-pointer-event\";\nimport { useUnmountEffect } from \"./use-unmount-effect\";\nexport function usePanGesture(ref, props) {\n  var onPan = props.onPan,\n      onPanStart = props.onPanStart,\n      onPanEnd = props.onPanEnd,\n      onPanSessionStart = props.onPanSessionStart,\n      onPanSessionEnd = props.onPanSessionEnd;\n  var hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  var panSession = useRef(null);\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n  };\n  useEffect(function () {\n    var _panSession$current;\n\n    (_panSession$current = panSession.current) == null ? void 0 : _panSession$current.updateHandlers(handlers);\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers);\n  }\n\n  usePointerEvent(function () {\n    return ref.current;\n  }, \"pointerdown\", hasPanEvents ? onPointerDown : noop);\n  useUnmountEffect(function () {\n    var _panSession$current2;\n\n    (_panSession$current2 = panSession.current) == null ? void 0 : _panSession$current2.end();\n    panSession.current = null;\n  });\n}","map":{"version":3,"mappings":"AAAA,SAEEA,IAFF,EAIEC,UAJF,QAMO,kBANP;AAOA,SAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAUA,OAAO,SAASC,aAAT,CACLC,GADK,EAELC,KAFK,EAGL;EACA,IACEC,KADF,GAMID,KANJ,CACEC,KADF;EAAA,IAEEC,UAFF,GAMIF,KANJ,CAEEE,UAFF;EAAA,IAGEC,QAHF,GAMIH,KANJ,CAGEG,QAHF;EAAA,IAIEC,iBAJF,GAMIJ,KANJ,CAIEI,iBAJF;EAAA,IAKEC,eALF,GAMIL,KANJ,CAKEK,eALF;EAQA,IAAMC,YAAY,GAAGC,OAAO,CAC1BN,KAAK,IAAIC,UAATD,IAAuBE,QAAvBF,IAAmCG,iBAAnCH,IAAwDI,eAD9B,CAA5B;EAIA,IAAMG,UAAU,GAAGb,MAAM,CAAoB,IAApB,CAAzB;EAEA,IAAMc,QAAqC,GAAG;IAC5CC,cAAc,EAAEN,iBAD4B;IAE5CO,YAAY,EAAEN,eAF8B;IAG5CO,OAAO,EAAEV,UAHmC;IAI5CW,MAAM,EAAEZ,KAJoC;IAK5Ca,KAL4C,iBAKtCC,KALsC,EAK/BC,IAL+B,EAKzB;MACjBR,UAAU,CAACS,OAAXT,GAAqB,IAArBA;MACAL,QAAQ,QAARA,oBAAQ,CAAGY,KAAH,EAAUC,IAAV,CAARb;IACD;EAR2C,CAA9C;EAWAT,SAAS,CAAC,YAAM;IAAA;;IACd,iCAAU,CAACuB,OAAX,yCAAoBC,cAApB,CAAmCT,QAAnC;EADO,EAATf;;EAIA,SAASyB,aAAT,CAAuBJ,KAAvB,EAA+C;IAC7CP,UAAU,CAACS,OAAXT,GAAqB,IAAIf,UAAJ,CAAesB,KAAf,EAAsBN,QAAtB,CAArBD;EACD;;EAEDZ,eAAe,CACb;IAAA,OAAMG,GAAG,CAACkB,OAAV;EAAA,CADa,EAEb,aAFa,EAGbX,YAAY,GAAGa,aAAH,GAAmB3B,IAHlB,CAAfI;EAMAC,gBAAgB,CAAC,YAAM;IAAA;;IACrB,kCAAU,CAACoB,OAAX,0CAAoBG,GAApB;IACAZ,UAAU,CAACS,OAAXT,GAAqB,IAArBA;EAFc,EAAhBX;AAID","names":["noop","PanSession","useEffect","useRef","usePointerEvent","useUnmountEffect","usePanGesture","ref","props","onPan","onPanStart","onPanEnd","onPanSessionStart","onPanSessionEnd","hasPanEvents","Boolean","panSession","handlers","onSessionStart","onSessionEnd","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"sources":["../../src/use-pan-gesture.ts"],"sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanEventHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport React, { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n  } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => {\n    panSession.current?.end()\n    panSession.current = null\n  })\n}\n"]},"metadata":{},"sourceType":"module"}