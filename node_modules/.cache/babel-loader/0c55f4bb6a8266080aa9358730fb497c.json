{"ast":null,"code":"/**\n * Thank you @markdalgleish for this piece of art!\n */\nimport { isObject } from \"@chakra-ui/utils\";\n\nfunction resolveReference(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n\n  return String(operand);\n}\n\nvar toExpression = function toExpression(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n\n  return operands.map(resolveReference).join(\" \" + operator + \" \").replace(/calc/g, \"\");\n};\n\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"+\"].concat(operands)) + \")\";\n};\n\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"-\"].concat(operands)) + \")\";\n};\n\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"*\"].concat(operands)) + \")\";\n};\n\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"/\"].concat(operands)) + \")\";\n};\n\nvar _negate = function _negate(x) {\n  var value = resolveReference(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\" + value;\n  }\n\n  return _multiply(value, -1);\n};\n\nexport var calc = Object.assign(function (x) {\n  return {\n    add: function add() {\n      for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        operands[_key6] = arguments[_key6];\n      }\n\n      return calc(_add.apply(void 0, [x].concat(operands)));\n    },\n    subtract: function subtract() {\n      for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        operands[_key7] = arguments[_key7];\n      }\n\n      return calc(_subtract.apply(void 0, [x].concat(operands)));\n    },\n    multiply: function multiply() {\n      for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        operands[_key8] = arguments[_key8];\n      }\n\n      return calc(_multiply.apply(void 0, [x].concat(operands)));\n    },\n    divide: function divide() {\n      for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        operands[_key9] = arguments[_key9];\n      }\n\n      return calc(_divide.apply(void 0, [x].concat(operands)));\n    },\n    negate: function negate() {\n      return calc(_negate(x));\n    },\n    toString: function toString() {\n      return x.toString();\n    }\n  };\n}, {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});","map":{"version":3,"mappings":"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","names":["isObject","resolveReference","operand","reference","String","toExpression","operator","operands","arguments","map","join","replace","add","subtract","multiply","divide","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","toString"],"sources":["../../../src/create-theme-vars/calc.ts"],"sourcesContent":["/**\n * Thank you @markdalgleish for this piece of art!\n */\nimport { isObject } from \"@chakra-ui/utils\"\n\nexport type Operand = string | number | { reference: string }\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction resolveReference(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpression = (operator: Operator, ...operands: Array<Operand>) =>\n  operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"+\", ...operands)})`\n\nconst subtract = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"-\", ...operands)})`\n\nconst multiply = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"*\", ...operands)})`\n\nconst divide = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = resolveReference(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\ninterface CalcChain {\n  add: (...operands: Array<Operand>) => CalcChain\n  subtract: (...operands: Array<Operand>) => CalcChain\n  multiply: (...operands: Array<Operand>) => CalcChain\n  divide: (...operands: Array<Operand>) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"]},"metadata":{},"sourceType":"module"}