{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { isCssVar, isObject, isString, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\";\nimport { pseudoSelectors } from \"./pseudos\";\nimport { systemProps as systemPropConfigs } from \"./system\";\nimport { expandResponsive } from \"./utils/expand-responsive\";\n\nvar isCSSVariableTokenValue = function isCSSVariableTokenValue(key, value) {\n  return key.startsWith(\"--\") && isString(value) && !isCssVar(value);\n};\n\nvar resolveTokenValue = function resolveTokenValue(theme, value) {\n  var _ref, _getVar2;\n\n  if (value == null) return value;\n\n  var getVar = function getVar(val) {\n    var _theme$__cssMap, _theme$__cssMap$val;\n\n    return (_theme$__cssMap = theme.__cssMap) == null ? void 0 : (_theme$__cssMap$val = _theme$__cssMap[val]) == null ? void 0 : _theme$__cssMap$val.varRef;\n  };\n\n  var getValue = function getValue(val) {\n    var _getVar;\n\n    return (_getVar = getVar(val)) != null ? _getVar : val;\n  };\n\n  var valueSplit = value.split(\",\").map(function (v) {\n    return v.trim();\n  });\n\n  var _valueSplit = _slicedToArray(valueSplit, 2),\n      tokenValue = _valueSplit[0],\n      fallbackValue = _valueSplit[1];\n\n  value = (_ref = (_getVar2 = getVar(tokenValue)) != null ? _getVar2 : getValue(fallbackValue)) != null ? _ref : getValue(value);\n  return value;\n};\n\nexport function getCss(options) {\n  var _options$configs = options.configs,\n      configs = _options$configs === void 0 ? {} : _options$configs,\n      _options$pseudos = options.pseudos,\n      pseudos = _options$pseudos === void 0 ? {} : _options$pseudos,\n      theme = options.theme;\n\n  var css = function css(stylesOrFn, nested) {\n    if (nested === void 0) {\n      nested = false;\n    }\n\n    var _styles = runIfFn(stylesOrFn, theme);\n\n    var styles = expandResponsive(_styles)(theme);\n    var computedStyles = {};\n\n    for (var key in styles) {\n      var _config$transform, _config, _config2, _config3, _config4;\n\n      var valueOrFn = styles[key];\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n\n      var value = runIfFn(valueOrFn, theme);\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n\n      if (key in pseudos) {\n        key = pseudos[key];\n      }\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n\n\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value);\n      }\n\n      var config = configs[key];\n\n      if (config === true) {\n        config = {\n          property: key\n        };\n      }\n\n      if (isObject(value)) {\n        var _computedStyles$key;\n\n        computedStyles[key] = (_computedStyles$key = computedStyles[key]) != null ? _computedStyles$key : {};\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true));\n        continue;\n      }\n\n      var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme, _styles)) != null ? _config$transform : value;\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n\n      rawValue = (_config2 = config) != null && _config2.processResult ? css(rawValue, true) : rawValue;\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n\n      var configProperty = runIfFn((_config3 = config) == null ? void 0 : _config3.property, theme);\n\n      if (!nested && (_config4 = config) != null && _config4.static) {\n        var staticStyles = runIfFn(config.static, theme);\n        computedStyles = merge({}, computedStyles, staticStyles);\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        var _iterator = _createForOfIteratorHelper(configProperty),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            computedStyles[property] = rawValue;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        continue;\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue);\n        } else {\n          computedStyles[configProperty] = rawValue;\n        }\n\n        continue;\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue);\n        continue;\n      }\n\n      computedStyles[key] = rawValue;\n    }\n\n    return computedStyles;\n  };\n\n  return css;\n}\nexport var css = function css(styles) {\n  return function (theme) {\n    var cssFn = getCss({\n      theme: theme,\n      pseudos: pseudoSelectors,\n      configs: systemPropConfigs\n    });\n    return cssFn(styles);\n  };\n};","map":{"version":3,"mappings":"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","names":["isCssVar","isObject","isString","mergeWith","merge","runIfFn","pseudoSelectors","systemProps","systemPropConfigs","expandResponsive","isCSSVariableTokenValue","key","value","startsWith","resolveTokenValue","theme","getVar","val","__cssMap","_theme$__cssMap","_theme$__cssMap$val","varRef","getValue","valueSplit","split","map","v","trim","tokenValue","fallbackValue","getCss","options","configs","pseudos","css","stylesOrFn","nested","_styles","styles","computedStyles","valueOrFn","config","property","rawValue","_config","transform","processResult","configProperty","_config3","_config4","static","staticStyles","Array","isArray","cssFn"],"sources":["../../src/css.ts"],"sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  isString,\n  mergeWith as merge,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { pseudoSelectors } from \"./pseudos\"\nimport { systemProps as systemPropConfigs } from \"./system\"\nimport { StyleObjectOrFn } from \"./system.types\"\nimport { expandResponsive } from \"./utils/expand-responsive\"\nimport { Config, PropConfig } from \"./utils/prop-config\"\nimport { CssTheme } from \"./utils/types\"\n\nconst isCSSVariableTokenValue = (key: string, value: any): value is string =>\n  key.startsWith(\"--\") && isString(value) && !isCssVar(value)\n\nconst resolveTokenValue = (theme: Dict, value: string) => {\n  if (value == null) return value\n\n  const getVar = (val: string) => theme.__cssMap?.[val]?.varRef\n  const getValue = (val: string) => getVar(val) ?? val\n\n  const valueSplit = value.split(\",\").map((v) => v.trim())\n  const [tokenValue, fallbackValue] = valueSplit\n  value = getVar(tokenValue) ?? getValue(fallbackValue) ?? getValue(value)\n\n  return value\n}\n\ninterface GetCSSOptions {\n  theme: CssTheme\n  configs?: Config\n  pseudos?: Record<string, CSS.Pseudos | (string & {})>\n}\n\nexport function getCss(options: GetCSSOptions) {\n  const { configs = {}, pseudos = {}, theme } = options\n\n  const css = (stylesOrFn: Dict, nested = false) => {\n    const _styles = runIfFn(stylesOrFn, theme)\n    const styles = expandResponsive(_styles)(theme)\n\n    let computedStyles: Dict = {}\n\n    for (let key in styles) {\n      const valueOrFn = styles[key]\n\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n      let value = runIfFn(valueOrFn, theme)\n\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n      if (key in pseudos) {\n        key = pseudos[key]\n      }\n\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value)\n      }\n\n      let config = configs[key]\n\n      if (config === true) {\n        config = { property: key } as PropConfig\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = computedStyles[key] ?? {}\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true))\n        continue\n      }\n\n      let rawValue = config?.transform?.(value, theme, _styles) ?? value\n\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n      rawValue = config?.processResult ? css(rawValue, true) : rawValue\n\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n      const configProperty = runIfFn(config?.property, theme)\n\n      if (!nested && config?.static) {\n        const staticStyles = runIfFn(config.static, theme)\n        computedStyles = merge({}, computedStyles, staticStyles)\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        for (const property of configProperty) {\n          computedStyles[property] = rawValue\n        }\n        continue\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue)\n        } else {\n          computedStyles[configProperty as string] = rawValue\n        }\n        continue\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue)\n        continue\n      }\n\n      computedStyles[key] = rawValue\n    }\n\n    return computedStyles\n  }\n\n  return css\n}\n\nexport const css = (styles: StyleObjectOrFn) => (theme: any) => {\n  const cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs,\n  })\n  return cssFn(styles)\n}\n"]},"metadata":{},"sourceType":"module"}