{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useFormControlContext } from \"@chakra-ui/form-control\";\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { ariaAttr, callAllHandlers, dataAttr, scheduleMicrotask, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useRadioGroupContext } from \"./radio-group\";\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\n\nexport function useRadio(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultIsChecked = _props.defaultIsChecked,\n      _props$defaultChecked = _props.defaultChecked,\n      defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked,\n      isCheckedProp = _props.isChecked,\n      isFocusable = _props.isFocusable,\n      isDisabledProp = _props.isDisabled,\n      isReadOnlyProp = _props.isReadOnly,\n      isRequiredProp = _props.isRequired,\n      onChange = _props.onChange,\n      isInvalidProp = _props.isInvalid,\n      name = _props.name,\n      value = _props.value,\n      idProp = _props.id,\n      dataRadioGroup = _props[\"data-radiogroup\"],\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\", \"data-radiogroup\"]);\n\n  var uuid = useId(undefined, \"radio\");\n  var formControl = useFormControlContext();\n  var group = useRadioGroupContext();\n  var isWithinRadioGroup = !!group || !!dataRadioGroup;\n  var isWithinFormControl = !!formControl;\n  var id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isFocused = _useBoolean2[0],\n      setFocused = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      isHovered = _useBoolean4[0],\n      setHovering = _useBoolean4[1];\n\n  var _useBoolean5 = useBoolean(),\n      _useBoolean6 = _slicedToArray(_useBoolean5, 2),\n      isActive = _useBoolean6[0],\n      setActive = _useBoolean6[1];\n\n  var ref = useRef(null);\n\n  var _useState = useState(Boolean(defaultChecked)),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCheckedState = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useControllableProp = useControllableProp(isCheckedProp, isCheckedState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      isChecked = _useControllableProp2[1];\n\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  var getCheckboxProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)\n    });\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off]);\n\n  var _ref = formControl != null ? formControl : {},\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur;\n\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    /**\n     * This is a workaround for React Concurrent Mode issue.\n     * @see Issue https://github.com/facebook/react/issues/18591.\n     *\n     * Remove once it's fixed.\n     */\n\n\n    var focus = function focus() {\n      scheduleMicrotask(function () {\n        setFocused.on();\n      });\n    };\n\n    var trulyDisabled = isDisabled && !isFocusable;\n    return _extends({}, props, {\n      id: id,\n      ref: mergeRefs(forwardedRef, ref),\n      type: \"radio\",\n      name: name,\n      value: value,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(onFocus, props.onFocus, focus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-required\": ariaAttr(isRequired),\n      style: visuallyHiddenStyle\n    });\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, setFocused, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid]);\n\n  var getLabelProps = function getLabelProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid: isInvalid,\n      isFocused: isFocused,\n      isChecked: isChecked,\n      isActive: isActive,\n      isHovered: isHovered,\n      isDisabled: isDisabled,\n      isReadOnly: isReadOnly,\n      isRequired: isRequired\n    },\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stop(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"mappings":"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","names":["useFormControlContext","useBoolean","useControllableProp","useId","mergeRefs","ariaAttr","callAllHandlers","dataAttr","scheduleMicrotask","warn","visuallyHiddenStyle","useCallback","useRef","useState","useRadioGroupContext","useRadio","props","defaultIsChecked","defaultChecked","isCheckedProp","isChecked","isFocusable","isDisabledProp","isDisabled","isReadOnlyProp","isReadOnly","isRequiredProp","isRequired","onChange","isInvalidProp","isInvalid","name","value","idProp","id","dataRadioGroup","htmlProps","uuid","undefined","formControl","group","isWithinRadioGroup","isWithinFormControl","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","Boolean","isCheckedState","setChecked","isControlled","condition","message","handleChange","event","preventDefault","target","checked","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onFocus","onBlur","getInputProps","forwardedRef","focus","trulyDisabled","type","disabled","readOnly","required","style","getLabelProps","stop","onTouchStart","state","stopPropagation"],"sources":["../../src/use-radio.ts"],"sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  scheduleMicrotask,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    ...htmlProps\n  } = props\n\n  const uuid = useId(undefined, \"radio\")\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      /**\n       * This is a workaround for React Concurrent Mode issue.\n       * @see Issue https://github.com/facebook/react/issues/18591.\n       *\n       * Remove once it's fixed.\n       */\n      const focus = () => {\n        scheduleMicrotask(() => {\n          setFocused.on()\n        })\n      }\n\n      const trulyDisabled = isDisabled && !isFocusable\n\n      return {\n        ...props,\n        id,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(onFocus, props.onFocus, focus),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        required: isRequired,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-required\": ariaAttr(isRequired),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      isDisabled,\n      isFocusable,\n      id,\n      name,\n      value,\n      handleChange,\n      onBlur,\n      setFocused,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n      isReadOnly,\n      isRequired,\n      isInvalid,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"]},"metadata":{},"sourceType":"module"}