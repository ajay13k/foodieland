{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, tokenToCSSVar } from \"@chakra-ui/system\";\nimport { cx, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/docs/layout/wrap\n */\n\nexport var Wrap = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      children = props.children,\n      justify = props.justify,\n      direction = props.direction,\n      align = props.align,\n      className = props.className,\n      shouldWrapChildren = props.shouldWrapChildren,\n      rest = _objectWithoutPropertiesLoose(props, [\"spacing\", \"children\", \"justify\", \"direction\", \"align\", \"className\", \"shouldWrapChildren\"]);\n\n  var styles = React.useMemo(function () {\n    return {\n      \"--chakra-wrap-spacing\": function chakraWrapSpacing(theme) {\n        return mapResponsive(spacing, function (value) {\n          return tokenToCSSVar(\"space\", value)(theme);\n        });\n      },\n      \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: justify,\n      alignItems: align,\n      flexDirection: direction,\n      listStyleType: \"none\",\n      padding: \"0\",\n      margin: \"calc(var(--wrap-spacing) * -1)\",\n      \"& > *:not(style)\": {\n        margin: \"var(--wrap-spacing)\"\n      }\n    };\n  }, [spacing, justify, align, direction]);\n  var childrenToRender = shouldWrapChildren ? React.Children.map(children, function (child, index) {\n    return /*#__PURE__*/React.createElement(WrapItem, {\n      key: index\n    }, child);\n  }) : children;\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-wrap\", className)\n  }, rest), /*#__PURE__*/React.createElement(chakra.ul, {\n    className: \"chakra-wrap__list\",\n    __css: styles\n  }, childrenToRender));\n});\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\";\n}\n\nexport var WrapItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.li, _extends({\n    ref: ref,\n    __css: {\n      display: \"flex\",\n      alignItems: \"flex-start\"\n    },\n    className: cx(\"chakra-wrap__listitem\", className)\n  }, rest));\n});\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\";\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","tokenToCSSVar","cx","mapResponsive","__DEV__","React","Wrap","props","ref","spacing","children","justify","direction","align","className","shouldWrapChildren","rest","styles","useMemo","theme","value","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","margin","childrenToRender","Children","map","child","index","WrapItem","key","div","ul","__css","displayName","_objectWithoutPropertiesLoose","li"],"sources":["../../src/wrap.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n  tokenToCSSVar,\n} from \"@chakra-ui/system\"\nimport { cx, Dict, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between the each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/docs/layout/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">((props, ref) => {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const styles = React.useMemo(\n    () => ({\n      \"--chakra-wrap-spacing\": (theme: Dict) =>\n        mapResponsive(spacing, (value) => tokenToCSSVar(\"space\", value)(theme)),\n      \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: justify,\n      alignItems: align,\n      flexDirection: direction,\n      listStyleType: \"none\",\n      padding: \"0\",\n      margin: \"calc(var(--wrap-spacing) * -1)\",\n      \"& > *:not(style)\": {\n        margin: \"var(--wrap-spacing)\",\n      },\n    }),\n    [spacing, justify, align, direction],\n  )\n\n  const childrenToRender = shouldWrapChildren\n    ? React.Children.map(children, (child, index) => (\n        <WrapItem key={index}>{child}</WrapItem>\n      ))\n    : children\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul className=\"chakra-wrap__list\" __css={styles}>\n        {childrenToRender}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">((props, ref) => {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\"\n}\n"]},"metadata":{},"sourceType":"module"}