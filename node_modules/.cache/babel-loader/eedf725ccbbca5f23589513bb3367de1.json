{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useCallbackRef, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, dataAttr, focus, scheduleMicrotask, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\n\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultIsChecked = _props.defaultIsChecked,\n      _props$defaultChecked = _props.defaultChecked,\n      defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked,\n      checkedProp = _props.isChecked,\n      isFocusable = _props.isFocusable,\n      isDisabled = _props.isDisabled,\n      isReadOnly = _props.isReadOnly,\n      isRequired = _props.isRequired,\n      onChange = _props.onChange,\n      isIndeterminate = _props.isIndeterminate,\n      isInvalid = _props.isInvalid,\n      name = _props.name,\n      value = _props.value,\n      id = _props.id,\n      onBlur = _props.onBlur,\n      onFocus = _props.onFocus,\n      ariaLabel = _props[\"aria-label\"],\n      ariaLabelledBy = _props[\"aria-labelledby\"],\n      ariaInvalid = _props[\"aria-invalid\"],\n      ariaDescribedBy = _props[\"aria-describedby\"],\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\", \"onBlur\", \"onFocus\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\", \"aria-describedby\"]);\n\n  var onChangeProp = useCallbackRef(onChange);\n  var onBlurProp = useCallbackRef(onBlur);\n  var onFocusProp = useCallbackRef(onFocus);\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isFocused = _useBoolean2[0],\n      setFocused = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      isHovered = _useBoolean4[0],\n      setHovered = _useBoolean4[1];\n\n  var _useBoolean5 = useBoolean(),\n      _useBoolean6 = _slicedToArray(_useBoolean5, 2),\n      isActive = _useBoolean6[0],\n      setActive = _useBoolean6[1];\n\n  var inputRef = useRef(null);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      rootIsLabelElement = _useState2[0],\n      setRootIsLabelElement = _useState2[1];\n\n  var _useState3 = useState(!!defaultChecked),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkedState = _useState4[0],\n      setCheckedState = _useState4[1];\n\n  var _useControllableProp = useControllableProp(checkedProp, checkedState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      isChecked = _useControllableProp2[1];\n\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.checked !== isChecked;\n\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  var getCheckboxProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onPressDown = function onPressDown(event) {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isHovered, isIndeterminate, isInvalid, isReadOnly, setActive, setHovered.off, setHovered.on]);\n  var getRootProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, htmlProps, props, {\n      ref: mergeRefs(forwardedRef, function (node) {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props.onClick, function () {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          var _inputRef$current;\n\n          (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.click();\n          focus(inputRef.current, {\n            nextTick: true\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled)\n    });\n  }, [htmlProps, isDisabled, rootIsLabelElement]);\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onFocus = function onFocus() {\n      scheduleMicrotask(setFocused.on);\n    };\n\n    return _extends({}, props, {\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name: name,\n      value: value,\n      id: id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  }, [name, value, id, handleChange, setFocused.off, setFocused.on, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled]);\n  var getLabelProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [isChecked, isDisabled, isInvalid]);\n  return {\n    state: {\n      isInvalid: isInvalid,\n      isFocused: isFocused,\n      isChecked: isChecked,\n      isActive: isActive,\n      isHovered: isHovered,\n      isIndeterminate: isIndeterminate,\n      isDisabled: isDisabled,\n      isReadOnly: isReadOnly,\n      isRequired: isRequired\n    },\n    getRootProps: getRootProps,\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"mappings":"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","names":["useBoolean","useCallbackRef","useControllableProp","useSafeLayoutEffect","mergeRefs","callAllHandlers","dataAttr","focus","scheduleMicrotask","warn","visuallyHiddenStyle","useCallback","useRef","useState","useCheckbox","props","defaultIsChecked","defaultChecked","checkedProp","isChecked","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","onBlur","onFocus","ariaLabel","ariaLabelledBy","ariaInvalid","ariaDescribedBy","htmlProps","onChangeProp","onBlurProp","onFocusProp","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","rootIsLabelElement","setRootIsLabelElement","checkedState","setCheckedState","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getRootProps","node","tagName","onClick","click","nextTick","getInputProps","type","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"sources":["../../src/use-checkbox.ts"],"sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  dataAttr,\n  focus,\n  scheduleMicrotask,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is blurred (loses focus)\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is focused\n   */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * Defines the string that labels the checkbox element.\n   */\n  \"aria-label\"?: string\n  /**\n   * Refers to the `id` of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string\n  \"aria-invalid\"?: true | undefined\n  \"aria-describedby\"?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        event.preventDefault()\n        setActive.on()\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n      setActive,\n      setHovered.off,\n      setHovered.on,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          focus(inputRef.current, { nextTick: true })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n    }),\n    [htmlProps, isDisabled, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onFocus = () => {\n        scheduleMicrotask(setFocused.on)\n      }\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, onFocus),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      setFocused.off,\n      setFocused.on,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"]},"metadata":{},"sourceType":"module"}