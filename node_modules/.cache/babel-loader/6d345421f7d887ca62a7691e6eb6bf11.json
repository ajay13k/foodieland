{"ast":null,"code":"import _toConsumableArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nvar _createDescendantCont = createDescendantContext(),\n    _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n    PinInputDescendantsProvider = _createDescendantCont2[0],\n    usePinInputDescendantsContext = _createDescendantCont2[1],\n    usePinInputDescendants = _createDescendantCont2[2],\n    usePinInputDescendant = _createDescendantCont2[3];\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\n\nexport { PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant };\n\nvar _createContext = createContext({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    PinInputProvider = _createContext2[0],\n    usePinInputContext = _createContext2[1];\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\n\nexport { PinInputProvider, usePinInputContext };\n\nvar toArray = function toArray(value) {\n  return value == null ? void 0 : value.split(\"\");\n};\n\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\n\n\nexport function usePinInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      autoFocus = _props.autoFocus,\n      value = _props.value,\n      defaultValue = _props.defaultValue,\n      _onChange = _props.onChange,\n      onComplete = _props.onComplete,\n      _props$placeholder = _props.placeholder,\n      placeholder = _props$placeholder === void 0 ? \"â—‹\" : _props$placeholder,\n      _props$manageFocus = _props.manageFocus,\n      manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus,\n      _props$otp = _props.otp,\n      otp = _props$otp === void 0 ? false : _props$otp,\n      idProp = _props.id,\n      isDisabled = _props.isDisabled,\n      isInvalid = _props.isInvalid,\n      _props$type = _props.type,\n      type = _props$type === void 0 ? \"number\" : _props$type,\n      mask = _props.mask;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\" + uuid;\n  var descendants = usePinInputDescendants();\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      moveFocus = _React$useState2[0],\n      setMoveFocus = _React$useState2[1];\n\n  var _React$useState3 = React.useState(-1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focusedIndex = _React$useState4[0],\n      setFocusedIndex = _React$useState4[1];\n\n  var _useControllableState = useControllableState({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: function onChange(values) {\n      return _onChange == null ? void 0 : _onChange(values.join(\"\"));\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      values = _useControllableState2[0],\n      setValues = _useControllableState2[1];\n\n  React.useEffect(function () {\n    if (autoFocus) {\n      var first = descendants.first();\n      if (first) focus(first.node, {\n        nextTick: true\n      });\n    } // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n\n  }, [descendants]);\n  var focusNext = React.useCallback(function (index) {\n    if (!moveFocus || !manageFocus) return;\n    var next = descendants.next(index, false);\n    if (next) focus(next.node, {\n      nextTick: true\n    });\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = React.useCallback(function (value, index) {\n    var nextValues = _toConsumableArray(values);\n\n    nextValues[index] = value;\n    setValues(nextValues);\n    var isComplete = value !== \"\" && nextValues.length === descendants.count() && nextValues.every(function (inputValue) {\n      return inputValue != null && inputValue !== \"\";\n    });\n\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  var clear = React.useCallback(function () {\n    var values = Array(descendants.count()).fill(\"\");\n    setValues(values);\n    var first = descendants.first();\n    if (first) focus(first.node);\n  }, [descendants, setValues]);\n  var getNextValue = React.useCallback(function (value, eventValue) {\n    var nextValue = eventValue;\n\n    if ((value == null ? void 0 : value.length) > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n\n    return nextValue;\n  }, []);\n  var getInputProps = React.useCallback(function (props) {\n    var index = props.index,\n        rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n    /**\n     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n     */\n\n\n    var onChange = function onChange(event) {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace\n\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      } // in the case of an autocomplete or copy and paste\n\n\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (validate(eventValue, type)) {\n          // Ensure the value matches the number of inputs\n          var _nextValue = eventValue.split(\"\").filter(function (_, index) {\n            return index < descendants.count();\n          });\n\n          setValues(_nextValue); // if pasting fills the entire input fields, trigger `onComplete`\n\n          if (_nextValue.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(_nextValue.join(\"\"));\n          }\n        }\n      } else {\n        // only set if the new value is a number\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n\n        setMoveFocus(true);\n      }\n    };\n\n    var onKeyDown = function onKeyDown(event) {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants.prev(index, false);\n\n          if (prevInput) {\n            setValue(\"\", index - 1);\n            focus(prevInput.node);\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n\n    var onFocus = function onFocus() {\n      setFocusedIndex(index);\n    };\n\n    var onBlur = function onBlur() {\n      setFocusedIndex(-1);\n    };\n\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _extends({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest, {\n      id: id + \"-\" + index,\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps: getInputProps,\n    // state\n    id: id,\n    descendants: descendants,\n    values: values,\n    // actions\n    setValue: setValue,\n    setValues: setValues,\n    clear: clear\n  };\n}\n/**\n * @internal\n */\n\nexport function usePinInputField(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var _usePinInputContext = usePinInputContext(),\n      getInputProps = _usePinInputContext.getInputProps;\n\n  var _usePinInputDescendan = usePinInputDescendant(),\n      index = _usePinInputDescendan.index,\n      register = _usePinInputDescendan.register;\n\n  return getInputProps(_extends({}, props, {\n    ref: mergeRefs(register, ref),\n    index: index\n  }));\n}","map":{"version":3,"mappings":"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","names":["createDescendantContext","useControllableState","useId","ariaAttr","callAllHandlers","focus","createContext","mergeRefs","React","PinInputDescendantsProvider","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","name","errorMessage","PinInputProvider","usePinInputContext","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","otp","idProp","id","isDisabled","isInvalid","mask","uuid","descendants","useState","moveFocus","setMoveFocus","focusedIndex","setFocusedIndex","values","join","setValues","useEffect","first","node","nextTick","focusNext","useCallback","index","next","setValue","nextValues","isComplete","length","count","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","rest","_objectWithoutPropertiesLoose","event","target","currentValue","filter","_","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","inputMode","disabled","autoComplete","usePinInputField","ref","register"],"sources":["../../src/use-pin-input.ts"],"sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\"\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [\n  PinInputProvider,\n  usePinInputContext,\n] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) focus(first.node, { nextTick: true })\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) focus(next.node, { nextTick: true })\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    if (first) focus(first.node)\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              focus(prevInput.node)\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"]},"metadata":{},"sourceType":"module"}