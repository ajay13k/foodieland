{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useIds } from \"@chakra-ui/hooks\";\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { manager, useModalManager } from \"./modal-manager\";\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\n\nexport function useModal(props) {\n  var isOpen = props.isOpen,\n      onClose = props.onClose,\n      id = props.id,\n      _props$closeOnOverlay = props.closeOnOverlayClick,\n      closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay,\n      _props$closeOnEsc = props.closeOnEsc,\n      closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n      _props$useInert = props.useInert,\n      useInert = _props$useInert === void 0 ? true : _props$useInert,\n      onOverlayClickProp = props.onOverlayClick,\n      onEsc = props.onEsc;\n  var dialogRef = useRef(null);\n  var overlayRef = useRef(null);\n\n  var _useIds = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\"),\n      _useIds2 = _slicedToArray(_useIds, 3),\n      dialogId = _useIds2[0],\n      headerId = _useIds2[1],\n      bodyId = _useIds2[2];\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n\n\n  useAriaHidden(dialogRef, isOpen && useInert);\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n\n  useModalManager(dialogRef, isOpen);\n  var mouseDownTarget = useRef(null);\n  var onMouseDown = useCallback(function (event) {\n    mouseDownTarget.current = event.target;\n  }, []);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      headerMounted = _useState2[0],\n      setHeaderMounted = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bodyMounted = _useState4[0],\n      setBodyMounted = _useState4[1];\n\n  var getDialogProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      role: \"dialog\"\n    }, props, {\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, function (event) {\n        return event.stopPropagation();\n      })\n    });\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  var onOverlayClick = useCallback(function (event) {\n    event.stopPropagation();\n    /**\n     * Make sure the event starts and ends on the same DOM element.\n     *\n     * This is used to prevent the modal from closing when you\n     * start dragging from the content, and release drag outside the content.\n     *\n     * We prevent this because it is technically not a considered \"click outside\"\n     */\n\n    if (mouseDownTarget.current !== event.target) return;\n    /**\n     * When you click on the overlay, we want to remove only the topmost modal\n     */\n\n    if (!manager.isTopModal(dialogRef)) return;\n\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  var getDialogContainerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown)\n    });\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen: isOpen,\n    onClose: onClose,\n    headerId: headerId,\n    bodyId: bodyId,\n    setBodyMounted: setBodyMounted,\n    setHeaderMounted: setHeaderMounted,\n    dialogRef: dialogRef,\n    overlayRef: overlayRef,\n    getDialogProps: getDialogProps,\n    getDialogContainerProps: getDialogContainerProps\n  };\n}\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\n\nexport function useAriaHidden(ref, shouldHide) {\n  useEffect(function () {\n    if (!ref.current) return undefined;\n    var undo = null;\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current);\n    }\n\n    return function () {\n      if (shouldHide) {\n        undo == null ? void 0 : undo();\n      }\n    };\n  }, [shouldHide, ref]);\n}","map":{"version":3,"mappings":"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","names":["useIds","callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useRef","useState","manager","useModalManager","useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClickProp","onOverlayClick","onEsc","dialogRef","overlayRef","dialogId","headerId","bodyId","useAriaHidden","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getDialogProps","ref","role","tabIndex","undefined","onClick","isTopModal","getDialogContainerProps","shouldHide","undo"],"sources":["../../src/use-modal.ts"],"sourcesContent":["import { useIds } from \"@chakra-ui/hooks\"\nimport { callAllHandlers } from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { hideOthers, Undo } from \"aria-hidden\"\nimport {\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport { manager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   *  @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n  useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!manager.isTopModal(dialogRef)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current) return undefined\n\n    let undo: Undo | null = null\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current)\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo?.()\n      }\n    }\n  }, [shouldHide, ref])\n}\n"]},"metadata":{},"sourceType":"module"}