{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { css, isStyleProp } from \"@chakra-ui/styled-system\";\nimport { objectFilter } from \"@chakra-ui/utils\";\nimport _styled from \"@emotion/styled\";\nimport { shouldForwardProp } from \"./should-forward-prop\";\nimport { domElements } from \"./system.utils\";\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\n\nexport var toCSSObject = function toCSSObject(_ref) {\n  var baseStyle = _ref.baseStyle;\n  return function (props) {\n    var cssProp = props.css,\n        __css = props.__css,\n        sx = props.sx,\n        rest = _objectWithoutPropertiesLoose(props, [\"theme\", \"css\", \"__css\", \"sx\"]);\n\n    var styleProps = objectFilter(rest, function (_, prop) {\n      return isStyleProp(prop);\n    });\n    var finalStyles = Object.assign({}, __css, baseStyle, styleProps, sx);\n    var computedCSS = css(finalStyles)(props.theme);\n    return cssProp ? [computedCSS, cssProp] : computedCSS;\n  };\n};\nexport function styled(component, options) {\n  var _ref2 = options != null ? options : {},\n      baseStyle = _ref2.baseStyle,\n      styledOptions = _objectWithoutPropertiesLoose(_ref2, [\"baseStyle\"]);\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp;\n  }\n\n  var styleObject = toCSSObject({\n    baseStyle: baseStyle\n  });\n  return _styled(component, styledOptions)(styleObject);\n}\nexport var chakra = styled;\ndomElements.forEach(function (tag) {\n  chakra[tag] = chakra(tag);\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,SACEA,GADF,EAEEC,WAFF,QAKO,0BALP;AAMA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,OAAP,MAA0D,iBAA1D;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AAEA,SAASC,WAAT,QAAyC,gBAAzC;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAA2B,GAAG,SAA9BA,WAA8B;EAAA,IAAGC,SAAH,QAAGA,SAAH;EAAA,OAAoBC,eAAD,EAAW;IACvE,IAAoBC,OAApB,GAAoDD,KAApD,CAAeR,GAAf;IAAA,IAA6BU,KAA7B,GAAoDF,KAApD,CAA6BE,KAA7B;IAAA,IAAoCC,EAApC,GAAoDH,KAApD,CAAoCG,EAApC;IAAA,IAA2CC,IAA3C,iCAAoDJ,KAApD;;IACA,IAAMK,UAAU,GAAGX,YAAY,CAACU,IAAD,EAAO,UAACE,CAAD,EAAIC,IAAJ;MAAA,OAAad,WAAW,CAACc,IAAD,CAAxB;IAAA,CAAP,CAA/B;IACA,IAAMC,WAAW,GAAGC,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBP,KAAlBO,EAAyBV,SAAzBU,EAAoCJ,UAApCI,EAAgDN,EAAhDM,CAApB;IACA,IAAME,WAAW,GAAGnB,GAAG,CAACgB,WAAD,CAAHhB,CAAiBQ,KAAK,CAACY,KAAvBpB,CAApB;IACA,OAAOS,OAAO,GAAG,CAACU,WAAD,EAAcV,OAAd,CAAH,GAA4BU,WAA1C;EALyC;AAApC;AAcP,OAAO,SAASE,MAAT,CACLC,SADK,EAELC,OAFK,EAGL;EACA,YAAwCA,OAAxC,QAAwCA,aAAW,EAAnD;EAAA,IAAQhB,SAAR,SAAQA,SAAR;EAAA,IAAsBiB,aAAtB;;EAEA,IAAI,CAACA,aAAa,CAACpB,iBAAnB,EAAsC;IACpCoB,aAAa,CAACpB,iBAAdoB,GAAkCpB,iBAAlCoB;EACD;;EAED,IAAMC,WAAW,GAAGnB,WAAW,CAAC;IAAEC;EAAF,CAAD,CAA/B;EACA,OAAOJ,OAAO,CACZmB,SADY,EAEZE,aAFY,CAAPrB,CAGLsB,WAHKtB,CAAP;AAID;AAqBD,OAAO,IAAMuB,MAAM,GAAIL,MAAhB;AAGPhB,WAAW,CAACsB,OAAZtB,CAAqBuB,aAAD,EAAS;EAC3BF,MAAM,CAACE,GAAD,CAANF,GAAcA,MAAM,CAACE,GAAD,CAApBF;AADF","names":["css","isStyleProp","objectFilter","_styled","shouldForwardProp","domElements","toCSSObject","baseStyle","props","cssProp","__css","sx","rest","styleProps","_","prop","finalStyles","Object","assign","computedCSS","theme","styled","component","options","styledOptions","styleObject","chakra","forEach","tag"],"sources":["../../src/system.ts"],"sourcesContent":["import {\n  css,\n  isStyleProp,\n  StyleProps,\n  SystemStyleObject,\n} from \"@chakra-ui/styled-system\"\nimport { objectFilter } from \"@chakra-ui/utils\"\nimport _styled, { CSSObject, FunctionInterpolation } from \"@emotion/styled\"\nimport { shouldForwardProp } from \"./should-forward-prop\"\nimport { As, ChakraComponent, ChakraProps, PropsOf } from \"./system.types\"\nimport { domElements, DOMElements } from \"./system.utils\"\n\ntype StyleResolverProps = SystemStyleObject & {\n  __css?: SystemStyleObject\n  sx?: SystemStyleObject\n  theme: any\n  css?: CSSObject\n}\n\ninterface GetStyleObject {\n  (options: {\n    baseStyle?: SystemStyleObject\n  }): FunctionInterpolation<StyleResolverProps>\n}\n\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\nexport const toCSSObject: GetStyleObject = ({ baseStyle }) => (props) => {\n  const { theme, css: cssProp, __css, sx, ...rest } = props\n  const styleProps = objectFilter(rest, (_, prop) => isStyleProp(prop))\n  const finalStyles = Object.assign({}, __css, baseStyle, styleProps, sx)\n  const computedCSS = css(finalStyles)(props.theme)\n  return cssProp ? [computedCSS, cssProp] : computedCSS\n}\n\ninterface StyledOptions {\n  shouldForwardProp?(prop: string): boolean\n  label?: string\n  baseStyle?: SystemStyleObject\n}\n\nexport function styled<T extends As, P = {}>(\n  component: T,\n  options?: StyledOptions,\n) {\n  const { baseStyle, ...styledOptions } = options ?? {}\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp\n  }\n\n  const styleObject = toCSSObject({ baseStyle })\n  return _styled(\n    component as React.ComponentType<any>,\n    styledOptions,\n  )(styleObject) as ChakraComponent<T, P>\n}\n\nexport type HTMLChakraComponents = {\n  [Tag in DOMElements]: ChakraComponent<Tag, {}>\n}\n\nexport type HTMLChakraProps<T extends As> = Omit<\n  PropsOf<T>,\n  T extends \"svg\"\n    ? \"ref\" | \"children\" | keyof StyleProps\n    : \"ref\" | keyof StyleProps\n> &\n  ChakraProps & { as?: As }\n\ntype ChakraFactory = {\n  <T extends As, P = {}>(\n    component: T,\n    options?: StyledOptions,\n  ): ChakraComponent<T, P>\n}\n\nexport const chakra = (styled as unknown) as ChakraFactory &\n  HTMLChakraComponents\n\ndomElements.forEach((tag) => {\n  chakra[tag] = chakra(tag)\n})\n"]},"metadata":{},"sourceType":"module"}