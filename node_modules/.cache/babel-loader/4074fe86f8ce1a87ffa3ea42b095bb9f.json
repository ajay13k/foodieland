{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, noop } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\n\nvar Toast = function Toast(props) {\n  var status = props.status,\n      variant = props.variant,\n      id = props.id,\n      title = props.title,\n      isClosable = props.isClosable,\n      onClose = props.onClose,\n      description = props.description;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\"\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, null, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    insetEnd: 1,\n    top: 1\n  }));\n};\n\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nexport var defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nexport function createStandaloneToast(_temp) {\n  var _ref = _temp === void 0 ? defaultStandaloneParam : _temp,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme,\n      _ref$colorMode = _ref.colorMode,\n      colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode,\n      _ref$toggleColorMode = _ref.toggleColorMode,\n      toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode,\n      _ref$setColorMode = _ref.setColorMode,\n      setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode,\n      _ref$defaultOptions = _ref.defaultOptions,\n      defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions;\n\n  var renderWithProviders = function renderWithProviders(props, options) {\n    return /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n      value: {\n        colorMode: colorMode,\n        setColorMode: setColorMode,\n        toggleColorMode: toggleColorMode\n      }\n    }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n  };\n\n  var toastImpl = function toastImpl(options) {\n    var opts = _extends({}, defaultOptions, options);\n\n    var Message = function Message(props) {\n      return renderWithProviders(props, opts);\n    };\n\n    return toast.notify(Message, opts);\n  };\n\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = function (id, options) {\n    if (!id) return;\n\n    var opts = _extends({}, defaultOptions, options);\n\n    toast.update(id, _extends({}, opts, {\n      message: function message(props) {\n        return renderWithProviders(props, opts);\n      }\n    }));\n  };\n\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast(options) {\n  var _useChakra = useChakra(),\n      theme = _useChakra.theme,\n      setColorMode = _useChakra.setColorMode,\n      toggleColorMode = _useChakra.toggleColorMode,\n      colorMode = _useChakra.colorMode;\n\n  return React.useMemo(function () {\n    return createStandaloneToast({\n      theme: theme,\n      colorMode: colorMode,\n      setColorMode: setColorMode,\n      toggleColorMode: toggleColorMode,\n      defaultOptions: options\n    });\n  }, [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\nexport default useToast;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AACA,SACEA,KADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,UAJF,QAKO,kBALP;AAMA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,MADF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,SALF,QAMO,mBANP;AAOA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,eAAtB;;AAyDA,IAAMC,KAAoB,GAAIC,SAAxBD,KAAwBC,MAAD,EAAW;EACtC,IAAQC,MAAR,GAAyED,KAAzE,CAAQC,MAAR;EAAA,IAAgBC,OAAhB,GAAyEF,KAAzE,CAAgBE,OAAhB;EAAA,IAAyBC,EAAzB,GAAyEH,KAAzE,CAAyBG,EAAzB;EAAA,IAA6BC,KAA7B,GAAyEJ,KAAzE,CAA6BI,KAA7B;EAAA,IAAoCC,UAApC,GAAyEL,KAAzE,CAAoCK,UAApC;EAAA,IAAgDC,OAAhD,GAAyEN,KAAzE,CAAgDM,OAAhD;EAAA,IAAyDC,WAAzD,GAAyEP,KAAzE,CAAyDO,WAAzD;EAEA,oBACEV,oBAACZ,KAAD;IACEgB,MAAM,EAAEA,MADV;IAEEC,OAAO,EAAEA,OAFX;IAGEC,EAAE,EAAEA,EAHN;IAIEK,UAAU,EAAC,OAJb;IAKEC,YAAY,EAAC,IALf;IAMEC,SAAS,EAAC,IANZ;IAOEC,UAAU,EAAE,CAPd;IAQEC,SAAS,EAAC,OARZ;IASEC,KAAK,EAAC;EATR,gBAWEhB,oBAACV,SAAD,OAXF,eAYEU,oBAACP,MAAD,CAAQwB,GAAR;IAAYC,IAAI,EAAC;EAAjB,GACGX,KAAK,iBAAIP,oBAACT,UAAD,QAAagB,KAAb,CADZ,EAEGG,WAAW,iBACVV,oBAACX,gBAAD;IAAkB8B,OAAO,EAAC;EAA1B,GAAmCT,WAAnC,CAHJ,CAZF,EAkBGF,UAAU,iBACTR,oBAACR,WAAD;IACE4B,IAAI,EAAC,IADP;IAEEC,OAAO,EAAEZ,OAFX;IAGEa,QAAQ,EAAC,UAHX;IAIEC,QAAQ,EAAE,CAJZ;IAKEC,GAAG,EAAE;EALP,EAnBJ,CADF;AAHF;;AAmCA,IAAMC,QAAQ,GAAG;EACfC,QAAQ,EAAE,IADK;EAEfJ,QAAQ,EAAE,QAFK;EAGfjB,OAAO,EAAE;AAHM,CAAjB;AAYA,OAAO,IAAMsB,sBAA4D,GAAG;EAC1EC,KAAK,EAAE/B,YADmE;EAE1EgC,SAAS,EAAE,OAF+D;EAG1EC,eAAe,EAAE/B,IAHyD;EAI1EgC,YAAY,EAAEhC,IAJ4D;EAK1EiC,cAAc,EAAEP;AAL0D,CAArE;AAOP;AACA;AACA;;AACA,OAAO,SAASQ,qBAAT,QAMiD;EAAA,8BAAxBN,sBAAwB;EAAA,sBALtDC,KAKsD;EAAA,IALtDA,KAKsD,2BAL9CD,sBAAsB,CAACC,KAKuB;EAAA,0BAJtDC,SAIsD;EAAA,IAJtDA,SAIsD,+BAJ1CF,sBAAsB,CAACE,SAImB;EAAA,gCAHtDC,eAGsD;EAAA,IAHtDA,eAGsD,qCAHpCH,sBAAsB,CAACG,eAGa;EAAA,6BAFtDC,YAEsD;EAAA,IAFtDA,YAEsD,kCAFvCJ,sBAAsB,CAACI,YAEgB;EAAA,+BADtDC,cACsD;EAAA,IADtDA,cACsD,oCADrCL,sBAAsB,CAACK,cACc;;EACtD,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1B/B,KAD0B,EAE1BgC,OAF0B;IAAA,oBAI1BnC,oBAACL,aAAD;MAAeiC,KAAK,EAAEA;IAAtB,gBACE5B,oBAACN,gBAAD,CAAkB0C,QAAlB;MACEC,KAAK,EAAE;QAAER,SAAF,EAAEA,SAAF;QAAaE,YAAb,EAAaA,YAAb;QAA2BD;MAA3B;IADT,GAGGhC,UAAU,CAACqC,OAAO,CAACG,MAAT,CAAVxC,GACCqC,OAAO,CAACG,MAARH,CAAehC,KAAfgC,CADDrC,gBAGCE,oBAACE,KAAD,eAAWC,KAAX,EAAsBgC,OAAtB,EANJ,CADF,CAJ0B;EAAA,CAA5B;;EAiBA,IAAMI,SAAS,GAAIJ,SAAbI,SAAaJ,QAAD,EAA+B;IAC/C,IAAMK,IAAI,gBAAQR,cAAR,EAA2BG,OAA3B,CAAV;;IAEA,IAAMM,OAA8B,GAAItC,SAAlCsC,OAAkCtC,MAAD;MAAA,OACrC+B,mBAAmB,CAAC/B,KAAD,EAAQqC,IAAR,CADkB;IAAA,CAAvC;;IAGA,OAAOvC,KAAK,CAACyC,MAANzC,CAAawC,OAAbxC,EAAsBuC,IAAtBvC,CAAP;EANF;;EASAsC,SAAS,CAACI,KAAVJ,GAAkBtC,KAAK,CAAC0C,KAAxBJ;EACAA,SAAS,CAACK,QAAVL,GAAqBtC,KAAK,CAAC2C,QAA3BL,CA5BsD,CA8BtD;;EACAA,SAAS,CAACM,MAAVN,GAAmB,UAACjC,EAAD,EAAc6B,OAAd,EAAuD;IACxE,IAAI,CAAC7B,EAAL,EAAS;;IAET,IAAMkC,IAAI,gBAAQR,cAAR,EAA2BG,OAA3B,CAAV;;IAEAlC,KAAK,CAAC4C,MAAN5C,CAAaK,EAAbL,eACKuC,IADL;MAEEM,OAAO,EAAG3C,sBAAD;QAAA,OAAW+B,mBAAmB,CAAC/B,KAAD,EAAQqC,IAAR,CAA9B;MAAA;IAFX;EALF;;EAWAD,SAAS,CAACQ,QAAVR,GAAqBtC,KAAK,CAAC8C,QAA3BR;EAEA,OAAOA,SAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASS,QAAT,CAAkBb,OAAlB,EAA6C;EAClD,iBAA4DvC,SAAS,EAArE;EAAA,IAAQgC,KAAR,cAAQA,KAAR;EAAA,IAAeG,YAAf,cAAeA,YAAf;EAAA,IAA6BD,eAA7B,cAA6BA,eAA7B;EAAA,IAA8CD,SAA9C,cAA8CA,SAA9C;;EACA,OAAO7B,KAAK,CAACiD,OAANjD,CACL;IAAA,OACEiC,qBAAqB,CAAC;MACpBL,KADoB,EACpBA,KADoB;MAEpBC,SAFoB,EAEpBA,SAFoB;MAGpBE,YAHoB,EAGpBA,YAHoB;MAIpBD,eAJoB,EAIpBA,eAJoB;MAKpBE,cAAc,EAAEG;IALI,CAAD,CADvB;EAAA,CADKnC,EASL,CAAC4B,KAAD,EAAQG,YAAR,EAAsBD,eAAtB,EAAuCD,SAAvC,EAAkDM,OAAlD,CATKnC,CAAP;AAWD;AAED,eAAegD,QAAf","names":["Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","chakra","ColorModeContext","ThemeProvider","useChakra","defaultTheme","isFunction","noop","React","toast","Toast","props","status","variant","id","title","isClosable","onClose","description","alignItems","borderRadius","boxShadow","paddingEnd","textAlign","width","div","flex","display","size","onClick","position","insetEnd","top","defaults","duration","defaultStandaloneParam","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","createStandaloneToast","renderWithProviders","options","Provider","value","render","toastImpl","opts","Message","notify","close","closeAll","update","message","isActive","useToast","useMemo"],"sources":["../../src/use-toast.tsx"],"sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { isFunction, noop } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastOptions[\"position\"]\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: string\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingEnd={8}\n      textAlign=\"start\"\n      width=\"auto\"\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\">\n        {title && <AlertTitle>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          insetEnd={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\nexport type CreateStandAloneToastParam = Partial<\n  {\n    setColorMode: (value: ColorMode) => void\n  } & ReturnType<typeof useChakra> & { defaultOptions: UseToastOptions }\n>\n\nexport const defaultStandaloneParam: Required<CreateStandAloneToastParam> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults,\n}\n/**\n * Create a toast from outside of React Components\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n}: CreateStandAloneToastParam = defaultStandaloneParam) {\n  const renderWithProviders = (\n    props: React.PropsWithChildren<RenderProps>,\n    options: UseToastOptions,\n  ) => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider\n        value={{ colorMode, setColorMode, toggleColorMode }}\n      >\n        {isFunction(options.render) ? (\n          options.render(props)\n        ) : (\n          <Toast {...props} {...options} />\n        )}\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  const toastImpl = (options?: UseToastOptions) => {\n    const opts = { ...defaultOptions, ...options }\n\n    const Message: React.FC<RenderProps> = (props) =>\n      renderWithProviders(props, opts)\n\n    return toast.notify(Message, opts)\n  }\n\n  toastImpl.close = toast.close\n  toastImpl.closeAll = toast.closeAll\n\n  // toasts can only be updated if they have a valid id\n  toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    if (!id) return\n\n    const opts = { ...defaultOptions, ...options }\n\n    toast.update(id, {\n      ...opts,\n      message: (props) => renderWithProviders(props, opts),\n    })\n  }\n\n  toastImpl.isActive = toast.isActive\n\n  return toastImpl\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions) {\n  const { theme, setColorMode, toggleColorMode, colorMode } = useChakra()\n  return React.useMemo(\n    () =>\n      createStandaloneToast({\n        theme,\n        colorMode,\n        setColorMode,\n        toggleColorMode,\n        defaultOptions: options,\n      }),\n    [theme, setColorMode, toggleColorMode, colorMode, options],\n  )\n}\n\nexport default useToast\n"]},"metadata":{},"sourceType":"module"}