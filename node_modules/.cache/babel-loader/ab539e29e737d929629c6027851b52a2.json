{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var TableContainer = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _ref;\n\n  var overflow = props.overflow,\n      overflowX = props.overflowX,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"overflow\", \"overflowX\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-table__container\", className)\n  }, rest, {\n    __css: {\n      display: \"block\",\n      whiteSpace: \"nowrap\",\n      WebkitOverflowScrolling: \"touch\",\n      overflowX: (_ref = overflow != null ? overflow : overflowX) != null ? _ref : \"auto\",\n      overflowY: \"hidden\",\n      maxWidth: \"100%\"\n    }\n  }));\n});\nexport var Table = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Table\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      tableProps = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.table, _extends({\n    role: \"table\",\n    ref: ref,\n    __css: styles.table,\n    className: cx(\"chakra-table\", className)\n  }, tableProps)));\n});\n\nif (__DEV__) {\n  Table.displayName = \"Table\";\n}\n\nexport var TableCaption = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"bottom\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, [\"placement\"]);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.caption, _extends({}, rest, {\n    ref: ref,\n    __css: _extends({}, styles.caption, {\n      captionSide: placement\n    })\n  }));\n});\n\nif (__DEV__) {\n  TableCaption.displayName = \"TableCaption\";\n}\n\nexport var Thead = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.thead, _extends({}, props, {\n    ref: ref,\n    __css: styles.thead\n  }));\n});\nexport var Tbody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tbody, _extends({}, props, {\n    ref: ref,\n    __css: styles.tbody\n  }));\n});\nexport var Tfoot = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tfoot, _extends({}, props, {\n    ref: ref,\n    __css: styles.tfoot\n  }));\n});\nexport var Th = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var isNumeric = _ref2.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"isNumeric\"]);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.th, _extends({}, rest, {\n    ref: ref,\n    __css: styles.th,\n    \"data-is-numeric\": isNumeric\n  }));\n});\nexport var Tr = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tr, _extends({\n    role: \"row\"\n  }, props, {\n    ref: ref,\n    __css: styles.tr\n  }));\n});\nexport var Td = /*#__PURE__*/forwardRef(function (_ref3, ref) {\n  var isNumeric = _ref3.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"isNumeric\"]);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.td, _extends({\n    role: \"gridcell\"\n  }, rest, {\n    ref: ref,\n    __css: styles.td,\n    \"data-is-numeric\": isNumeric\n  }));\n});","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","__DEV__","React","TableContainer","props","ref","overflow","overflowX","className","rest","div","__css","display","whiteSpace","WebkitOverflowScrolling","overflowY","maxWidth","Table","styles","tableProps","value","table","role","displayName","TableCaption","placement","caption","captionSide","Thead","thead","Tbody","tbody","Tfoot","tfoot","Th","isNumeric","_ref2","_objectWithoutPropertiesLoose","th","Tr","tr","Td","_ref3","td"],"sources":["../../src/table.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface TableContainerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const TableContainer = forwardRef<TableContainerProps, \"div\">(\n  (props: HTMLChakraProps<\"div\">, ref) => {\n    const { overflow, overflowX, className, ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-table__container\", className)}\n        {...rest}\n        __css={{\n          display: \"block\",\n          whiteSpace: \"nowrap\",\n          WebkitOverflowScrolling: \"touch\",\n          overflowX: overflow ?? overflowX ?? \"auto\",\n          overflowY: \"hidden\",\n          maxWidth: \"100%\",\n        }}\n      />\n    )\n  },\n)\n\nexport interface TableProps\n  extends HTMLChakraProps<\"table\">,\n    ThemingProps<\"Table\"> {}\n\nexport const Table = forwardRef<TableProps, \"table\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props)\n  const { className, ...tableProps } = omitThemingProps(props)\n\n  return (\n    <StylesProvider value={styles}>\n      <chakra.table\n        role=\"table\"\n        ref={ref}\n        __css={styles.table}\n        className={cx(\"chakra-table\", className)}\n        {...tableProps}\n      />\n    </StylesProvider>\n  )\n})\n\nif (__DEV__) {\n  Table.displayName = \"Table\"\n}\n\nexport interface TableCaptionProps extends HTMLChakraProps<\"caption\"> {\n  /**\n   * The placement of the table caption. This sets the `caption-side` CSS attribute.\n   * @default \"bottom\"\n   */\n  placement?: \"top\" | \"bottom\"\n}\n\nexport const TableCaption = forwardRef<TableCaptionProps, \"caption\">(\n  (props, ref) => {\n    const { placement = \"bottom\", ...rest } = props\n    const styles = useStyles()\n    return (\n      <chakra.caption\n        {...rest}\n        ref={ref}\n        __css={{\n          ...styles.caption,\n          captionSide: placement,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TableCaption.displayName = \"TableCaption\"\n}\n\nexport interface TableHeadProps extends HTMLChakraProps<\"thead\"> {}\n\nexport const Thead = forwardRef<TableHeadProps, \"thead\">((props, ref) => {\n  const styles = useStyles()\n  return <chakra.thead {...props} ref={ref} __css={styles.thead} />\n})\n\nexport interface TableBodyProps extends HTMLChakraProps<\"tbody\"> {}\n\nexport const Tbody = forwardRef<TableBodyProps, \"tbody\">((props, ref) => {\n  const styles = useStyles()\n  return <chakra.tbody {...props} ref={ref} __css={styles.tbody} />\n})\n\nexport interface TableFooterProps extends HTMLChakraProps<\"tfoot\"> {}\n\nexport const Tfoot = forwardRef<TableFooterProps, \"tfoot\">((props, ref) => {\n  const styles = useStyles()\n  return <chakra.tfoot {...props} ref={ref} __css={styles.tfoot} />\n})\n\nexport interface TableColumnHeaderProps extends HTMLChakraProps<\"th\"> {\n  /**\n   * Aligns the cell content to the right\n   */\n  isNumeric?: boolean\n}\nexport const Th = forwardRef<TableColumnHeaderProps, \"th\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.th\n        {...rest}\n        ref={ref}\n        __css={styles.th}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n\nexport interface TableRowProps extends HTMLChakraProps<\"tr\"> {}\nexport const Tr = forwardRef<TableRowProps, \"tr\">((props, ref) => {\n  const styles = useStyles()\n\n  return <chakra.tr role=\"row\" {...props} ref={ref} __css={styles.tr} />\n})\n\nexport interface TableCellProps extends HTMLChakraProps<\"td\"> {\n  /**\n   * Aligns the cell content to the right\n   */\n  isNumeric?: boolean\n}\nexport const Td = forwardRef<TableCellProps, \"td\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useStyles()\n\n    return (\n      <chakra.td\n        role=\"gridcell\"\n        {...rest}\n        ref={ref}\n        __css={styles.td}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n"]},"metadata":{},"sourceType":"module"}