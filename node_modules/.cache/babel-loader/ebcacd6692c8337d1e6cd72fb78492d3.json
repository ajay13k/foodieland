{"ast":null,"code":"import _classCallCheck from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { useEffect } from \"react\";\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\n\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    _classCallCheck(this, ModalManager);\n\n    _defineProperty(this, \"modals\", void 0);\n\n    this.modals = [];\n  }\n\n  _createClass(ModalManager, [{\n    key: \"add\",\n    value: function add(modal) {\n      this.modals.push(modal);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      this.modals = this.modals.filter(function (_modal) {\n        return _modal !== modal;\n      });\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      var topmostModal = this.modals[this.modals.length - 1];\n      return topmostModal === modal;\n    }\n  }]);\n\n  return ModalManager;\n}();\n\nexport var manager = new ModalManager();\nexport function useModalManager(ref, isOpen) {\n  useEffect(function () {\n    if (isOpen) {\n      manager.add(ref);\n    }\n\n    return function () {\n      manager.remove(ref);\n    };\n  }, [isOpen, ref]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA+B,OAA/B;AAEA;AACA;AACA;AACA;;IACMC,Y;EAEJC,wBAAc;IAAA;;IAAAC;;IACZ,KAAKC,MAAL,GAAc,EAAd;EACD;;;;WAEDC,aAAIC,KAAJD,EAAgB;MACd,KAAKD,MAAL,CAAYG,IAAZ,CAAiBD,KAAjB;IACD;;;WAEDE,gBAAOF,KAAPE,EAAmB;MACjB,KAAKJ,MAAL,GAAc,KAAKA,MAAL,CAAYK,MAAZ,CAAoBC,gBAAD;QAAA,OAAYA,MAAM,KAAKJ,KAAvB;MAAA,CAAnB,CAAd;IACD;;;WAEDK,oBAAWL,KAAXK,EAAuB;MACrB,IAAMC,YAAY,GAAG,KAAKR,MAAL,CAAY,KAAKA,MAAL,CAAYS,MAAZ,GAAqB,CAAjC,CAArB;MACA,OAAOD,YAAY,KAAKN,KAAxB;IACD;;;;;;AAGH,OAAO,IAAMQ,OAAO,GAAG,IAAIb,YAAJ,EAAhB;AAEP,OAAO,SAASc,eAAT,CAAyBC,GAAzB,EAAwCC,MAAxC,EAA0D;EAC/DjB,SAAS,CAAC,YAAM;IACd,IAAIiB,MAAJ,EAAY;MACVH,OAAO,CAACT,GAARS,CAAYE,GAAZF;IACD;;IACD,OAAO,YAAM;MACXA,OAAO,CAACN,MAARM,CAAeE,GAAfF;IADF;EAJO,GAON,CAACG,MAAD,EAASD,GAAT,CAPM,CAAThB;AAQD","names":["useEffect","ModalManager","constructor","_defineProperty","modals","add","modal","push","remove","filter","_modal","isTopModal","topmostModal","length","manager","useModalManager","ref","isOpen"],"sources":["../../src/modal-manager.ts"],"sourcesContent":["import { useEffect, Ref } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: any[]\n  constructor() {\n    this.modals = []\n  }\n\n  add(modal: any) {\n    this.modals.push(modal)\n  }\n\n  remove(modal: any) {\n    this.modals = this.modals.filter((_modal) => _modal !== modal)\n  }\n\n  isTopModal(modal: any) {\n    const topmostModal = this.modals[this.modals.length - 1]\n    return topmostModal === modal\n  }\n}\n\nexport const manager = new ModalManager()\n\nexport function useModalManager(ref: Ref<any>, isOpen?: boolean) {\n  useEffect(() => {\n    if (isOpen) {\n      manager.add(ref)\n    }\n    return () => {\n      manager.remove(ref)\n    }\n  }, [isOpen, ref])\n}\n"]},"metadata":{},"sourceType":"module"}