{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { addListener, getColorScheme, syncBodyClassName, root } from \"./color-mode.utils\";\nimport { localStorageManager } from \"./storage-manager\";\nexport var ColorModeContext = /*#__PURE__*/React.createContext({});\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\n\nexport var useColorMode = function useColorMode() {\n  var context = React.useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\n\nexport function ColorModeProvider(props) {\n  var value = props.value,\n      children = props.children,\n      _props$options = props.options,\n      useSystemColorMode = _props$options.useSystemColorMode,\n      initialColorMode = _props$options.initialColorMode,\n      _props$colorModeManag = props.colorModeManager,\n      colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var _React$useState = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(initialColorMode) : initialColorMode),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      colorMode = _React$useState2[0],\n      rawSetColorMode = _React$useState2[1];\n\n  React.useEffect(function () {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var mode = useSystemColorMode ? getColorScheme(initialColorMode) : root.get() || colorModeManager.get();\n\n      if (mode) {\n        rawSetColorMode(mode);\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode]);\n  React.useEffect(function () {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode]);\n  var setColorMode = React.useCallback(function (value) {\n    colorModeManager.set(value);\n    rawSetColorMode(value);\n  }, [colorModeManager]);\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(function () {\n    var removeListener;\n\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode);\n    }\n\n    return function () {\n      if (removeListener && useSystemColorMode) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(function () {\n    return {\n      colorMode: value != null ? value : colorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode\n    };\n  }, [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\n\nexport var DarkMode = function DarkMode(props) {\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    }\n  }, props));\n};\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\n\nexport var LightMode = function LightMode(props) {\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    }\n  }, props));\n};\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\n\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === \"dark\" ? dark : light;\n}","map":{"version":3,"mappings":"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","names":["isBrowser","noop","__DEV__","React","addListener","getColorScheme","syncBodyClassName","root","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","useState","type","get","colorMode","rawSetColorMode","useEffect","mode","isDark","set","setColorMode","useCallback","toggleColorMode","removeListener","useMemo","Provider","DarkMode","LightMode","useColorModeValue","light","dark"],"sources":["../../src/color-mode-provider.tsx"],"sourcesContent":["import { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n  root,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(initialColorMode)\n      : initialColorMode,\n  )\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(initialColorMode)\n        : root.get() || colorModeManager.get()\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    let removeListener: any\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"]},"metadata":{},"sourceType":"module"}