{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef, useControllableProp } from \"@chakra-ui/hooks\";\nimport { clampValue, countDecimalPlaces, maxSafeInteger, minSafeInteger, toPrecision } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nexport function useCounter(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      onChange = _props.onChange,\n      precisionProp = _props.precision,\n      defaultValue = _props.defaultValue,\n      valueProp = _props.value,\n      _props$step = _props.step,\n      stepProp = _props$step === void 0 ? 1 : _props$step,\n      _props$min = _props.min,\n      min = _props$min === void 0 ? minSafeInteger : _props$min,\n      _props$max = _props.max,\n      max = _props$max === void 0 ? maxSafeInteger : _props$max,\n      _props$keepWithinRang = _props.keepWithinRange,\n      keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang;\n  var onChangeProp = useCallbackRef(onChange);\n\n  var _useState = useState(function () {\n    var _cast;\n\n    if (defaultValue == null) return \"\";\n    return (_cast = cast(defaultValue, stepProp, precisionProp)) != null ? _cast : \"\";\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      valueState = _useState2[0],\n      setValue = _useState2[1];\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n\n\n  var _useControllableProp = useControllableProp(valueProp, valueState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      value = _useControllableProp2[1];\n\n  var decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  var precision = precisionProp != null ? precisionProp : decimalPlaces;\n  var update = useCallback(function (next) {\n    if (next === value) return;\n\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]); // Function to clamp the value and round it to the precision\n\n  var clamp = useCallback(function (value) {\n    var nextValue = value;\n\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  var increment = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    var next;\n    /**\n     * Let's follow the native browser behavior for\n     * scenarios where the input starts empty (\"\")\n     */\n\n    if (value === \"\") {\n      /**\n       * If `min` is set, native input, starts at the `min`.\n       * Else, it starts at `step`\n       */\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var decrement = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    var next; // Same thing here. We'll follow native implementation\n\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var reset = useCallback(function () {\n    var next;\n\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      var _cast2;\n\n      next = (_cast2 = cast(defaultValue, stepProp, precisionProp)) != null ? _cast2 : min;\n    }\n\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  var castValue = useCallback(function (value) {\n    var _cast3;\n\n    var nextValue = (_cast3 = cast(value, stepProp, precision)) != null ? _cast3 : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  var valueAsNumber = parse(value);\n  /**\n   * Common range checks\n   */\n\n  var isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  var isAtMax = valueAsNumber === max;\n  var isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange: isOutOfRange,\n    isAtMax: isAtMax,\n    isAtMin: isAtMin,\n    precision: precision,\n    value: value,\n    valueAsNumber: valueAsNumber,\n    update: update,\n    reset: reset,\n    increment: increment,\n    decrement: decrement,\n    clamp: clamp,\n    cast: castValue,\n    setValue: setValue\n  };\n}\n\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\n\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\n\nfunction cast(value, step, precision) {\n  var parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return undefined;\n  var decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}","map":{"version":3,"mappings":"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","names":["useCallbackRef","useControllableProp","clampValue","countDecimalPlaces","maxSafeInteger","minSafeInteger","toPrecision","useCallback","useState","useCounter","props","onChange","precisionProp","precision","defaultValue","valueProp","value","step","stepProp","min","max","keepWithinRange","onChangeProp","cast","valueState","setValue","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","Number","isNaN","undefined"],"sources":["../../src/use-counter.ts"],"sourcesContent":["import { useCallbackRef, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  toPrecision,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: StringOrNumber\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default -Infinity\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Infinity\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<StringOrNumber>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: StringOrNumber) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: StringOrNumber\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: StringOrNumber) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: StringOrNumber) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: StringOrNumber, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"]},"metadata":{},"sourceType":"module"}