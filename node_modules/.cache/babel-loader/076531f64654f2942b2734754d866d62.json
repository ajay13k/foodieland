{"ast":null,"code":"import CSSReset from \"@chakra-ui/css-reset\";\nimport { PortalManager } from \"@chakra-ui/portal\";\nimport { ColorModeProvider, GlobalStyle, ThemeProvider } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { EnvironmentProvider } from \"@chakra-ui/react-env\";\nimport * as React from \"react\";\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\n\nexport var ChakraProvider = function ChakraProvider(props) {\n  var children = props.children,\n      colorModeManager = props.colorModeManager,\n      portalZIndex = props.portalZIndex,\n      _props$resetCSS = props.resetCSS,\n      resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? defaultTheme : _props$theme,\n      environment = props.environment,\n      cssVarsRoot = props.cssVarsRoot;\n  return /*#__PURE__*/React.createElement(EnvironmentProvider, {\n    environment: environment\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    cssVarsRoot: cssVarsRoot\n  }, /*#__PURE__*/React.createElement(ColorModeProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, resetCSS && /*#__PURE__*/React.createElement(CSSReset, null), /*#__PURE__*/React.createElement(GlobalStyle, null), portalZIndex ? /*#__PURE__*/React.createElement(PortalManager, {\n    zIndex: portalZIndex\n  }, children) : children)));\n};","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SACEC,iBADF,EAGEC,WAHF,EAIEC,aAJF,QAMO,mBANP;AAOA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA,SACEC,mBADF,QAGO,sBAHP;AAIA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AA4CA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAIC,SAAlBD,cAAkBC,MAAD,EAAgC;EAC5D,IACEC,QADF,GAQID,KARJ,CACEC,QADF;EAAA,IAEEC,gBAFF,GAQIF,KARJ,CAEEE,gBAFF;EAAA,IAGEC,YAHF,GAQIH,KARJ,CAGEG,YAHF;EAAA,sBAQIH,KARJ,CAIEI,QAJF;EAAA,IAIEA,QAJF,gCAIa,IAJb;EAAA,mBAQIJ,KARJ,CAKEK,KALF;EAAA,IAKEA,KALF,6BAKUT,YALV;EAAA,IAMEU,WANF,GAQIN,KARJ,CAMEM,WANF;EAAA,IAOEC,WAPF,GAQIP,KARJ,CAOEO,WAPF;EAUA,oBACET,oBAACD,mBAAD;IAAqBS,WAAW,EAAEA;EAAlC,gBACER,oBAACH,aAAD;IAAeU,KAAK,EAAEA,KAAtB;IAA6BE,WAAW,EAAEA;EAA1C,gBACET,oBAACL,iBAAD;IACES,gBAAgB,EAAEA,gBADpB;IAEEM,OAAO,EAAEH,KAAK,CAACI;EAFjB,GAIGL,QAAQ,iBAAIN,oBAACP,QAAD,OAJf,eAKEO,oBAACJ,WAAD,OALF,EAMGS,YAAY,gBACXL,oBAACN,aAAD;IAAekB,MAAM,EAAEP;EAAvB,GAAsCF,QAAtC,CADW,GAGXA,QATJ,CADF,CADF,CADF;AAXK","names":["CSSReset","PortalManager","ColorModeProvider","GlobalStyle","ThemeProvider","defaultTheme","EnvironmentProvider","React","ChakraProvider","props","children","colorModeManager","portalZIndex","resetCSS","theme","environment","cssVarsRoot","options","config","zIndex"],"sources":["../../src/chakra-provider.tsx"],"sourcesContent":["import CSSReset from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\nimport * as React from \"react\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider = (props: ChakraProviderProps) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetCSS = true,\n    theme = defaultTheme,\n    environment,\n    cssVarsRoot,\n  } = props\n\n  return (\n    <EnvironmentProvider environment={environment}>\n      <ThemeProvider theme={theme} cssVarsRoot={cssVarsRoot}>\n        <ColorModeProvider\n          colorModeManager={colorModeManager}\n          options={theme.config}\n        >\n          {resetCSS && <CSSReset />}\n          <GlobalStyle />\n          {portalZIndex ? (\n            <PortalManager zIndex={portalZIndex}>{children}</PortalManager>\n          ) : (\n            children\n          )}\n        </ColorModeProvider>\n      </ThemeProvider>\n    </EnvironmentProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}