{"ast":null,"code":"import _defineProperty from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDisclosure, useFocusOnHide, useFocusOnPointerDown, useFocusOnShow, useIds } from \"@chakra-ui/hooks\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, contains, determineLazyBehavior, getRelatedTarget, px } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\n/**\n * @internal\n */\n\nexport function usePopover(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$closeOnBlur = _props.closeOnBlur,\n      closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n      _props$closeOnEsc = _props.closeOnEsc,\n      closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n      initialFocusRef = _props.initialFocusRef,\n      id = _props.id,\n      _props$returnFocusOnC = _props.returnFocusOnClose,\n      returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC,\n      _props$autoFocus = _props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,\n      arrowSize = _props.arrowSize,\n      arrowShadowColor = _props.arrowShadowColor,\n      _props$trigger = _props.trigger,\n      trigger = _props$trigger === void 0 ? TRIGGER.click : _props$trigger,\n      _props$openDelay = _props.openDelay,\n      openDelay = _props$openDelay === void 0 ? 200 : _props$openDelay,\n      _props$closeDelay = _props.closeDelay,\n      closeDelay = _props$closeDelay === void 0 ? 200 : _props$closeDelay,\n      isLazy = _props.isLazy,\n      _props$lazyBehavior = _props.lazyBehavior,\n      lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n      popperProps = _objectWithoutPropertiesLoose(props, [\"closeOnBlur\", \"closeOnEsc\", \"initialFocusRef\", \"id\", \"returnFocusOnClose\", \"autoFocus\", \"arrowSize\", \"arrowShadowColor\", \"trigger\", \"openDelay\", \"closeDelay\", \"isLazy\", \"lazyBehavior\"]);\n\n  var _useDisclosure = useDisclosure(props),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onOpen = _useDisclosure.onOpen,\n      onToggle = _useDisclosure.onToggle;\n\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n  var hasBeenOpened = useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasHeader = _useState2[0],\n      setHasHeader = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasBody = _useState4[0],\n      setHasBody = _useState4[1];\n\n  var _useIds = useIds(id, \"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"),\n      _useIds2 = _slicedToArray(_useIds, 4),\n      triggerId = _useIds2[0],\n      popoverId = _useIds2[1],\n      headerId = _useIds2[2],\n      bodyId = _useIds2[3];\n\n  var _usePopper = usePopper(_extends({}, popperProps, {\n    enabled: isOpen\n  })),\n      referenceRef = _usePopper.referenceRef,\n      getArrowProps = _usePopper.getArrowProps,\n      getPopperProps = _usePopper.getPopperProps,\n      getArrowInnerProps = _usePopper.getArrowInnerProps,\n      forceUpdate = _usePopper.forceUpdate;\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior,\n    isSelected: isOpen\n  });\n  var getPopoverProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var popoverProps = _extends({}, props, {\n      style: _extends({}, props.style, {\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      }),\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props.onKeyDown, function (event) {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props.onBlur, function (event) {\n        var relatedTarget = getRelatedTarget(event);\n        var targetIsPopover = contains(popoverRef.current, relatedTarget);\n        var targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        var isValidBlur = !targetIsPopover && !targetIsTrigger;\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : undefined,\n      \"aria-describedby\": hasBody ? bodyId : undefined\n    });\n\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, function () {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, function () {\n        isHoveringRef.current = false;\n        setTimeout(onClose, closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay]);\n  var getPopoverPositionerProps = useCallback(function (props, forwardedRef) {\n    var _extends2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return getPopperProps(_extends({}, props, {\n      style: _extends((_extends2 = {}, _defineProperty(_extends2, popperCSSVars.arrowSize.var, arrowSize ? px(arrowSize) : undefined), _defineProperty(_extends2, popperCSSVars.arrowShadowColor.var, arrowShadowColor), _defineProperty(_extends2, \"visibility\", isOpen ? \"visible\" : \"hidden\"), _extends2), props.style)\n    }), forwardedRef);\n  }, [arrowShadowColor, arrowSize, isOpen, getPopperProps]);\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var getTriggerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(triggerRef, _ref, referenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER.hover) {\n      /**\n       * Any content that shows on pointer hover should also show on keyboard focus.\n       * Consider focus and blur to be the `hover` for keyboard users.\n       *\n       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n       */\n      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);\n      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);\n      /**\n       * Any content that shows on hover or focus must be dismissible.\n       * This case pressing `Escape` will dismiss the popover\n       */\n\n      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, function (event) {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, function () {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, function () {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = undefined;\n        }\n\n        closeTimeout.current = window.setTimeout(function () {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, referenceRef, onToggle, onOpen, onClose, openDelay, closeDelay]);\n  useEffect(function () {\n    return function () {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  var getHeaderProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      id: headerId,\n      ref: mergeRefs(ref, function (node) {\n        setHasHeader(!!node);\n      })\n    });\n  }, [headerId]);\n  var getBodyProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      id: bodyId,\n      ref: mergeRefs(ref, function (node) {\n        setHasBody(!!node);\n      })\n    });\n  }, [bodyId]);\n  return {\n    forceUpdate: forceUpdate,\n    isOpen: isOpen,\n    onClose: onClose,\n    getArrowProps: getArrowProps,\n    getArrowInnerProps: getArrowInnerProps,\n    getPopoverPositionerProps: getPopoverPositionerProps,\n    getPopoverProps: getPopoverProps,\n    getTriggerProps: getTriggerProps,\n    getHeaderProps: getHeaderProps,\n    getBodyProps: getBodyProps\n  };\n}","map":{"version":3,"mappings":"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","names":["useDisclosure","useFocusOnHide","useFocusOnPointerDown","useFocusOnShow","useIds","popperCSSVars","usePopper","mergeRefs","callAllHandlers","contains","determineLazyBehavior","getRelatedTarget","px","useCallback","useEffect","useRef","useState","TRIGGER","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","trigger","openDelay","closeDelay","isLazy","lazyBehavior","popperProps","isOpen","onClose","onOpen","onToggle","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","hasHeader","setHasHeader","hasBody","setHasBody","triggerId","popoverId","headerId","bodyId","enabled","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","ref","focusRef","visible","shouldFocus","shouldRenderChildren","hasBeenSelected","isSelected","getPopoverProps","_ref","popoverProps","style","transformOrigin","varRef","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","targetIsPopover","targetIsTrigger","isValidBlur","undefined","onMouseEnter","onMouseLeave","setTimeout","getPopoverPositionerProps","forwardedRef","var","openTimeout","closeTimeout","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","getHeaderProps","node","getBodyProps"],"sources":["../../src/use-popover.ts"],"sourcesContent":["import {\n  useDisclosure,\n  useFocusOnHide,\n  useFocusOnPointerDown,\n  useFocusOnShow,\n  useIds,\n} from \"@chakra-ui/hooks\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { HTMLProps, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  contains,\n  determineLazyBehavior,\n  FocusableElement,\n  getRelatedTarget,\n  LazyBehavior,\n  px,\n} from \"@chakra-ui/utils\"\nimport { RefObject, useCallback, useEffect, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends UsePopperProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen,\n  })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? px(arrowSize)\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [arrowShadowColor, arrowSize, isOpen, getPopperProps],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, referenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      referenceRef,\n      onToggle,\n      onOpen,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onClose,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"]},"metadata":{},"sourceType":"module"}