{"ast":null,"code":"import _toConsumableArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport defaultTheme, { isChakraTheme } from \"@chakra-ui/theme\";\nimport { isFunction, mergeWith, pipe } from \"@chakra-ui/utils\";\n/**\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\n\nexport function extendTheme() {\n  for (var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++) {\n    extensions[_key] = arguments[_key];\n  }\n\n  var overrides = [].concat(extensions);\n  var baseTheme = extensions[extensions.length - 1];\n\n  if (isChakraTheme(baseTheme) && // this ensures backward compatibility\n  // previously only `extendTheme(override, baseTheme?)` was allowed\n  overrides.length > 1) {\n    overrides = overrides.slice(0, overrides.length - 1);\n  } else {\n    baseTheme = defaultTheme;\n  }\n\n  return pipe.apply(void 0, _toConsumableArray(overrides.map(function (extension) {\n    return function (prevTheme) {\n      return isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension);\n    };\n  })))(baseTheme);\n}\nexport function mergeThemeOverride() {\n  for (var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    overrides[_key2] = arguments[_key2];\n  }\n\n  return mergeWith.apply(void 0, [{}].concat(overrides, [mergeThemeCustomizer]));\n}\n\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return function () {\n      var sourceValue = isFunction(source) ? source.apply(void 0, arguments) : source;\n      var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  } // fallback to default behaviour\n\n\n  return undefined;\n}","map":{"version":3,"mappings":";AAAA,OAAOA,YAAP,IAEEC,aAFF,QAIO,kBAJP;AAKA,SAGEC,UAHF,EAIEC,SAJF,EAKEC,IALF,QAMO,kBANP;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,GAO2B;EAAA,kCAA7BC,UAA6B;IAA7BA,UAA6B,MAA7BA,GAA6BC,eAA7BD;EAA6B;;EAChC,IAAIE,SAAS,aAAOF,UAAP,CAAb;EACA,IAAIG,SAAS,GAAGH,UAAU,CAACA,UAAU,CAACI,MAAXJ,GAAoB,CAArB,CAA1B;;EAEA,IACEL,aAAa,CAACQ,SAAD,CAAbR,IACA;EACA;EACAO,SAAS,CAACE,MAAVF,GAAmB,CAJrB,EAKE;IACAA,SAAS,GAAGA,SAAS,CAACG,KAAVH,CAAgB,CAAhBA,EAAmBA,SAAS,CAACE,MAAVF,GAAmB,CAAtCA,CAAZA;EANF,OAOO;IACLC,SAAS,GAAIT,YAAbS;EACD;;EAED,OAAOL,IAAI,MAAJA,4BACFI,SAAS,CAACI,GAAVJ,CACAK,mBAAD;IAAA,OACEC,mBADa;MAAA,OAGbZ,UAAU,CAACW,SAAD,CAAVX,GACKW,SAAD,CAAmBC,SAAnB,CADJZ,GAEIa,kBAAkB,CAACD,SAAD,EAAYD,SAAZ,CALT;IAAA,CAAf;EAAA,CADCL,CADEJ,GASLK,SATKL,CAAP;AAUD;AAED,OAAO,SAASW,kBAAT,GAEqB;EAAA,mCADvBP,SACuB;IADvBA,SACuB,OADvBA,GACuBD,gBADvBC;EACuB;;EAC1B,OAAOL,SAAS,MAATA,UAAU,EAAVA,SAAiBK,SAAjBL,GAA4Ba,oBAA5Bb,GAAP;AACD;;AAED,SAASa,oBAAT,CACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,MAJF,EAKE;EACA,IACE,CAAClB,UAAU,CAACe,MAAD,CAAVf,IAAsBA,UAAU,CAACgB,QAAD,CAAjC,KACAG,MAAM,CAACC,SAAPD,CAAiBE,cAAjBF,CAAgCG,IAAhCH,CAAqCD,MAArCC,EAA6CF,GAA7CE,CAFF,EAGE;IACA,OAAO,YAAwB;MAC7B,IAAMI,WAAW,GAAGvB,UAAU,CAACe,MAAD,CAAVf,GAAqBe,MAAM,MAANA,SAAOV,SAAPU,CAArBf,GAAuCe,MAA3D;MAEA,IAAMS,aAAa,GAAGxB,UAAU,CAACgB,QAAD,CAAVhB,GAAuBgB,QAAQ,MAARA,SAASX,SAATW,CAAvBhB,GAA2CgB,QAAjE;MAEA,OAAOf,SAAS,CAAC,EAAD,EAAKsB,WAAL,EAAkBC,aAAlB,EAAiCV,oBAAjC,CAAhB;IALF;EALF,EAcA;;;EACA,OAAOW,SAAP;AACD","names":["defaultTheme","isChakraTheme","isFunction","mergeWith","pipe","extendTheme","extensions","arguments","overrides","baseTheme","length","slice","map","extension","prevTheme","mergeThemeOverride","mergeThemeCustomizer","source","override","key","object","Object","prototype","hasOwnProperty","call","sourceValue","overrideValue","undefined"],"sources":["../../src/extend-theme.ts"],"sourcesContent":["import defaultTheme, {\n  ChakraTheme,\n  isChakraTheme,\n  Theme,\n} from \"@chakra-ui/theme\"\nimport {\n  AnyFunction,\n  Dict,\n  isFunction,\n  mergeWith,\n  pipe,\n} from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        DeepPartial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends Array<any>\n    ? CloneKey<ThemeType, Key>\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<DeepPartial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport declare type ThemeOverride<\n  BaseTheme = Theme\n> = DeepPartial<ChakraTheme> & DeepThemeExtension<BaseTheme, ChakraTheme> & Dict\n\nexport type ThemeExtension<Override extends ThemeOverride = ThemeOverride> = (\n  themeOverride: Override,\n) => Override\n\nexport type BaseThemeWithExtensions<\n  BaseTheme extends ChakraTheme,\n  Extensions extends readonly [...any]\n> = BaseTheme &\n  (Extensions extends [infer L, ...infer R]\n    ? L extends AnyFunction\n      ? ReturnType<L> & BaseThemeWithExtensions<BaseTheme, R>\n      : L & BaseThemeWithExtensions<BaseTheme, R>\n    : Extensions)\n/**\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\nexport function extendTheme<\n  BaseTheme extends ChakraTheme = Theme,\n  Extensions extends (\n    | BaseTheme\n    | ThemeOverride<BaseTheme>\n    | ThemeExtension<ThemeOverride<BaseTheme>>\n  )[] = (ThemeOverride<BaseTheme> | ThemeExtension<ThemeOverride<BaseTheme>>)[]\n>(...extensions: [...Extensions]) {\n  let overrides = [...extensions]\n  let baseTheme = extensions[extensions.length - 1]\n\n  if (\n    isChakraTheme(baseTheme) &&\n    // this ensures backward compatibility\n    // previously only `extendTheme(override, baseTheme?)` was allowed\n    overrides.length > 1\n  ) {\n    overrides = overrides.slice(0, overrides.length - 1)\n  } else {\n    baseTheme = (defaultTheme as unknown) as BaseTheme\n  }\n\n  return pipe(\n    ...overrides.map(\n      (extension) => (\n        prevTheme: BaseThemeWithExtensions<BaseTheme, Extensions>,\n      ) =>\n        isFunction(extension)\n          ? (extension as any)(prevTheme)\n          : mergeThemeOverride(prevTheme, extension),\n    ),\n  )(baseTheme as BaseThemeWithExtensions<BaseTheme, Extensions>)\n}\n\nexport function mergeThemeOverride<BaseTheme extends ChakraTheme = ChakraTheme>(\n  ...overrides: ThemeOverride<BaseTheme>[]\n): ThemeOverride<BaseTheme> {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer)\n}\n\nfunction mergeThemeCustomizer(\n  source: unknown,\n  override: unknown,\n  key: string,\n  object: any,\n) {\n  if (\n    (isFunction(source) || isFunction(override)) &&\n    Object.prototype.hasOwnProperty.call(object, key)\n  ) {\n    return (...args: unknown[]) => {\n      const sourceValue = isFunction(source) ? source(...args) : source\n\n      const overrideValue = isFunction(override) ? override(...args) : override\n\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer)\n    }\n  }\n\n  // fallback to default behaviour\n  return undefined\n}\n"]},"metadata":{},"sourceType":"module"}