{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallback, useState } from \"react\";\n/**\n * React hook to manage boolean (on - off) states\n *\n * @param initialState the initial boolean state value\n */\n\nexport function useBoolean(initialState) {\n  if (initialState === void 0) {\n    initialState = false;\n  }\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var on = useCallback(function () {\n    setValue(true);\n  }, []);\n  var off = useCallback(function () {\n    setValue(false);\n  }, []);\n  var toggle = useCallback(function () {\n    setValue(function (prev) {\n      return !prev;\n    });\n  }, []);\n  return [value, {\n    on: on,\n    off: off,\n    toggle: toggle\n  }];\n}","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAIA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,YAApB,EAAwD;EAAA,IAApCA,YAAoC;IAApCA,YAAoC,GAAP,KAA7BA;EAAoC;;EAC7D,gBAA0BF,QAAQ,CAACE,YAAD,CAAlC;EAAA;EAAA,IAAOC,KAAP;EAAA,IAAcC,QAAd;;EAEA,IAAMC,EAAE,GAAGN,WAAW,CAAC,YAAM;IAC3BK,QAAQ,CAAC,IAAD,CAARA;EADoB,GAEnB,EAFmB,CAAtB;EAIA,IAAME,GAAG,GAAGP,WAAW,CAAC,YAAM;IAC5BK,QAAQ,CAAC,KAAD,CAARA;EADqB,GAEpB,EAFoB,CAAvB;EAIA,IAAMG,MAAM,GAAGR,WAAW,CAAC,YAAM;IAC/BK,QAAQ,CAAEI,cAAD;MAAA,OAAU,CAACA,IAAX;IAAA,CAAD,CAARJ;EADwB,GAEvB,EAFuB,CAA1B;EAIA,OAAO,CAACD,KAAD,EAAQ;IAAEE,EAAF,EAAEA,EAAF;IAAMC,GAAN,EAAMA,GAAN;IAAWC;EAAX,CAAR,CAAP;AACD","names":["useCallback","useState","useBoolean","initialState","value","setValue","on","off","toggle","prev"],"sources":["../../src/use-boolean.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\n\ntype InitialState = boolean | (() => boolean)\n\n/**\n * React hook to manage boolean (on - off) states\n *\n * @param initialState the initial boolean state value\n */\nexport function useBoolean(initialState: InitialState = false) {\n  const [value, setValue] = useState(initialState)\n\n  const on = useCallback(() => {\n    setValue(true)\n  }, [])\n\n  const off = useCallback(() => {\n    setValue(false)\n  }, [])\n\n  const toggle = useCallback(() => {\n    setValue((prev) => !prev)\n  }, [])\n\n  return [value, { on, off, toggle }] as const\n}\n"]},"metadata":{},"sourceType":"module"}