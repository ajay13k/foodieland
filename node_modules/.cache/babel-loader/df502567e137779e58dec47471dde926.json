{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra } from \"@chakra-ui/system\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\"; // @future: only call `motion(chakra.svg)` when we drop framer-motion v3 support\n\nvar MotionSvg = \"custom\" in motion ? motion.custom(chakra.svg) : motion(chakra.svg);\n\nvar CheckIcon = function CheckIcon(props) {\n  return /*#__PURE__*/React.createElement(MotionSvg, _extends({\n    width: \"1.2em\",\n    viewBox: \"0 0 12 10\",\n    variants: {\n      unchecked: {\n        opacity: 0,\n        strokeDashoffset: 16\n      },\n      checked: {\n        opacity: 1,\n        strokeDashoffset: 0,\n        transition: {\n          duration: 0.2\n        }\n      }\n    },\n    style: {\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16\n    }\n  }, props), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"1.5 6 4.5 9 10.5 1\"\n  }));\n};\n\nvar IndeterminateIcon = function IndeterminateIcon(props) {\n  return /*#__PURE__*/React.createElement(MotionSvg, _extends({\n    width: \"1.2em\",\n    viewBox: \"0 0 24 24\",\n    variants: {\n      unchecked: {\n        scaleX: 0.65,\n        opacity: 0\n      },\n      checked: {\n        scaleX: 1,\n        opacity: 1,\n        transition: {\n          scaleX: {\n            duration: 0\n          },\n          opacity: {\n            duration: 0.02\n          }\n        }\n      }\n    },\n    style: {\n      stroke: \"currentColor\",\n      strokeWidth: 4\n    }\n  }, props), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"21\",\n    x2: \"3\",\n    y1: \"12\",\n    y2: \"12\"\n  }));\n};\n\nvar CheckboxTransition = function CheckboxTransition(_ref) {\n  var open = _ref.open,\n      children = _ref.children;\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    initial: false\n  }, open && /*#__PURE__*/React.createElement(motion.div, {\n    variants: {\n      unchecked: {\n        scale: 0.5\n      },\n      checked: {\n        scale: 1\n      }\n    },\n    initial: \"unchecked\",\n    animate: \"checked\",\n    exit: \"unchecked\",\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    }\n  }, children));\n};\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n *\n * @todo allow users pass their own icon svgs\n */\n\n\nexport var CheckboxIcon = function CheckboxIcon(props) {\n  var isIndeterminate = props.isIndeterminate,\n      isChecked = props.isChecked,\n      rest = _objectWithoutPropertiesLoose(props, [\"isIndeterminate\", \"isChecked\"]);\n\n  var IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon;\n  return /*#__PURE__*/React.createElement(CheckboxTransition, {\n    open: isChecked || isIndeterminate\n  }, /*#__PURE__*/React.createElement(IconEl, rest));\n};","map":{"version":3,"mappings":"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","names":["chakra","AnimatePresence","motion","React","MotionSvg","custom","svg","CheckIcon","props","width","viewBox","variants","unchecked","opacity","strokeDashoffset","checked","transition","duration","style","fill","strokeWidth","stroke","strokeDasharray","points","IndeterminateIcon","scaleX","x1","x2","y1","y2","CheckboxTransition","open","children","initial","div","scale","animate","exit","display","alignItems","justifyContent","height","CheckboxIcon","isIndeterminate","isChecked","rest","IconEl"],"sources":["../../src/checkbox-icon.tsx"],"sourcesContent":["import { chakra, PropsOf } from \"@chakra-ui/system\"\nimport { AnimatePresence, CustomDomComponent, motion } from \"framer-motion\"\nimport * as React from \"react\"\n\n// @future: only call `motion(chakra.svg)` when we drop framer-motion v3 support\nconst MotionSvg: CustomDomComponent<PropsOf<typeof chakra.svg>> =\n  \"custom\" in motion\n    ? (motion as any).custom(chakra.svg)\n    : (motion as any)(chakra.svg)\n\nconst CheckIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 12 10\"\n    variants={{\n      unchecked: {\n        opacity: 0,\n        strokeDashoffset: 16,\n      },\n      checked: {\n        opacity: 1,\n        strokeDashoffset: 0,\n        transition: { duration: 0.2 },\n      },\n    }}\n    style={{\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16,\n    }}\n    {...props}\n  >\n    <polyline points=\"1.5 6 4.5 9 10.5 1\" />\n  </MotionSvg>\n)\n\nconst IndeterminateIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 24 24\"\n    variants={{\n      unchecked: {\n        scaleX: 0.65,\n        opacity: 0,\n      },\n      checked: {\n        scaleX: 1,\n        opacity: 1,\n        transition: {\n          scaleX: { duration: 0 },\n          opacity: { duration: 0.02 },\n        },\n      },\n    }}\n    style={{ stroke: \"currentColor\", strokeWidth: 4 }}\n    {...props}\n  >\n    <line x1=\"21\" x2=\"3\" y1=\"12\" y2=\"12\" />\n  </MotionSvg>\n)\n\nconst CheckboxTransition = ({ open, children }: any) => (\n  <AnimatePresence initial={false}>\n    {open && (\n      <motion.div\n        variants={{\n          unchecked: { scale: 0.5 },\n          checked: { scale: 1 },\n        }}\n        initial=\"unchecked\"\n        animate=\"checked\"\n        exit=\"unchecked\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100%\",\n        }}\n      >\n        {children}\n      </motion.div>\n    )}\n  </AnimatePresence>\n)\n\nexport interface CheckboxIconProps extends PropsOf<typeof MotionSvg> {\n  isIndeterminate?: boolean\n  isChecked?: boolean\n}\n\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n *\n * @todo allow users pass their own icon svgs\n */\nexport const CheckboxIcon: React.FC<CheckboxIconProps> = (props) => {\n  const { isIndeterminate, isChecked, ...rest } = props\n  const IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon\n  return (\n    <CheckboxTransition open={isChecked || isIndeterminate}>\n      <IconEl {...rest} />\n    </CheckboxTransition>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}