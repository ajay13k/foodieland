{"ast":null,"code":"import _defineProperty from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useButtonGroup } from \"./button-group\";\nexport var Button = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _styles$_focus;\n\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _extends({}, group, props));\n\n  var _omitThemingProps = omitThemingProps(props),\n      _omitThemingProps$isD = _omitThemingProps.isDisabled,\n      isDisabled = _omitThemingProps$isD === void 0 ? group == null ? void 0 : group.isDisabled : _omitThemingProps$isD,\n      isLoading = _omitThemingProps.isLoading,\n      isActive = _omitThemingProps.isActive,\n      isFullWidth = _omitThemingProps.isFullWidth,\n      children = _omitThemingProps.children,\n      leftIcon = _omitThemingProps.leftIcon,\n      rightIcon = _omitThemingProps.rightIcon,\n      loadingText = _omitThemingProps.loadingText,\n      _omitThemingProps$ico = _omitThemingProps.iconSpacing,\n      iconSpacing = _omitThemingProps$ico === void 0 ? \"0.5rem\" : _omitThemingProps$ico,\n      type = _omitThemingProps.type,\n      spinner = _omitThemingProps.spinner,\n      _omitThemingProps$spi = _omitThemingProps.spinnerPlacement,\n      spinnerPlacement = _omitThemingProps$spi === void 0 ? \"start\" : _omitThemingProps$spi,\n      className = _omitThemingProps.className,\n      as = _omitThemingProps.as,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"spinnerPlacement\", \"className\", \"as\"]);\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n\n\n  var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles[\"_focus\"]) != null ? _styles$_focus : {}, {\n    zIndex: 1\n  });\n\n  var buttonStyles = _extends({\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\"\n  }, styles, !!group && {\n    _focus: _focus\n  });\n\n  var _React$useState = React.useState(!as),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isButton = _React$useState2[0],\n      setIsButton = _React$useState2[1];\n\n  var refCallback = React.useCallback(function (node) {\n    if (!node) return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  var defaultType = isButton ? \"button\" : undefined;\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    disabled: isDisabled || isLoading,\n    ref: mergeRefs(ref, refCallback),\n    as: as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), leftIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), isLoading && spinnerPlacement === \"start\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    label: loadingText,\n    placement: \"start\"\n  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {\n    opacity: 0\n  }, children) : children, isLoading && spinnerPlacement === \"end\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    label: loadingText,\n    placement: \"end\"\n  }, spinner), rightIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n});\n\nif (__DEV__) {\n  Button.displayName = \"Button\";\n}\n\nvar ButtonIcon = function ButtonIcon(props) {\n  var children = props.children,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var _children = /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n\n  var _className = cx(\"chakra-button__icon\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    display: \"inline-flex\",\n    alignSelf: \"center\",\n    flexShrink: 0\n  }, rest, {\n    className: _className\n  }), _children);\n};\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\";\n}\n\nvar ButtonSpinner = function ButtonSpinner(props) {\n  var _extends2;\n\n  var label = props.label,\n      placement = props.placement,\n      _props$children = props.children,\n      children = _props$children === void 0 ? /*#__PURE__*/React.createElement(Spinner, {\n    color: \"currentColor\",\n    width: \"1em\",\n    height: \"1em\"\n  }) : _props$children,\n      className = props.className,\n      __css = props.__css,\n      rest = _objectWithoutPropertiesLoose(props, [\"label\", \"placement\", \"spacing\", \"children\", \"className\", \"__css\"]);\n\n  var _className = cx(\"chakra-button__spinner\", className);\n\n  var marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n\n  var spinnerStyles = _extends((_extends2 = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\"\n  }, _defineProperty(_extends2, marginProp, label ? \"0.5rem\" : 0), _defineProperty(_extends2, \"fontSize\", \"1em\"), _defineProperty(_extends2, \"lineHeight\", \"normal\"), _extends2), __css);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest, {\n    __css: spinnerStyles\n  }), children);\n};\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\";\n}","map":{"version":3,"mappings":"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","names":["mergeRefs","Spinner","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","mergeWith","__DEV__","React","useButtonGroup","Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","_focus","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","useState","isButton","setIsButton","refCallback","useCallback","node","tagName","defaultType","undefined","button","disabled","__css","ButtonIcon","marginEnd","ButtonSpinner","label","placement","span","opacity","marginStart","displayName","_children","isValidElement","cloneElement","focusable","_className","alignSelf","flexShrink","color","height","marginProp","spinnerStyles","div"],"sources":["../../src/button.tsx"],"sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-utils\"\nimport { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  const [isButton, setIsButton] = React.useState(!as)\n  const refCallback = React.useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const defaultType = isButton ? \"button\" : undefined\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={mergeRefs(ref, refCallback)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner label={loadingText} placement=\"start\">\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner label={loadingText} placement=\"end\">\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  placement?: \"start\" | \"end\"\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    placement,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? \"0.5rem\" : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\",\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"]},"metadata":{},"sourceType":"module"}