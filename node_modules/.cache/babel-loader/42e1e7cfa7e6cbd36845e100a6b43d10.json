{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useControllableProp } from \"./use-controllable\";\nimport { useId } from \"./use-id\";\nexport function useDisclosure(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      onCloseProp = _props.onClose,\n      onOpenProp = _props.onOpen,\n      isOpenProp = _props.isOpen,\n      idProp = _props.id;\n\n  var _React$useState = React.useState(props.defaultIsOpen || false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isOpenState = _React$useState2[0],\n      setIsOpen = _React$useState2[1];\n\n  var _useControllableProp = useControllableProp(isOpenProp, isOpenState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      isOpen = _useControllableProp2[1];\n\n  var id = useId(idProp, \"disclosure\");\n  var onClose = React.useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    onCloseProp == null ? void 0 : onCloseProp();\n  }, [isControlled, onCloseProp]);\n  var onOpen = React.useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    onOpenProp == null ? void 0 : onOpenProp();\n  }, [isControlled, onOpenProp]);\n  var onToggle = React.useCallback(function () {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled,\n    getButtonProps: function getButtonProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return _extends({}, props, {\n        \"aria-expanded\": \"true\",\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props.onClick, onToggle)\n      });\n    },\n    getDisclosureProps: function getDisclosureProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return _extends({}, props, {\n        hidden: !isOpen,\n        id: id\n      });\n    }\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,KAAT,QAAsB,UAAtB;AAUA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAuD;EAAA,IAAhCA,KAAgC;IAAhCA,KAAgC,GAAJ,EAA5BA;EAAgC;;EAC5D,aAKIA,KALJ;EAAA,IACWC,WADX,UACEC,OADF;EAAA,IAEUC,UAFV,UAEEC,MAFF;EAAA,IAGUC,UAHV,UAGEC,MAHF;EAAA,IAIMC,MAJN,UAIEC,EAJF;;EAOA,sBAAiCZ,KAAK,CAACa,QAANb,CAAeI,KAAK,CAACU,aAANV,IAAuB,KAAtCJ,CAAjC;EAAA;EAAA,IAAOe,WAAP;EAAA,IAAoBC,SAApB;;EACA,2BAA+Bf,mBAAmB,CAACQ,UAAD,EAAaM,WAAb,CAAlD;EAAA;EAAA,IAAOE,YAAP;EAAA,IAAqBP,MAArB;;EAEA,IAAME,EAAE,GAAGV,KAAK,CAACS,MAAD,EAAS,YAAT,CAAhB;EAEA,IAAML,OAAO,GAAGN,KAAK,CAACkB,WAANlB,CAAkB,YAAM;IACtC,IAAI,CAACiB,YAAL,EAAmB;MACjBD,SAAS,CAAC,KAAD,CAATA;IACD;;IACDX,WAAW,QAAXA,uBAAW,EAAXA;EAJc,GAKb,CAACY,YAAD,EAAeZ,WAAf,CALaL,CAAhB;EAOA,IAAMQ,MAAM,GAAGR,KAAK,CAACkB,WAANlB,CAAkB,YAAM;IACrC,IAAI,CAACiB,YAAL,EAAmB;MACjBD,SAAS,CAAC,IAAD,CAATA;IACD;;IACDT,UAAU,QAAVA,sBAAU,EAAVA;EAJa,GAKZ,CAACU,YAAD,EAAeV,UAAf,CALYP,CAAf;EAOA,IAAMmB,QAAQ,GAAGnB,KAAK,CAACkB,WAANlB,CAAkB,YAAM;IACvC,IAAMoB,MAAM,GAAGV,MAAM,GAAGJ,OAAH,GAAaE,MAAlC;IACAY,MAAM;EAFS,GAGd,CAACV,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CAHcN,CAAjB;EAKA,OAAO;IACLU,MAAM,EAAE,CAAC,CAACA,MADL;IAELF,MAFK,EAELA,MAFK;IAGLF,OAHK,EAGLA,OAHK;IAILa,QAJK,EAILA,QAJK;IAKLF,YALK,EAKLA,YALK;IAMLI,cAAc,EAAE,wBAACjB,KAAD;MAAA,IAACA,KAAD;QAACA,KAAD,GAAc,EAAbA;MAAD;;MAAA,oBACXA,KADW;QAEd,iBAAiB,MAFH;QAGd,iBAAiBQ,EAHH;QAIdU,OAAO,EAAEvB,eAAe,CAACK,KAAK,CAACkB,OAAP,EAAgBH,QAAhB;MAJV;IANX;IAYLI,kBAAkB,EAAE,4BAACnB,KAAD;MAAA,IAACA,KAAD;QAACA,KAAD,GAAc,EAAbA;MAAD;;MAAA,oBACfA,KADe;QAElBoB,MAAM,EAAE,CAACd,MAFS;QAGlBE;MAHkB;IAAA;EAZf,CAAP;AAkBD","names":["callAllHandlers","React","useControllableProp","useId","useDisclosure","props","onCloseProp","onClose","onOpenProp","onOpen","isOpenProp","isOpen","idProp","id","useState","defaultIsOpen","isOpenState","setIsOpen","isControlled","useCallback","onToggle","action","getButtonProps","onClick","getDisclosureProps","hidden"],"sources":["../../src/use-disclosure.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onCloseProp?.()\n  }, [isControlled, onCloseProp])\n\n  const onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenProp?.()\n  }, [isControlled, onOpenProp])\n\n  const onToggle = React.useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": \"true\",\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}