{"ast":null,"code":"import { memoizedGet as get } from \"@chakra-ui/utils\";\nvar srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\nvar srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\"\n};\n\nvar getWithPriority = function getWithPriority(theme, key, styles) {\n  var result = {};\n  var obj = get(theme, key, {});\n\n  for (var prop in obj) {\n    var isInStyles = prop in styles && styles[prop] != null;\n    if (!isInStyles) result[prop] = obj[prop];\n  }\n\n  return result;\n};\n\nexport var others = {\n  srOnly: {\n    transform: function transform(value) {\n      if (value === true) return srOnly;\n      if (value === \"focusable\") return srFocusable;\n      return {};\n    }\n  },\n  layerStyle: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, \"layerStyles.\" + value, styles);\n    }\n  },\n  textStyle: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, \"textStyles.\" + value, styles);\n    }\n  },\n  apply: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, value, styles);\n    }\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,IAAIC,GAAxB,QAAmC,kBAAnC;AAIA,IAAMC,MAAM,GAAG;EACbC,MAAM,EAAE,KADK;EAEbC,IAAI,EAAE,kBAFO;EAGbC,KAAK,EAAE,KAHM;EAIbC,MAAM,EAAE,KAJK;EAKbC,MAAM,EAAE,MALK;EAMbC,OAAO,EAAE,KANI;EAObC,QAAQ,EAAE,QAPG;EAQbC,UAAU,EAAE,QARC;EASbC,QAAQ,EAAE;AATG,CAAf;AAYA,IAAMC,WAAW,GAAG;EAClBD,QAAQ,EAAE,QADQ;EAElBN,KAAK,EAAE,MAFW;EAGlBC,MAAM,EAAE,MAHU;EAIlBF,IAAI,EAAE,MAJY;EAKlBI,OAAO,EAAE,GALS;EAMlBD,MAAM,EAAE,GANU;EAOlBE,QAAQ,EAAE,SAPQ;EAQlBC,UAAU,EAAE;AARM,CAApB;;AAWA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAaC,GAAb,EAAuBC,MAAvB,EAAuC;EAC7D,IAAMC,MAAM,GAAG,EAAf;EACA,IAAMC,GAAG,GAAGjB,GAAG,CAACa,KAAD,EAAQC,GAAR,EAAa,EAAb,CAAf;;EACA,KAAK,IAAMI,IAAX,IAAmBD,GAAnB,EAAwB;IACtB,IAAME,UAAU,GAAGD,IAAI,IAAIH,MAARG,IAAkBH,MAAM,CAACG,IAAD,CAANH,IAAgB,IAArD;IACA,IAAI,CAACI,UAAL,EAAiBH,MAAM,CAACE,IAAD,CAANF,GAAeC,GAAG,CAACC,IAAD,CAAlBF;EAClB;;EACD,OAAOA,MAAP;AAPF;;AAUA,OAAO,IAAMI,MAAc,GAAG;EAC5BnB,MAAM,EAAE;IACNoB,SADM,qBACIC,KADJ,EACW;MACf,IAAIA,KAAK,KAAK,IAAd,EAAoB,OAAOrB,MAAP;MACpB,IAAIqB,KAAK,KAAK,WAAd,EAA2B,OAAOX,WAAP;MAC3B,OAAO,EAAP;IACD;EALK,CADoB;EAQ5BY,UAAU,EAAE;IACVC,aAAa,EAAE,IADL;IAEVH,SAAS,EAAE,mBAACC,KAAD,EAAQT,KAAR,EAAeE,MAAf;MAAA,OACTH,eAAe,CAACC,KAAD,mBAAuBS,KAAvB,EAAgCP,MAAhC,CADN;IAAA;EAFD,CARgB;EAa5BU,SAAS,EAAE;IACTD,aAAa,EAAE,IADN;IAETH,SAAS,EAAE,mBAACC,KAAD,EAAQT,KAAR,EAAeE,MAAf;MAAA,OACTH,eAAe,CAACC,KAAD,kBAAsBS,KAAtB,EAA+BP,MAA/B,CADN;IAAA;EAFF,CAbiB;EAkB5BW,KAAK,EAAE;IACLF,aAAa,EAAE,IADV;IAELH,SAAS,EAAE,mBAACC,KAAD,EAAQT,KAAR,EAAeE,MAAf;MAAA,OAA0BH,eAAe,CAACC,KAAD,EAAQS,KAAR,EAAeP,MAAf,CAAzC;IAAA;EAFN;AAlBqB,CAAvB","names":["memoizedGet","get","srOnly","border","clip","width","height","margin","padding","overflow","whiteSpace","position","srFocusable","getWithPriority","theme","key","styles","result","obj","prop","isInStyles","others","transform","value","layerStyle","processResult","textStyle","apply"],"sources":["../../../src/config/others.ts"],"sourcesContent":["import { memoizedGet as get } from \"@chakra-ui/utils\"\nimport { Config } from \"../utils/prop-config\"\nimport { ResponsiveValue, Token } from \"../utils/types\"\n\nconst srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\nconst srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\",\n}\n\nconst getWithPriority = (theme: any, key: any, styles: any) => {\n  const result = {}\n  const obj = get(theme, key, {})\n  for (const prop in obj) {\n    const isInStyles = prop in styles && styles[prop] != null\n    if (!isInStyles) result[prop] = obj[prop]\n  }\n  return result\n}\n\nexport const others: Config = {\n  srOnly: {\n    transform(value) {\n      if (value === true) return srOnly\n      if (value === \"focusable\") return srFocusable\n      return {}\n    },\n  },\n  layerStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `layerStyles.${value}`, styles),\n  },\n  textStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `textStyles.${value}`, styles),\n  },\n  apply: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, value, styles),\n  },\n}\n\nexport interface OtherProps {\n  /**\n   * If `true`, hide an element visually without hiding it from screen readers.\n   *\n   * If `focusable`, the sr-only styles will be undone, making the element visible\n   * to sighted users as well as screen readers.\n   */\n  srOnly?: true | \"focusable\"\n  /**\n   * The layer style object to apply.\n   * Note: Styles must be located in `theme.layerStyles`\n   */\n  layerStyle?: Token<string & {}, \"layerStyles\">\n  /**\n   * The text style object to apply.\n   * Note: Styles must be located in `theme.textStyles`\n   */\n  textStyle?: Token<string & {}, \"textStyles\">\n  /**\n   * Apply theme-aware style objects in `theme`\n   */\n  apply?: ResponsiveValue<string>\n}\n"]},"metadata":{},"sourceType":"module"}