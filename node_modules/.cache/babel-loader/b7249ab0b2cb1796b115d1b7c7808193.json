{"ast":null,"code":"import _defineProperty from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useCallbackRef, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, minSafeInteger, normalizeEventKey, scheduleMicrotask } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n\nvar sanitize = function sanitize(value) {\n  return value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n};\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$focusInputOnCh = _props.focusInputOnChange,\n      focusInputOnChange = _props$focusInputOnCh === void 0 ? true : _props$focusInputOnCh,\n      _props$clampValueOnBl = _props.clampValueOnBlur,\n      clampValueOnBlur = _props$clampValueOnBl === void 0 ? true : _props$clampValueOnBl,\n      _props$keepWithinRang = _props.keepWithinRange,\n      keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang,\n      _props$min = _props.min,\n      min = _props$min === void 0 ? minSafeInteger : _props$min,\n      _props$max = _props.max,\n      max = _props$max === void 0 ? maxSafeInteger : _props$max,\n      _props$step = _props.step,\n      stepProp = _props$step === void 0 ? 1 : _props$step,\n      isReadOnly = _props.isReadOnly,\n      isDisabled = _props.isDisabled,\n      isRequired = _props.isRequired,\n      getAriaValueText = _props.getAriaValueText,\n      isInvalid = _props.isInvalid,\n      _props$pattern = _props.pattern,\n      pattern = _props$pattern === void 0 ? \"[0-9]*(.[0-9]+)?\" : _props$pattern,\n      _props$inputMode = _props.inputMode,\n      inputMode = _props$inputMode === void 0 ? \"decimal\" : _props$inputMode,\n      allowMouseWheel = _props.allowMouseWheel,\n      id = _props.id,\n      name = _props.name,\n      ariaDescBy = _props[\"aria-describedby\"],\n      ariaLabel = _props[\"aria-label\"],\n      ariaLabelledBy = _props[\"aria-labelledby\"],\n      onFocus = _props.onFocus,\n      onBlur = _props.onBlur,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\"]);\n\n  var onFocusProp = useCallbackRef(onFocus);\n  var onBlurProp = useCallbackRef(onBlur);\n  var getAriaValueTextProp = useCallbackRef(getAriaValueText);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n  var counter = useCounter(props);\n  var updateFn = counter.update,\n      incrementFn = counter.increment,\n      decrementFn = counter.decrement;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isFocused = _useBoolean2[0],\n      setFocused = _useBoolean2[1];\n\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(function (event) {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(function (event) {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: function ArrowUp() {\n        return increment(stepFactor);\n      },\n      ArrowDown: function ArrowDown() {\n        return decrement(stepFactor);\n      },\n      Home: function Home() {\n        return updateFn(min);\n      },\n      End: function End() {\n        return updateFn(max);\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = function getStepFactor(event) {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var ariaValueText = React.useMemo(function () {\n    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  }, [counter.value, getAriaValueTextProp]);\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n  var validateAndClamp = React.useCallback(function () {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onInputBlur = React.useCallback(function () {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(function () {\n    if (focusInputOnChange) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", function (event) {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current, {\n    passive: false\n  });\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    var _extends2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, (_extends2 = {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1\n    }, _defineProperty(_extends2, pointerDown, callAllHandlers(props[pointerDown], spinUp)), _defineProperty(_extends2, \"onMouseUp\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends2, \"onMouseLeave\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends2, \"onTouchEnd\", callAllHandlers(props.onTouchEnd, spinner.stop)), _defineProperty(_extends2, \"disabled\", disabled), _defineProperty(_extends2, \"aria-disabled\", ariaAttr(disabled)), _extends2));\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    var _extends3;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, (_extends3 = {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1\n    }, _defineProperty(_extends3, pointerDown, callAllHandlers(props[pointerDown], spinDown)), _defineProperty(_extends3, \"onMouseLeave\", callAllHandlers(props.onMouseLeave, spinner.stop)), _defineProperty(_extends3, \"onMouseUp\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends3, \"onTouchEnd\", callAllHandlers(props.onTouchEnd, spinner.stop)), _defineProperty(_extends3, \"disabled\", disabled), _defineProperty(_extends3, \"aria-disabled\", ariaAttr(disabled)), _extends3));\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      name: name,\n      inputMode: inputMode,\n      type: \"text\",\n      pattern: pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id: id,\n      disabled: isDisabled\n    }, props, {\n      readOnly: (_props$readOnly = props.readOnly) != null ? _props$readOnly : isReadOnly,\n      \"aria-readonly\": (_props$readOnly2 = props.readOnly) != null ? _props$readOnly2 : isReadOnly,\n      \"aria-required\": (_props$required = props.required) != null ? _props$required : isRequired,\n      required: (_props$required2 = props.required) != null ? _props$required2 : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, function () {\n        return scheduleMicrotask(setFocused.on);\n      }),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused: isFocused,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    getIncrementButtonProps: getIncrementButtonProps,\n    getDecrementButtonProps: getDecrementButtonProps,\n    getInputProps: getInputProps,\n    htmlProps: htmlProps\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA4C,oBAA5C;AACA,SACEC,UADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,mBAJF,QAKO,kBALP;AAMA,SACEC,QADF,EAEEC,eAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,MALF,EAMEC,cANF,EAOEC,cAPF,EASEC,iBATF,EAUEC,iBAVF,QAWO,kBAXP;AAYA,SAASC,SAAT,QAAmD,wBAAnD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SACEC,+BADF,EAEEC,2BAFF,QAGO,SAHP;;AA2EA,IAAMC,QAAQ,GAAIC,SAAZD,QAAYC,MAAD;EAAA,OACfA,KAAK,CAACC,KAAND,CAAY,EAAZA,EAAgBE,MAAhBF,CAAuBH,+BAAvBG,EAAwDG,IAAxDH,CAA6D,EAA7DA,CADe;AAAA,CAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASI,cAAT,CAAwBC,KAAxB,EAAyD;EAAA,IAAjCA,KAAiC;IAAjCA,KAAiC,GAAJ,EAA7BA;EAAiC;;EAC9D,aAyBIA,KAzBJ;EAAA,mCACEC,kBADF;EAAA,IACEA,kBADF,sCACuB,IADvB;EAAA,mCAEEC,gBAFF;EAAA,IAEEA,gBAFF,sCAEqB,IAFrB;EAAA,mCAGEC,eAHF;EAAA,IAGEA,eAHF,sCAGoB,IAHpB;EAAA,wBAIEC,GAJF;EAAA,IAIEA,GAJF,2BAIQlB,cAJR;EAAA,wBAKEmB,GALF;EAAA,IAKEA,GALF,2BAKQpB,cALR;EAAA,yBAMEqB,IANF;EAAA,IAMQC,QANR,4BAMmB,CANnB;EAAA,IAOEC,UAPF,UAOEA,UAPF;EAAA,IAQEC,UARF,UAQEA,UARF;EAAA,IASEC,UATF,UASEA,UATF;EAAA,IAUEC,gBAVF,UAUEA,gBAVF;EAAA,IAWEC,SAXF,UAWEA,SAXF;EAAA,4BAYEC,OAZF;EAAA,IAYEA,OAZF,+BAYY,kBAZZ;EAAA,8BAaEC,SAbF;EAAA,IAaEA,SAbF,iCAac,SAbd;EAAA,IAcEC,eAdF,UAcEA,eAdF;EAAA,IAeEC,EAfF,UAeEA,EAfF;EAAA,IAkBEC,IAlBF,UAkBEA,IAlBF;EAAA,IAmBsBC,UAnBtB,UAmBE,kBAnBF;EAAA,IAoBgBC,SApBhB,UAoBE,YApBF;EAAA,IAqBqBC,cArBrB,UAqBE,iBArBF;EAAA,IAsBEC,OAtBF,UAsBEA,OAtBF;EAAA,IAuBEC,MAvBF,UAuBEA,MAvBF;EAAA,IAwBKC,SAxBL,iCAyBIvB,KAzBJ;;EA2BA,IAAMwB,WAAW,GAAG/C,cAAc,CAAC4C,OAAD,CAAlC;EACA,IAAMI,UAAU,GAAGhD,cAAc,CAAC6C,MAAD,CAAjC;EACA,IAAMI,oBAAoB,GAAGjD,cAAc,CAACkC,gBAAD,CAA3C;EAEA;AACF;AACA;AACA;AACA;;EACE,IAAMgB,OAAO,GAAGpD,UAAU,CAACyB,KAAD,CAA1B;EAEA,IACU4B,QADV,GAIID,OAJJ,CACEE,MADF;EAAA,IAEaC,WAFb,GAIIH,OAJJ,CAEEI,SAFF;EAAA,IAGaC,WAHb,GAIIL,OAJJ,CAGEM,SAHF;EAMA;AACF;AACA;AACA;AACA;;EACE,kBAAgCzD,UAAU,EAA1C;EAAA;EAAA,IAAO0D,SAAP;EAAA,IAAkBC,UAAlB;;EAEA,IAAMC,QAAQ,GAAG9C,KAAK,CAAC+C,MAAN/C,CAA+B,IAA/BA,CAAjB;EAEA;AACF;AACA;;EACEX,mBAAmB,CAAC,YAAM;IACxB,IAAI,CAACyD,QAAQ,CAACE,OAAd,EAAuB;IACvB,IAAMC,SAAS,GAAGH,QAAQ,CAACE,OAATF,CAAiBzC,KAAjByC,IAA0BT,OAAO,CAAChC,KAApD;;IACA,IAAI4C,SAAJ,EAAe;MACbZ,OAAO,CAACa,QAARb,CAAiBjC,QAAQ,CAAC0C,QAAQ,CAACE,OAATF,CAAiBzC,KAAlB,CAAzBgC;IACD;EALgB,GAMhB,EANgB,CAAnBhD;EAQA,IAAM8D,aAAa,GAAG,EAAEjC,UAAU,IAAIC,UAAhB,CAAtB;EAEA,IAAMsB,SAAS,GAAGzC,KAAK,CAACoD,WAANpD,CAChB,UAACgB,IAAD,EAAqB;IAAA,IAApBA,IAAoB;MAApBA,IAAoB,GAAbC,QAAPD;IAAoB;;IACnB,IAAImC,aAAJ,EAAmB;MACjBX,WAAW,CAACxB,IAAD,CAAXwB;IACD;EAJa,GAMhB,CAACA,WAAD,EAAcW,aAAd,EAA6BlC,QAA7B,CANgBjB,CAAlB;EASA,IAAM2C,SAAS,GAAG3C,KAAK,CAACoD,WAANpD,CAChB,UAACgB,IAAD,EAAqB;IAAA,IAApBA,IAAoB;MAApBA,IAAoB,GAAbC,QAAPD;IAAoB;;IACnB,IAAImC,aAAJ,EAAmB;MACjBT,WAAW,CAAC1B,IAAD,CAAX0B;IACD;EAJa,GAMhB,CAACA,WAAD,EAAcS,aAAd,EAA6BlC,QAA7B,CANgBjB,CAAlB;EASA;AACF;AACA;AACA;AACA;AACA;;EACE,IAAMqD,OAAO,GAAGpD,UAAU,CAACwC,SAAD,EAAYE,SAAZ,CAA1B;EAEA;AACF;AACA;AACA;;EACE,IAAMW,QAAQ,GAAGtD,KAAK,CAACoD,WAANpD,CACduD,eAAD,EAAgD;IAC9CjB,QAAQ,CAAClC,QAAQ,CAACmD,KAAK,CAACC,MAAND,CAAalD,KAAd,CAAT,CAARiC;EAFa,GAIf,CAACA,QAAD,CAJetC,CAAjB;EAOA,IAAMyD,SAAS,GAAGzD,KAAK,CAACoD,WAANpD,CACfuD,eAAD,EAAgC;IAC9B;AACN;AACA;IACM,IAAI,CAACpD,2BAA2B,CAACoD,KAAD,CAAhC,EAAyC;MACvCA,KAAK,CAACG,cAANH;IACD;IAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM,IAAMI,UAAU,GAAGC,aAAa,CAACL,KAAD,CAAbK,GAAuB3C,QAA1C;IAEA,IAAM4C,QAAQ,GAAGhE,iBAAiB,CAAC0D,KAAD,CAAlC;IAEA,IAAMO,MAAmB,GAAG;MAC1BC,OAAO,EAAE;QAAA,OAAMtB,SAAS,CAACkB,UAAD,CAAf;MAAA,CADiB;MAE1BK,SAAS,EAAE;QAAA,OAAMrB,SAAS,CAACgB,UAAD,CAAf;MAAA,CAFe;MAG1BM,IAAI,EAAE;QAAA,OAAM3B,QAAQ,CAACxB,GAAD,CAAd;MAAA,CAHoB;MAI1BoD,GAAG,EAAE;QAAA,OAAM5B,QAAQ,CAACvB,GAAD,CAAd;MAAA;IAJqB,CAA5B;IAOA,IAAMoD,MAAM,GAAGL,MAAM,CAACD,QAAD,CAArB;;IAEA,IAAIM,MAAJ,EAAY;MACVZ,KAAK,CAACG,cAANH;MACAY,MAAM,CAACZ,KAAD,CAANY;IACD;EAjCa,GAmChB,CAAC7B,QAAD,EAAWK,SAAX,EAAsBF,SAAtB,EAAiC1B,GAAjC,EAAsCD,GAAtC,EAA2CG,QAA3C,CAnCgBjB,CAAlB;;EAsCA,IAAM4D,aAAa,GACjBL,SADIK,aACJL,MADoB,EAEjB;IACH,IAAIa,KAAK,GAAG,CAAZ;;IACA,IAAIb,KAAK,CAACc,OAANd,IAAiBA,KAAK,CAACe,OAA3B,EAAoC;MAClCF,KAAK,GAAG,GAARA;IACD;;IACD,IAAIb,KAAK,CAACgB,QAAV,EAAoB;MAClBH,KAAK,GAAG,EAARA;IACD;;IACD,OAAOA,KAAP;EAVF;EAaA;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE,IAAMI,aAAa,GAAGxE,KAAK,CAACyE,OAANzE,CAAc,YAAM;IACxC,IAAM0E,IAAI,GAAGtC,oBAAH,QAAGA,GAAH,MAAGA,uBAAoB,CAAGC,OAAO,CAAChC,KAAX,CAAjC;;IACA,IAAI,CAACX,MAAM,CAACgF,IAAD,CAAX,EAAmB;MACjB,OAAOA,IAAP;IACD;;IAED,IAAMC,WAAW,GAAGtC,OAAO,CAAChC,KAARgC,CAAcuC,QAAdvC,EAApB,CANwC,CAOxC;;IACA,OAAO,CAACsC,WAAD,GAAeE,SAAf,GAA2BF,WAAlC;EARoB,GASnB,CAACtC,OAAO,CAAChC,KAAT,EAAgB+B,oBAAhB,CATmBpC,CAAtB;EAWA;AACF;AACA;;EACE,IAAM8E,gBAAgB,GAAG9E,KAAK,CAACoD,WAANpD,CAAkB,YAAM;IAC/C,IAAI+E,IAAI,GAAG1C,OAAO,CAAChC,KAAnB;IAEA,IAAI0E,IAAI,KAAK,EAAb,EAAiB;;IAEjB,IAAI1C,OAAO,CAAC2C,aAAR3C,GAAwBvB,GAA5B,EAAiC;MAC/BiE,IAAI,GAAGjE,GAAPiE;IACD;;IAED,IAAI1C,OAAO,CAAC2C,aAAR3C,GAAwBtB,GAA5B,EAAiC;MAC/BgE,IAAI,GAAGhE,GAAPgE;IACD;IAED;AACJ;AACA;AACA;AACA;AACA;;;IACI1C,OAAO,CAAC4C,IAAR5C,CAAa0C,IAAb1C;EAnBuB,GAoBtB,CAACA,OAAD,EAAUtB,GAAV,EAAeD,GAAf,CApBsBd,CAAzB;EAsBA,IAAMkF,WAAW,GAAGlF,KAAK,CAACoD,WAANpD,CAAkB,YAAM;IAC1C6C,UAAU,CAACsC,GAAXtC;;IAEA,IAAIjC,gBAAJ,EAAsB;MACpBkE,gBAAgB;IACjB;EALiB,GAMjB,CAAClE,gBAAD,EAAmBiC,UAAnB,EAA+BiC,gBAA/B,CANiB9E,CAApB;EAQA,IAAMoF,UAAU,GAAGpF,KAAK,CAACoD,WAANpD,CAAkB,YAAM;IACzC,IAAIW,kBAAJ,EAAwB;MACtBnB,KAAK,CAACsD,QAAQ,CAACE,OAAV,EAAmB;QAAEqC,QAAQ,EAAE;MAAZ,CAAnB,CAAL7F;IACD;EAHgB,GAIhB,CAACmB,kBAAD,CAJgBX,CAAnB;EAMA,IAAMsF,MAAM,GAAGtF,KAAK,CAACoD,WAANpD,CACZuD,eAAD,EAAgB;IACdA,KAAK,CAACG,cAANH;IACAF,OAAO,CAACkC,EAARlC;IACA+B,UAAU;EAJC,GAMb,CAACA,UAAD,EAAa/B,OAAb,CANarD,CAAf;EASA,IAAMwF,QAAQ,GAAGxF,KAAK,CAACoD,WAANpD,CACduD,eAAD,EAAgB;IACdA,KAAK,CAACG,cAANH;IACAF,OAAO,CAACoC,IAARpC;IACA+B,UAAU;EAJG,GAMf,CAACA,UAAD,EAAa/B,OAAb,CANerD,CAAjB;EASA,IAAM0F,WAAW,GACfjG,SAAS,IAAI,CAAC,CAACkG,QAAQ,CAACC,eAATD,CAAyBE,YAAxCpG,GACI,cADJA,GAEI,aAHN;EAKAL,gBAAgB,CACd,OADc,EAEbmE,eAAD,EAAW;IACT,IAAMuC,cAAc,GAAGH,QAAQ,CAACI,aAATJ,KAA2B7C,QAAQ,CAACE,OAA3D;IACA,IAAI,CAACvB,eAAD,IAAoB,CAACqE,cAAzB,EAAyC;IAEzCvC,KAAK,CAACG,cAANH;IAEA,IAAMI,UAAU,GAAGC,aAAa,CAACL,KAAD,CAAbK,GAA8B3C,QAAjD;IACA,IAAM+E,SAAS,GAAGC,IAAI,CAACC,IAALD,CAAU1C,KAAK,CAAC4C,MAAhBF,CAAlB;;IAEA,IAAID,SAAS,KAAK,CAAC,CAAnB,EAAsB;MACpBvD,SAAS,CAACkB,UAAD,CAATlB;IADF,OAEO,IAAIuD,SAAS,KAAK,CAAlB,EAAqB;MAC1BrD,SAAS,CAACgB,UAAD,CAAThB;IACD;EAfW,GAiBdG,QAAQ,CAACE,OAjBK,EAkBd;IAAEoD,OAAO,EAAE;EAAX,CAlBc,CAAhBhH;EAqBA,IAAMiH,uBAAmC,GAAGrG,KAAK,CAACoD,WAANpD,CAC1C,UAACU,KAAD,EAAa4F,GAAb,EAA4B;IAAA;;IAAA,IAA3B5F,KAA2B;MAA3BA,KAA2B,GAAnB,EAARA;IAA2B;;IAAA,IAAf4F,GAAe;MAAfA,GAAe,GAAT,IAANA;IAAe;;IAC1B,IAAMC,QAAQ,GAAGpF,UAAU,IAAKN,eAAe,IAAIwB,OAAO,CAACmE,OAA3D;IACA,oBACK9F,KADL;MAEE4F,GAFF,EAEEA,GAFF;MAGEG,IAAI,EAAE,QAHR;MAIEC,QAAQ,EAAE,CAAC;IAJb,8BAKGhB,WALH,EAKiBnG,eAAe,CAACmB,KAAK,CAACgF,WAAD,CAAN,EAAqBJ,MAArB,CALhC,2CAMa/F,eAAe,CAACmB,KAAK,CAACiG,SAAP,EAAkBtD,OAAO,CAACuD,IAA1B,CAN5B,8CAOgBrH,eAAe,CAACmB,KAAK,CAACiG,SAAP,EAAkBtD,OAAO,CAACuD,IAA1B,CAP/B,4CAQcrH,eAAe,CAACmB,KAAK,CAACmG,UAAP,EAAmBxD,OAAO,CAACuD,IAA3B,CAR7B,0CASEL,QATF,8BAUE,eAVF,EAUmBjH,QAAQ,CAACiH,QAAD,CAV3B;EAHwC,GAgB1C,CACEb,WADF,EAEErD,OAAO,CAACmE,OAFV,EAGE3F,eAHF,EAIEyE,MAJF,EAKEjC,OAAO,CAACuD,IALV,EAMEzF,UANF,CAhB0CnB,CAA5C;EA0BA,IAAM8G,uBAAmC,GAAG9G,KAAK,CAACoD,WAANpD,CAC1C,UAACU,KAAD,EAAa4F,GAAb,EAA4B;IAAA;;IAAA,IAA3B5F,KAA2B;MAA3BA,KAA2B,GAAnB,EAARA;IAA2B;;IAAA,IAAf4F,GAAe;MAAfA,GAAe,GAAT,IAANA;IAAe;;IAC1B,IAAMC,QAAQ,GAAGpF,UAAU,IAAKN,eAAe,IAAIwB,OAAO,CAAC0E,OAA3D;IACA,oBACKrG,KADL;MAEE4F,GAFF,EAEEA,GAFF;MAGEG,IAAI,EAAE,QAHR;MAIEC,QAAQ,EAAE,CAAC;IAJb,8BAKGhB,WALH,EAKiBnG,eAAe,CAACmB,KAAK,CAACgF,WAAD,CAAN,EAAqBF,QAArB,CALhC,8CAMgBjG,eAAe,CAACmB,KAAK,CAACsG,YAAP,EAAqB3D,OAAO,CAACuD,IAA7B,CAN/B,2CAOarH,eAAe,CAACmB,KAAK,CAACiG,SAAP,EAAkBtD,OAAO,CAACuD,IAA1B,CAP5B,4CAQcrH,eAAe,CAACmB,KAAK,CAACmG,UAAP,EAAmBxD,OAAO,CAACuD,IAA3B,CAR7B,0CASEL,QATF,8BAUE,eAVF,EAUmBjH,QAAQ,CAACiH,QAAD,CAV3B;EAHwC,GAgB1C,CACEb,WADF,EAEErD,OAAO,CAAC0E,OAFV,EAGElG,eAHF,EAIE2E,QAJF,EAKEnC,OAAO,CAACuD,IALV,EAMEzF,UANF,CAhB0CnB,CAA5C;EA0BA,IAAMiH,aAML,GAAGjH,KAAK,CAACoD,WAANpD,CACF,UAACU,KAAD,EAAa4F,GAAb;IAAA;;IAAA,IAAC5F,KAAD;MAACA,KAAD,GAAS,EAARA;IAAD;;IAAA,IAAa4F,GAAb;MAAaA,GAAb,GAAmB,IAANA;IAAb;;IAAA;MACE3E,IADF,EACEA,IADF;MAEEH,SAFF,EAEEA,SAFF;MAGE0F,IAAI,EAAE,MAHR;MAIE3F,OAJF,EAIEA,OAJF;MAKE,mBAAmBO,cALrB;MAME,cAAcD,SANhB;MAOE,oBAAoBD,UAPtB;MAQEF,EARF,EAQEA,EARF;MASE6E,QAAQ,EAAEpF;IATZ,GAUKT,KAVL;MAWEyG,QAAQ,qBAAEzG,KAAK,CAACyG,QAAR,8BAAoBjG,UAX9B;MAYE,qCAAiBR,KAAK,CAACyG,QAAvB,+BAAmCjG,UAZrC;MAaE,oCAAiBR,KAAK,CAAC0G,QAAvB,8BAAmChG,UAbrC;MAcEgG,QAAQ,sBAAE1G,KAAK,CAAC0G,QAAR,+BAAoBhG,UAd9B;MAeEkF,GAAG,EAAEvG,SAAS,CAAC+C,QAAD,EAAWwD,GAAX,CAfhB;MAgBEjG,KAAK,EAAEgC,OAAO,CAAChC,KAhBjB;MAiBEoG,IAAI,EAAE,YAjBR;MAkBE,iBAAiB3F,GAlBnB;MAmBE,iBAAiBC,GAnBnB;MAoBE,iBAAiBsG,MAAM,CAACC,KAAPD,CAAahF,OAAO,CAAC2C,aAArBqC,IACbxC,SADawC,GAEbhF,OAAO,CAAC2C,aAtBd;MAuBE,gBAAgB1F,QAAQ,CAACgC,SAAD,QAACA,eAAae,OAAO,CAACkF,YAAtB,CAvB1B;MAwBE,kBAAkB/C,aAxBpB;MAyBEgD,YAAY,EAAE,KAzBhB;MA0BEC,WAAW,EAAE,KA1Bf;MA2BEnE,QAAQ,EAAE/D,eAAe,CAACmB,KAAK,CAAC4C,QAAP,EAAiBA,QAAjB,CA3B3B;MA4BEG,SAAS,EAAElE,eAAe,CAACmB,KAAK,CAAC+C,SAAP,EAAkBA,SAAlB,CA5B5B;MA6BE1B,OAAO,EAAExC,eAAe,CAACmB,KAAK,CAACqB,OAAP,EAAgBG,WAAhB,EAA6B;QAAA,OACnDpC,iBAAiB,CAAC+C,UAAU,CAAC6E,EAAZ,CADkC;MAAA,CAA7B,CA7B1B;MAgCE1F,MAAM,EAAEzC,eAAe,CAACmB,KAAK,CAACsB,MAAP,EAAeG,UAAf,EAA2B+C,WAA3B;IAhCzB;EADE,GAmCF,CACEvD,IADF,EAEEH,SAFF,EAGED,OAHF,EAIEO,cAJF,EAKED,SALF,EAMED,UANF,EAOEF,EAPF,EAQEP,UARF,EASEC,UATF,EAUEF,UAVF,EAWEI,SAXF,EAYEe,OAAO,CAAChC,KAZV,EAaEgC,OAAO,CAAC2C,aAbV,EAcE3C,OAAO,CAACkF,YAdV,EAeEzG,GAfF,EAgBEC,GAhBF,EAiBEyD,aAjBF,EAkBElB,QAlBF,EAmBEG,SAnBF,EAoBEvB,WApBF,EAqBEW,UAAU,CAAC6E,EArBb,EAsBEvF,UAtBF,EAuBE+C,WAvBF,CAnCElF,CANJ;EAoEA,OAAO;IACLK,KAAK,EAAEgC,OAAO,CAAChC,KADV;IAEL2E,aAAa,EAAE3C,OAAO,CAAC2C,aAFlB;IAGLpC,SAHK,EAGLA,SAHK;IAILzB,UAJK,EAILA,UAJK;IAKLD,UALK,EAKLA,UALK;IAMLmF,uBANK,EAMLA,uBANK;IAOLS,uBAPK,EAOLA,uBAPK;IAQLG,aARK,EAQLA,aARK;IASLhF;EATK,CAAP;AAWD","names":["useCounter","useBoolean","useCallbackRef","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","minSafeInteger","normalizeEventKey","scheduleMicrotask","mergeRefs","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","isRequired","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onBlur","htmlProps","onFocusProp","onBlurProp","getAriaValueTextProp","counter","updateFn","update","incrementFn","increment","decrementFn","decrement","isFocused","setFocused","inputRef","useRef","current","notInSync","setValue","isInteractive","useCallback","spinner","onChange","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","useMemo","text","defaultText","toString","undefined","validateAndClamp","next","valueAsNumber","cast","onInputBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onTouchEnd","getDecrementButtonProps","isAtMin","onMouseLeave","getInputProps","type","readOnly","required","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","on"],"sources":["../../src/use-number-input.ts"],"sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport {\n  useBoolean,\n  useCallbackRef,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  normalizeEventKey,\n  scheduleMicrotask,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter, EventKeyMap } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur,\n    ...htmlProps\n  } = props\n\n  const onFocusProp = useCallbackRef(onFocus)\n  const onBlurProp = useCallbackRef(onBlur)\n  const getAriaValueTextProp = useCallbackRef(getAriaValueText)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = React.useMemo(() => {\n    const text = getAriaValueTextProp?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueTextProp])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onInputBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getInputProps: PropGetter<\n    HTMLInputElement,\n    Pick<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >\n  > = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props,\n      readOnly: props.readOnly ?? isReadOnly,\n      \"aria-readonly\": props.readOnly ?? isReadOnly,\n      \"aria-required\": props.required ?? isRequired,\n      required: props.required ?? isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, () =>\n        scheduleMicrotask(setFocused.on),\n      ),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur),\n    }),\n    [\n      name,\n      inputMode,\n      pattern,\n      ariaLabelledBy,\n      ariaLabel,\n      ariaDescBy,\n      id,\n      isDisabled,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      onFocusProp,\n      setFocused.on,\n      onBlurProp,\n      onInputBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}