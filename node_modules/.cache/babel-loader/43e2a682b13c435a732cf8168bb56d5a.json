{"ast":null,"code":"import _defineProperty from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, determineLazyBehavior, focus, isUndefined, normalizeEventKey } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nvar _createDescendantCont = createDescendantContext(),\n    _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n    TabsDescendantsProvider = _createDescendantCont2[0],\n    useTabsDescendantsContext = _createDescendantCont2[1],\n    useTabsDescendants = _createDescendantCont2[2],\n    useTabsDescendant = _createDescendantCont2[3];\n/* -------------------------------------------------------------------------------------------------\n * useTabs - The root react hook that manages all tab items\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\n\n\nexport { TabsDescendantsProvider, useTabsDescendantsContext, useTabsDescendants, useTabsDescendant };\nexport function useTabs(props) {\n  var defaultIndex = props.defaultIndex,\n      onChange = props.onChange,\n      index = props.index,\n      isManual = props.isManual,\n      isLazy = props.isLazy,\n      _props$lazyBehavior = props.lazyBehavior,\n      lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? \"horizontal\" : _props$orientation,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? \"ltr\" : _props$direction,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIndex\", \"onChange\", \"index\", \"isManual\", \"isLazy\", \"lazyBehavior\", \"orientation\", \"direction\"]);\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n\n\n  var _React$useState = React.useState(defaultIndex != null ? defaultIndex : 0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedIndex = _React$useState2[0],\n      setFocusedIndex = _React$useState2[1];\n\n  var _useControllableState = useControllableState({\n    defaultValue: defaultIndex != null ? defaultIndex : 0,\n    value: index,\n    onChange: onChange\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      selectedIndex = _useControllableState2[0],\n      setSelectedIndex = _useControllableState2[1];\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n\n\n  React.useEffect(function () {\n    if (index != null) {\n      setFocusedIndex(index);\n    }\n  }, [index]);\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   */\n\n  var descendants = useTabsDescendants();\n  /**\n   * Generate a unique id or use user-provided id for the tabs widget\n   */\n\n  var id = useId(props.id, \"tabs\");\n  return {\n    id: id,\n    selectedIndex: selectedIndex,\n    focusedIndex: focusedIndex,\n    setSelectedIndex: setSelectedIndex,\n    setFocusedIndex: setFocusedIndex,\n    isManual: isManual,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior,\n    orientation: orientation,\n    descendants: descendants,\n    direction: direction,\n    htmlProps: htmlProps\n  };\n}\n\nvar _createContext = createContext({\n  name: \"TabsContext\",\n  errorMessage: \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    TabsProvider = _createContext2[0],\n    useTabsContext = _createContext2[1];\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\n\n\nexport { TabsProvider, useTabsContext };\nexport function useTabList(props) {\n  var _useTabsContext = useTabsContext(),\n      focusedIndex = _useTabsContext.focusedIndex,\n      orientation = _useTabsContext.orientation,\n      direction = _useTabsContext.direction;\n\n  var descendants = useTabsDescendantsContext();\n  var onKeyDown = React.useCallback(function (event) {\n    var _keyMap;\n\n    var nextTab = function nextTab() {\n      var next = descendants.nextEnabled(focusedIndex);\n      if (next) focus(next.node);\n    };\n\n    var prevTab = function prevTab() {\n      var prev = descendants.prevEnabled(focusedIndex);\n      if (prev) focus(prev.node);\n    };\n\n    var firstTab = function firstTab() {\n      var first = descendants.firstEnabled();\n      if (first) focus(first.node);\n    };\n\n    var lastTab = function lastTab() {\n      var last = descendants.lastEnabled();\n      if (last) focus(last.node);\n    };\n\n    var isHorizontal = orientation === \"horizontal\";\n    var isVertical = orientation === \"vertical\";\n    var eventKey = normalizeEventKey(event);\n    var ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\";\n    var ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\";\n    var keyMap = (_keyMap = {}, _defineProperty(_keyMap, ArrowStart, function () {\n      return isHorizontal && prevTab();\n    }), _defineProperty(_keyMap, ArrowEnd, function () {\n      return isHorizontal && nextTab();\n    }), _defineProperty(_keyMap, \"ArrowDown\", function ArrowDown() {\n      return isVertical && nextTab();\n    }), _defineProperty(_keyMap, \"ArrowUp\", function ArrowUp() {\n      return isVertical && prevTab();\n    }), _defineProperty(_keyMap, \"Home\", firstTab), _defineProperty(_keyMap, \"End\", lastTab), _keyMap);\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, focusedIndex, orientation, direction]);\n  return _extends({}, props, {\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\n\nexport function useTab(props) {\n  var isDisabled = props.isDisabled,\n      isFocusable = props.isFocusable,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isDisabled\", \"isFocusable\"]);\n\n  var _useTabsContext2 = useTabsContext(),\n      setSelectedIndex = _useTabsContext2.setSelectedIndex,\n      isManual = _useTabsContext2.isManual,\n      id = _useTabsContext2.id,\n      setFocusedIndex = _useTabsContext2.setFocusedIndex,\n      selectedIndex = _useTabsContext2.selectedIndex;\n\n  var _useTabsDescendant = useTabsDescendant({\n    disabled: isDisabled && !isFocusable\n  }),\n      index = _useTabsDescendant.index,\n      register = _useTabsDescendant.register;\n\n  var isSelected = index === selectedIndex;\n\n  var onClick = function onClick() {\n    setSelectedIndex(index);\n  };\n\n  var onFocus = function onFocus() {\n    setFocusedIndex(index);\n    var isDisabledButFocusable = isDisabled && isFocusable;\n    var shouldSelect = !isManual && !isDisabledButFocusable;\n\n    if (shouldSelect) {\n      setSelectedIndex(index);\n    }\n  };\n\n  var clickableProps = useClickable(_extends({}, htmlProps, {\n    ref: mergeRefs(register, props.ref),\n    isDisabled: isDisabled,\n    isFocusable: isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick)\n  }));\n  var type = \"button\";\n  return _extends({}, clickableProps, {\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type: type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus)\n  });\n}\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\n\nexport function useTabPanels(props) {\n  var context = useTabsContext();\n  var id = context.id,\n      selectedIndex = context.selectedIndex;\n  var validChildren = getValidChildren(props.children);\n  var children = validChildren.map(function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      // Refers to the associated tab element, and also provides an accessible name to the tab panel.\n      \"aria-labelledby\": makeTabId(id, index)\n    });\n  });\n  return _extends({}, props, {\n    children: children\n  });\n}\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\n\nexport function useTabPanel(props) {\n  var isSelected = props.isSelected,\n      id = props.id,\n      children = props.children,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isSelected\", \"id\", \"children\"]);\n\n  var _useTabsContext3 = useTabsContext(),\n      isLazy = _useTabsContext3.isLazy,\n      lazyBehavior = _useTabsContext3.lazyBehavior;\n\n  var hasBeenSelected = React.useRef(false);\n\n  if (isSelected) {\n    hasBeenSelected.current = true;\n  }\n\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenSelected.current,\n    isSelected: isSelected,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior\n  });\n  return _extends({\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0\n  }, htmlProps, {\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id: id\n  });\n}\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\n\nexport function useTabIndicator() {\n  var context = useTabsContext();\n  var descendants = useTabsDescendantsContext();\n  var selectedIndex = context.selectedIndex,\n      orientation = context.orientation;\n  var isHorizontal = orientation === \"horizontal\";\n  var isVertical = orientation === \"vertical\"; // Get the clientRect of the selected tab\n\n  var _React$useState3 = React.useState(function () {\n    if (isHorizontal) return {\n      left: 0,\n      width: 0\n    };\n    if (isVertical) return {\n      top: 0,\n      height: 0\n    };\n    return undefined;\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rect = _React$useState4[0],\n      setRect = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      hasMeasured = _React$useState6[0],\n      setHasMeasured = _React$useState6[1]; // Update the selected tab rect when the selectedIndex changes\n\n\n  useSafeLayoutEffect(function () {\n    var _tab$node;\n\n    if (isUndefined(selectedIndex)) return undefined;\n    var tab = descendants.item(selectedIndex);\n    var tabRect = tab == null ? void 0 : (_tab$node = tab.node) == null ? void 0 : _tab$node.getBoundingClientRect(); // Horizontal Tab: Calculate width and left distance\n\n    if (isHorizontal && tabRect) {\n      var left = tabRect.left,\n          width = tabRect.width;\n      setRect({\n        left: left,\n        width: width\n      });\n    } // Vertical Tab: Calculate height and top distance\n\n\n    if (isVertical && tabRect) {\n      var top = tabRect.top,\n          height = tabRect.height;\n      setRect({\n        top: top,\n        height: height\n      });\n    } // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n\n\n    var id = requestAnimationFrame(function () {\n      setHasMeasured(true);\n    });\n    return function () {\n      if (id) {\n        cancelAnimationFrame(id);\n      }\n    };\n  }, [selectedIndex, isHorizontal, isVertical, descendants]);\n  return _extends({\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\"\n  }, rect);\n}\n\nfunction makeTabId(id, index) {\n  return id + \"--tab-\" + index;\n}\n\nfunction makeTabPanelId(id, index) {\n  return id + \"--tabpanel-\" + index;\n}","map":{"version":3,"mappings":"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","names":["useClickable","createDescendantContext","useControllableState","useId","useSafeLayoutEffect","createContext","getValidChildren","mergeRefs","callAllHandlers","determineLazyBehavior","focus","isUndefined","normalizeEventKey","React","TabsDescendantsProvider","useTabsDescendantsContext","useTabsDescendants","useTabsDescendant","useTabs","props","defaultIndex","onChange","index","isManual","isLazy","lazyBehavior","orientation","direction","htmlProps","useState","focusedIndex","setFocusedIndex","defaultValue","value","selectedIndex","setSelectedIndex","useEffect","descendants","id","name","errorMessage","TabsProvider","useTabsContext","useTabList","onKeyDown","useCallback","event","nextTab","next","nextEnabled","node","prevTab","prev","prevEnabled","firstTab","first","firstEnabled","lastTab","last","lastEnabled","isHorizontal","isVertical","eventKey","ArrowStart","ArrowEnd","keyMap","action","preventDefault","role","useTab","isDisabled","isFocusable","disabled","register","isSelected","onClick","onFocus","isDisabledButFocusable","shouldSelect","clickableProps","ref","type","makeTabId","tabIndex","makeTabPanelId","undefined","useTabPanels","context","validChildren","children","map","child","cloneElement","useTabPanel","hasBeenSelected","useRef","current","shouldRenderChildren","hidden","useTabIndicator","left","width","top","height","rect","setRect","hasMeasured","setHasMeasured","tab","item","tabRect","_tab$node","getBoundingClientRect","requestAnimationFrame","cancelAnimationFrame","position","transition"],"sources":["../../src/use-tabs.ts"],"sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  determineLazyBehavior,\n  Dict,\n  focus,\n  isUndefined,\n  LazyBehavior,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  TabsDescendantsProvider,\n  useTabsDescendantsContext,\n  useTabsDescendants,\n  useTabsDescendant,\n] = createDescendantContext<HTMLButtonElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * useTabs - The root react hook that manages all tab items\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, rendering of the tab panel's will be deferred until it is selected.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of tab panels' content when not active.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The content of inactive tab panels are always unmounted.\n   * - \"keepMounted\": The content of inactive tab panels is initially unmounted,\n   * but stays mounted when selected.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n  /**\n   * The writing mode direction.\n   *\n   * - When in RTL, the left and right navigation is flipped\n   */\n  direction?: \"rtl\" | \"ltr\"\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = React.useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  React.useEffect(() => {\n    if (index != null) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   */\n  const descendants = useTabsDescendants()\n\n  /**\n   * Generate a unique id or use user-provided id for the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    descendants,\n    direction,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<\n  ReturnType<typeof useTabs>,\n  \"htmlProps\" | \"descendants\"\n>\n\nexport const [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\ntype Child = React.ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const { focusedIndex, orientation, direction } = useTabsContext()\n\n  const descendants = useTabsDescendantsContext()\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => {\n        const next = descendants.nextEnabled(focusedIndex)\n        if (next) focus(next.node)\n      }\n      const prevTab = () => {\n        const prev = descendants.prevEnabled(focusedIndex)\n        if (prev) focus(prev.node)\n      }\n      const firstTab = () => {\n        const first = descendants.firstEnabled()\n        if (first) focus(first.node)\n      }\n      const lastTab = () => {\n        const last = descendants.lastEnabled()\n        if (last) focus(last.node)\n      }\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n\n      const ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\"\n      const ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\"\n\n      const keyMap: EventKeyMap = {\n        [ArrowStart]: () => isHorizontal && prevTab(),\n        [ArrowEnd]: () => isHorizontal && nextTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, focusedIndex, orientation, direction],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    selectedIndex,\n  } = useTabsContext()\n\n  const { index, register } = useTabsDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    setFocusedIndex(index)\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(register, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    React.cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      // Refers to the associated tab element, and also provides an accessible name to the tab panel.\n      \"aria-labelledby\": makeTabId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, children, ...htmlProps } = props\n  const { isLazy, lazyBehavior } = useTabsContext()\n\n  const hasBeenSelected = React.useRef(false)\n  if (isSelected) {\n    hasBeenSelected.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenSelected.current,\n    isSelected,\n    isLazy,\n    lazyBehavior,\n  })\n\n  return {\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0,\n    ...htmlProps,\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n  const descendants = useTabsDescendantsContext()\n\n  const { selectedIndex, orientation } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = React.useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = descendants.item(selectedIndex)\n    const tabRect = tab?.node?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"]},"metadata":{},"sourceType":"module"}