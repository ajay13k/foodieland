{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroup } from \"./use-checkbox-group\";\n\nvar _createContext = createContext({\n  name: \"CheckboxGroupContext\",\n  strict: false\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    CheckboxGroupProvider = _createContext2[0],\n    useCheckboxGroupContext = _createContext2[1];\n\nexport { useCheckboxGroupContext };\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\n\nexport var CheckboxGroup = function CheckboxGroup(props) {\n  var colorScheme = props.colorScheme,\n      size = props.size,\n      variant = props.variant,\n      children = props.children,\n      isDisabled = props.isDisabled;\n\n  var _useCheckboxGroup = useCheckboxGroup(props),\n      value = _useCheckboxGroup.value,\n      onChange = _useCheckboxGroup.onChange;\n\n  var group = React.useMemo(function () {\n    return {\n      size: size,\n      onChange: onChange,\n      colorScheme: colorScheme,\n      value: value,\n      variant: variant,\n      isDisabled: isDisabled\n    };\n  }, [size, onChange, colorScheme, value, variant, isDisabled]);\n  return /*#__PURE__*/React.createElement(CheckboxGroupProvider, {\n    value: group\n  }, children);\n};\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\";\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,QAIO,sBAJP;;AAgBA,qBAGIF,aAAa,CAAuB;EACtCG,IAAI,EAAE,sBADgC;EAEtCC,MAAM,EAAE;AAF8B,CAAvB,CAHjB;AAAA;AAAA,IACEC,qBADF;AAAA,IAEEC,uBAFF;;AAQA,SAASA,uBAAT;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAA2C,GAAIC,SAA/CD,aAA+CC,MAAD,EAAW;EACpE,IAAQC,WAAR,GAA6DD,KAA7D,CAAQC,WAAR;EAAA,IAAqBC,IAArB,GAA6DF,KAA7D,CAAqBE,IAArB;EAAA,IAA2BC,OAA3B,GAA6DH,KAA7D,CAA2BG,OAA3B;EAAA,IAAoCC,QAApC,GAA6DJ,KAA7D,CAAoCI,QAApC;EAAA,IAA8CC,UAA9C,GAA6DL,KAA7D,CAA8CK,UAA9C;;EACA,wBAA4BX,gBAAgB,CAACM,KAAD,CAA5C;EAAA,IAAQM,KAAR,qBAAQA,KAAR;EAAA,IAAeC,QAAf,qBAAeA,QAAf;;EAEA,IAAMC,KAAK,GAAGf,KAAK,CAACgB,OAANhB,CACZ;IAAA,OAAO;MACLS,IADK,EACLA,IADK;MAELK,QAFK,EAELA,QAFK;MAGLN,WAHK,EAGLA,WAHK;MAILK,KAJK,EAILA,KAJK;MAKLH,OALK,EAKLA,OALK;MAMLE;IANK,CAAP;EAAA,CADYZ,EASZ,CAACS,IAAD,EAAOK,QAAP,EAAiBN,WAAjB,EAA8BK,KAA9B,EAAqCH,OAArC,EAA8CE,UAA9C,CATYZ,CAAd;EAYA,oBAAOA,oBAACI,qBAAD;IAAuBS,KAAK,EAAEE;EAA9B,GAAsCJ,QAAtC,CAAP;AAhBK;;AAmBP,IAAIb,OAAJ,EAAa;EACXQ,aAAa,CAACW,WAAdX,GAA4B,eAA5BA;AACD","names":["__DEV__","createContext","React","useCheckboxGroup","name","strict","CheckboxGroupProvider","useCheckboxGroupContext","CheckboxGroup","props","colorScheme","size","variant","children","isDisabled","value","onChange","group","useMemo","displayName"],"sources":["../../src/checkbox-group.tsx"],"sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  useCheckboxGroup,\n  UseCheckboxGroupProps,\n  UseCheckboxGroupReturn,\n} from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {\n  children?: React.ReactNode\n}\n\nexport interface CheckboxGroupContext\n  extends Pick<UseCheckboxGroupReturn, \"onChange\" | \"value\" | \"isDisabled\">,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {}\n\nconst [\n  CheckboxGroupProvider,\n  useCheckboxGroupContext,\n] = createContext<CheckboxGroupContext>({\n  name: \"CheckboxGroupContext\",\n  strict: false,\n})\n\nexport { useCheckboxGroupContext }\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const CheckboxGroup: React.FC<CheckboxGroupProps> = (props) => {\n  const { colorScheme, size, variant, children, isDisabled } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = React.useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n    }),\n    [size, onChange, colorScheme, value, variant, isDisabled],\n  )\n\n  return <CheckboxGroupProvider value={group}>{children}</CheckboxGroupProvider>\n}\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}