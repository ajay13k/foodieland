{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn, omit } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useChakra } from \"./hooks\";\nexport function useStyleConfig(themeKey, props, opts) {\n  var _styleConfig$defaultP, _opts2;\n\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var _props = props,\n      styleConfigProp = _props.styleConfig,\n      rest = _objectWithoutPropertiesLoose(props, [\"styleConfig\"]);\n\n  var _useChakra = useChakra(),\n      theme = _useChakra.theme,\n      colorMode = _useChakra.colorMode;\n\n  var themeStyleConfig = get(theme, \"components.\" + themeKey);\n  var styleConfig = styleConfigProp || themeStyleConfig;\n  var mergedProps = mergeWith({\n    theme: theme,\n    colorMode: colorMode\n  }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, [\"children\"])));\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n\n  var stylesRef = useRef({});\n  return useMemo(function () {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes, _opts;\n\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);\n      var styles = mergeWith({}, baseStyles, sizes, variants);\n\n      if ((_opts = opts) != null && _opts.isMultiPart && styleConfig.parts) {\n        styleConfig.parts.forEach(function (part) {\n          var _styles$part;\n\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n\n    return stylesRef.current;\n  }, [styleConfig, mergedProps, (_opts2 = opts) == null ? void 0 : _opts2.isMultiPart]);\n}\nexport function useMultiStyleConfig(themeKey, props) {\n  return useStyleConfig(themeKey, props, {\n    isMultiPart: true\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AACA,SACEA,eADF,EAEEC,WAAW,IAAIC,GAFjB,EAGEC,SAHF,EAIEC,OAJF,EAKEC,IALF,QAOO,kBAPP;AAQA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAeA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAuCC,KAAvC,EAAwDC,IAAxD,EAAwE;EAAA;;EAAA,IAAjCD,KAAiC;IAAjCA,KAAiC,GAApB,EAAbA;EAAiC;;EAAA,IAAhBC,IAAgB;IAAhBA,IAAgB,GAAJ,EAAZA;EAAgB;;EAC7E,aAAkDD,KAAlD;EAAA,IAAqBE,eAArB,UAAQC,WAAR;EAAA,IAAyCC,IAAzC,iCAAkDJ,KAAlD;;EAEA,iBAA6BH,SAAS,EAAtC;EAAA,IAAQQ,KAAR,cAAQA,KAAR;EAAA,IAAeC,SAAf,cAAeA,SAAf;;EACA,IAAMC,gBAAgB,GAAGjB,GAAG,CAACe,KAAD,kBAAsBN,QAAtB,CAA5B;EACA,IAAMI,WAAW,GAAGD,eAAe,IAAIK,gBAAvC;EAEA,IAAMC,WAAW,GAAGjB,SAAS,CAC3B;IAAEc,KAAF,EAAEA,KAAF;IAASC;EAAT,CAD2B,2BAE3BH,WAF2B,QAE3BA,GAF2B,MAE3BA,cAAW,CAAEM,YAFc,oCAEE,EAFF,EAG3BrB,eAAe,CAACK,IAAI,CAACW,IAAD,EAAO,CAAC,UAAD,CAAP,CAAL,CAHY,CAA7B;EAMA;AACF;AACA;;EAEE,IAAMM,SAAS,GAAGf,MAAM,CAAY,EAAZ,CAAxB;EAEA,OAAOD,OAAO,CAAC,YAAM;IACnB,IAAIS,WAAJ,EAAiB;MAAA;;MACf,IAAMQ,UAAU,GAAGnB,OAAO,0BAACW,WAAW,CAACS,SAAb,oCAA0B,EAA1B,EAA8BJ,WAA9B,CAA1B;MAEA,IAAMK,QAAQ,GAAGrB,OAAO,oDACtBW,WAAW,CAACU,QADU,qBACtBC,uBAAuBN,WAAW,CAACO,OAAnC,CADsB,oCACyB,EADzB,EAEtBP,WAFsB,CAAxB;MAKA,IAAMQ,KAAK,GAAGxB,OAAO,gDACnBW,WAAW,CAACa,KADO,qBACnBC,mBAAoBT,WAAW,CAACU,IAAhC,CADmB,oCACsB,EADtB,EAEnBV,WAFmB,CAArB;MAKA,IAAMW,MAAM,GAAG5B,SAAS,CAAC,EAAD,EAAKoB,UAAL,EAAiBK,KAAjB,EAAwBH,QAAxB,CAAxB;;MAEA,IAAI,kBAAI,IAAJ,UAAMO,WAAN,IAAqBjB,WAAW,CAACkB,KAArC,EAA4C;QAC1ClB,WAAW,CAACkB,KAAZlB,CAAkBmB,OAAlBnB,CAA2BoB,cAAD,EAAkB;UAAA;;UAC1CJ,MAAM,CAACI,IAAD,CAANJ,mBAAeA,MAAM,CAACI,IAAD,CAArB,2BAA+B,EAA/BJ;QADF;MAGD;;MAED,IAAMK,YAAY,GAAG5B,OAAO,CAACc,SAAS,CAACe,OAAX,EAAoBN,MAApB,CAA5B;;MAEA,IAAI,CAACK,YAAL,EAAmB;QACjBd,SAAS,CAACe,OAAVf,GAAoBS,MAApBT;MACD;IACF;;IAED,OAAOA,SAAS,CAACe,OAAjB;EA7BY,GA8BX,CAACtB,WAAD,EAAcK,WAAd,YAA2BP,IAA3B,qBAA2ByB,OAAMN,WAAjC,CA9BW,CAAd;AA+BD;AAED,OAAO,SAASO,mBAAT,CAA6B5B,QAA7B,EAA+CC,KAA/C,EAA2D;EAChE,OAAOF,cAAc,CAACC,QAAD,EAAWC,KAAX,EAAkB;IAAEoB,WAAW,EAAE;EAAf,CAAlB,CAArB;AACD","names":["filterUndefined","memoizedGet","get","mergeWith","runIfFn","omit","useMemo","useRef","isEqual","useChakra","useStyleConfig","themeKey","props","opts","styleConfigProp","styleConfig","rest","theme","colorMode","themeStyleConfig","mergedProps","defaultProps","stylesRef","baseStyles","baseStyle","variants","_styleConfig$variants2","variant","sizes","_styleConfig$sizes","size","styles","isMultiPart","parts","forEach","part","isStyleEqual","current","_opts2","useMultiStyleConfig"],"sources":["../../src/use-style-config.ts"],"sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  omit,\n  Dict,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\nimport { ThemingProps } from \"./system.types\"\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict,\n  opts: { isMultiPart: true },\n): Record<string, SystemStyleObject>\n\nexport function useStyleConfig(\n  themeKey: string,\n  props?: ThemingProps & Dict,\n  opts?: { isMultiPart?: boolean },\n): SystemStyleObject\n\nexport function useStyleConfig(themeKey: any, props: any = {}, opts: any = {}) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  type StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n  const stylesRef = useRef<StylesRef>({})\n\n  return useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith({}, baseStyles, sizes, variants)\n\n      if (opts?.isMultiPart && styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps, opts?.isMultiPart])\n}\n\nexport function useMultiStyleConfig(themeKey: string, props: any) {\n  return useStyleConfig(themeKey, props, { isMultiPart: true })\n}\n"]},"metadata":{},"sourceType":"module"}