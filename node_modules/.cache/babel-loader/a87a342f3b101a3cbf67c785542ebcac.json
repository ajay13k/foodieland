{"ast":null,"code":"import Color from \"tinycolor2\";\nimport { memoizedGet as get, isEmptyObject } from \"@chakra-ui/utils\";\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\n\nexport var getColor = function getColor(theme, color, fallback) {\n  var hex = get(theme, \"colors.\" + color, color);\n  var isValid = Color(hex).isValid();\n  return isValid ? hex : fallback;\n};\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var tone = function tone(color) {\n  return function (theme) {\n    var hex = getColor(theme, color);\n    var isDark = Color(hex).isDark();\n    return isDark ? \"dark\" : \"light\";\n  };\n};\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isDark = function isDark(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"dark\";\n  };\n};\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isLight = function isLight(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"light\";\n  };\n};\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add\n */\n\nexport var transparentize = function transparentize(color, opacity) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return Color(raw).setAlpha(opacity).toRgbString();\n  };\n};\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-1)\n */\n\nexport var whiten = function whiten(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return Color.mix(raw, \"#fff\", amount).toHexString();\n  };\n};\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-1)\n */\n\nexport var blacken = function blacken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return Color.mix(raw, \"#000\", amount).toHexString();\n  };\n};\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-1)\n */\n\nexport var darken = function darken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return Color(raw).darken(amount).toHexString();\n  };\n};\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-1)\n */\n\nexport var lighten = function lighten(color, amount) {\n  return function (theme) {\n    return Color(getColor(theme, color)).lighten(amount).toHexString();\n  };\n};\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var contrast = function contrast(fg, bg) {\n  return function (theme) {\n    return Color.readability(getColor(theme, bg), getColor(theme, fg));\n  };\n};\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var isAccessible = function isAccessible(textColor, bgColor, options) {\n  return function (theme) {\n    return Color.isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\n  };\n};\nexport var complementary = function complementary(color) {\n  return function (theme) {\n    return Color(getColor(theme, color)).complement().toHexString();\n  };\n};\nexport function generateStripe(size, color) {\n  if (size === void 0) {\n    size = \"1rem\";\n  }\n\n  if (color === void 0) {\n    color = \"rgba(255, 255, 255, 0.15)\";\n  }\n\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \" + color + \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \" + color + \" 50%,\\n    \" + color + \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\",\n    backgroundSize: size + \" \" + size\n  };\n}\nexport function randomColor(opts) {\n  var fallback = Color.random().toHexString();\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  var color = \"#\";\n\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}","map":{"version":3,"mappings":"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","names":["Color","memoizedGet","get","isEmptyObject","getColor","theme","color","fallback","hex","isValid","tone","isDark","isLight","transparentize","opacity","raw","setAlpha","toRgbString","whiten","amount","mix","toHexString","blacken","darken","lighten","contrast","fg","bg","readability","isAccessible","textColor","bgColor","options","isReadable","complementary","complement","generateStripe","size","backgroundImage","backgroundSize","randomColor","opts","random","string","colors","randomColorFromList","randomColorFromString","randomFromList","str","hash","length","toString","i","charCodeAt","j","value","substr","list","index","Math","floor"],"sources":["../../src/color.ts"],"sourcesContent":["import Color from \"tinycolor2\"\nimport { memoizedGet as get, Dict, isEmptyObject } from \"@chakra-ui/utils\"\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  const isValid = Color(hex).isValid()\n  return isValid ? hex : fallback\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const isDark = Color(hex).isDark()\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add\n */\nexport const transparentize = (color: string, opacity: number) => (\n  theme: Dict,\n) => {\n  const raw = getColor(theme, color)\n  return Color(raw).setAlpha(opacity).toRgbString()\n}\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-1)\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return Color.mix(raw, \"#fff\", amount).toHexString()\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-1)\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return Color.mix(raw, \"#000\", amount).toHexString()\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-1)\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return Color(raw).darken(amount).toHexString()\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-1)\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) =>\n  Color(getColor(theme, color)).lighten(amount).toHexString()\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  Color.readability(getColor(theme, bg), getColor(theme, fg))\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const isAccessible = (\n  textColor: string,\n  bgColor: string,\n  options?: Color.WCAG2Options,\n) => (theme: Dict) =>\n  Color.isReadable(\n    getColor(theme, bgColor),\n    getColor(theme, textColor),\n    options,\n  )\n\nexport const complementary = (color: string) => (theme: Dict) =>\n  Color(getColor(theme, color)).complement().toHexString()\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = Color.random().toHexString()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n"]},"metadata":{},"sourceType":"module"}