{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nexport var InputGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(function (child) {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  var clones = validChildren.map(function (child) {\n    var _child$props, _child$props2;\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n\n\n    var theming = {\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    };\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","cx","__DEV__","getValidChildren","React","InputGroup","props","ref","styles","children","className","rest","_className","groupStyles","validChildren","input","field","forEach","child","type","id","paddingStart","height","h","paddingEnd","borderEndRadius","borderStartRadius","clones","map","theming","size","variant","cloneElement","Object","assign","div","__css","width","display","position","value","displayName"],"sources":["../../src/input-group.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(\n          child,\n          Object.assign(theming, groupStyles, child.props),\n        )\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}