{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { dataAttr, isRightClick } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useEventListeners } from \"./use-event-listeners\";\n\nfunction isValidElement(event) {\n  var element = event.target;\n  var tagName = element.tagName,\n      isContentEditable = element.isContentEditable;\n  return tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true;\n}\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\n\n\nexport function useClickable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      htmlRef = _props.ref,\n      isDisabled = _props.isDisabled,\n      isFocusable = _props.isFocusable,\n      _props$clickOnEnter = _props.clickOnEnter,\n      clickOnEnter = _props$clickOnEnter === void 0 ? true : _props$clickOnEnter,\n      _props$clickOnSpace = _props.clickOnSpace,\n      clickOnSpace = _props$clickOnSpace === void 0 ? true : _props$clickOnSpace,\n      onMouseDown = _props.onMouseDown,\n      onMouseUp = _props.onMouseUp,\n      onClick = _props.onClick,\n      onKeyDown = _props.onKeyDown,\n      onKeyUp = _props.onKeyUp,\n      tabIndexProp = _props.tabIndex,\n      onMouseOver = _props.onMouseOver,\n      onMouseLeave = _props.onMouseLeave,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"ref\", \"isDisabled\", \"isFocusable\", \"clickOnEnter\", \"clickOnSpace\", \"onMouseDown\", \"onMouseUp\", \"onClick\", \"onKeyDown\", \"onKeyUp\", \"tabIndex\", \"onMouseOver\", \"onMouseLeave\"]);\n  /**\n   * We'll use this to track if the element is a button element\n   */\n\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isButton = _React$useState2[0],\n      setIsButton = _React$useState2[1];\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isPressed = _React$useState4[0],\n      setIsPressed = _React$useState4[1];\n\n  var listeners = useEventListeners();\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n\n  var refCallback = function refCallback(node) {\n    if (!node) return;\n\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false);\n    }\n  };\n\n  var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;\n  var trulyDisabled = isDisabled && !isFocusable;\n  var handleClick = React.useCallback(function (event) {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    var self = event.currentTarget;\n    self.focus();\n    onClick == null ? void 0 : onClick(event);\n  }, [isDisabled, onClick]);\n  var onDocumentKeyUp = React.useCallback(function (e) {\n    if (isPressed && isValidElement(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsPressed(false); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      listeners.remove(document, \"keyup\", onDocumentKeyUp, false);\n    }\n  }, [isPressed, listeners]);\n  var handleKeyDown = React.useCallback(function (event) {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    if (isDisabled || event.defaultPrevented || event.metaKey) {\n      return;\n    }\n\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnEnter = clickOnEnter && event.key === \"Enter\";\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(true);\n    }\n\n    if (shouldClickOnEnter) {\n      event.preventDefault();\n      var self = event.currentTarget;\n      self.click();\n    }\n\n    listeners.add(document, \"keyup\", onDocumentKeyUp, false);\n  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);\n  var handleKeyUp = React.useCallback(function (event) {\n    onKeyUp == null ? void 0 : onKeyUp(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) return;\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(false);\n      var self = event.currentTarget;\n      self.click();\n    }\n  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);\n  var onDocumentMouseUp = React.useCallback(function (event) {\n    if (event.button !== 0) return;\n    setIsPressed(false);\n    listeners.remove(document, \"mouseup\", onDocumentMouseUp, false);\n  }, [listeners]);\n  var handleMouseDown = React.useCallback(function (event) {\n    if (isRightClick(event)) return;\n\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    if (!isButton) {\n      setIsPressed(true);\n    }\n\n    var target = event.currentTarget;\n    target.focus({\n      preventScroll: true\n    });\n    listeners.add(document, \"mouseup\", onDocumentMouseUp, false);\n    onMouseDown == null ? void 0 : onMouseDown(event);\n  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);\n  var handleMouseUp = React.useCallback(function (event) {\n    if (isRightClick(event)) return;\n\n    if (!isButton) {\n      setIsPressed(false);\n    }\n\n    onMouseUp == null ? void 0 : onMouseUp(event);\n  }, [onMouseUp, isButton]);\n  var handleMouseOver = React.useCallback(function (event) {\n    if (isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [isDisabled, onMouseOver]);\n  var handleMouseLeave = React.useCallback(function (event) {\n    if (isPressed) {\n      event.preventDefault();\n      setIsPressed(false);\n    }\n\n    onMouseLeave == null ? void 0 : onMouseLeave(event);\n  }, [isPressed, onMouseLeave]);\n  var ref = mergeRefs(htmlRef, refCallback);\n\n  if (isButton) {\n    return _extends({}, htmlProps, {\n      ref: ref,\n      type: \"button\",\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown: onMouseDown,\n      onMouseUp: onMouseUp,\n      onKeyUp: onKeyUp,\n      onKeyDown: onKeyDown,\n      onMouseOver: onMouseOver,\n      onMouseLeave: onMouseLeave\n    });\n  }\n\n  return _extends({}, htmlProps, {\n    ref: ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? \"true\" : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave\n  });\n}","map":{"version":3,"mappings":"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","names":["dataAttr","isRightClick","mergeRefs","React","useEventListeners","isValidElement","event","element","target","tagName","isContentEditable","useClickable","props","htmlRef","ref","isDisabled","isFocusable","clickOnEnter","clickOnSpace","onMouseDown","onMouseUp","onClick","onKeyDown","onKeyUp","tabIndexProp","tabIndex","onMouseOver","onMouseLeave","htmlProps","useState","isButton","setIsButton","isPressed","setIsPressed","listeners","refCallback","node","trulyDisabled","handleClick","useCallback","stopPropagation","preventDefault","self","currentTarget","focus","onDocumentKeyUp","e","remove","document","handleKeyDown","defaultPrevented","metaKey","nativeEvent","shouldClickOnEnter","key","shouldClickOnSpace","click","add","handleKeyUp","onDocumentMouseUp","button","handleMouseDown","preventScroll","handleMouseUp","handleMouseOver","handleMouseLeave","type","undefined","disabled","role"],"sources":["../../src/use-clickable.ts"],"sourcesContent":["import { dataAttr, isRightClick } from \"@chakra-ui/utils\"\nimport { mergeRefs } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useEventListeners } from \"./use-event-listeners\"\n\nexport interface UseClickableProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * If `true`, the element will be disabled.\n   * It will set the `disabled` HTML attribute\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and isDisabled, the element will\n   * have only `aria-disabled` set to `true`\n   */\n  isFocusable?: boolean\n  /**\n   * Whether or not trigger click on pressing `Enter`.\n   */\n  clickOnEnter?: boolean\n  /**\n   * Whether or not trigger click on pressing `Space`.\n   */\n  clickOnSpace?: boolean\n  /**\n   * The ref for the element\n   */\n  ref?: React.Ref<HTMLElement>\n}\n\nfunction isValidElement(event: KeyboardEvent): boolean {\n  const element = event.target as HTMLElement\n  const { tagName, isContentEditable } = element\n  return (\n    tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true\n  )\n}\n\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\nexport function useClickable(props: UseClickableProps = {}) {\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props\n  /**\n   * We'll use this to track if the element is a button element\n   */\n  const [isButton, setIsButton] = React.useState(true)\n\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n  const [isPressed, setIsPressed] = React.useState(false)\n\n  const listeners = useEventListeners()\n\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n  const refCallback = (node: any) => {\n    if (!node) return\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false)\n    }\n  }\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      const self = event.currentTarget as HTMLElement\n      self.focus()\n      onClick?.(event)\n    },\n    [isDisabled, onClick],\n  )\n\n  const onDocumentKeyUp = React.useCallback(\n    (e: KeyboardEvent) => {\n      if (isPressed && isValidElement(e)) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        setIsPressed(false)\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        listeners.remove(document, \"keyup\", onDocumentKeyUp, false)\n      }\n    },\n    [isPressed, listeners],\n  )\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyDown?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) {\n        return\n      }\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\"\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(true)\n      }\n\n      if (shouldClickOnEnter) {\n        event.preventDefault()\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n\n      listeners.add(document, \"keyup\", onDocumentKeyUp, false)\n    },\n    [\n      isDisabled,\n      isButton,\n      onKeyDown,\n      clickOnEnter,\n      clickOnSpace,\n      listeners,\n      onDocumentKeyUp,\n    ],\n  )\n\n  const handleKeyUp = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyUp?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) return\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(false)\n\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [clickOnSpace, isButton, isDisabled, onKeyUp],\n  )\n\n  const onDocumentMouseUp = React.useCallback(\n    (event: MouseEvent) => {\n      if (event.button !== 0) return\n      setIsPressed(false)\n      listeners.remove(document, \"mouseup\", onDocumentMouseUp, false)\n    },\n    [listeners],\n  )\n\n  const handleMouseDown = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isRightClick(event)) return\n\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      if (!isButton) {\n        setIsPressed(true)\n      }\n\n      const target = event.currentTarget as HTMLElement\n      target.focus({ preventScroll: true })\n\n      listeners.add(document, \"mouseup\", onDocumentMouseUp, false)\n\n      onMouseDown?.(event)\n    },\n    [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp],\n  )\n\n  const handleMouseUp = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isRightClick(event)) return\n\n      if (!isButton) {\n        setIsPressed(false)\n      }\n\n      onMouseUp?.(event)\n    },\n    [onMouseUp, isButton],\n  )\n\n  const handleMouseOver = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      onMouseOver?.(event)\n    },\n    [isDisabled, onMouseOver],\n  )\n\n  const handleMouseLeave = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isPressed) {\n        event.preventDefault()\n        setIsPressed(false)\n      }\n      onMouseLeave?.(event)\n    },\n    [isPressed, onMouseLeave],\n  )\n\n  const ref = mergeRefs(htmlRef, refCallback)\n\n  if (isButton) {\n    return {\n      ...htmlProps,\n      ref,\n      type: \"button\" as React.ButtonHTMLAttributes<any>[\"type\"],\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave,\n    }\n  }\n\n  return {\n    ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? (\"true\" as const) : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave,\n  }\n}\n\nexport type UseClickableReturn = ReturnType<typeof useClickable>\n"]},"metadata":{},"sourceType":"module"}