{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useCallbackRef, useControllableState, useDimensions, useIds, useLatestRef, usePanGesture, usePrevious, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { ariaAttr, callAllHandlers, clampValue, dataAttr, focus, getBox, normalizeEventKey, percentToValue, roundValueToStep, valueToPercent } from \"@chakra-ui/utils\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport { getPartsStyle } from \"./slider-utils\";\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider\n */\n\nexport function useSlider(props) {\n  var _getAriaValueText;\n\n  var _props$min = props.min,\n      min = _props$min === void 0 ? 0 : _props$min,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 100 : _props$max,\n      onChange = props.onChange,\n      valueProp = props.value,\n      defaultValue = props.defaultValue,\n      isReversed = props.isReversed,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? \"horizontal\" : _props$orientation,\n      idProp = props.id,\n      isDisabled = props.isDisabled,\n      isReadOnly = props.isReadOnly,\n      onChangeStartProp = props.onChangeStart,\n      onChangeEndProp = props.onChangeEnd,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      getAriaValueTextProp = props.getAriaValueText,\n      ariaValueText = props[\"aria-valuetext\"],\n      ariaLabel = props[\"aria-label\"],\n      ariaLabelledBy = props[\"aria-labelledby\"],\n      name = props.name,\n      _props$focusThumbOnCh = props.focusThumbOnChange,\n      focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"min\", \"max\", \"onChange\", \"value\", \"defaultValue\", \"isReversed\", \"orientation\", \"id\", \"isDisabled\", \"isReadOnly\", \"onChangeStart\", \"onChangeEnd\", \"step\", \"getAriaValueText\", \"aria-valuetext\", \"aria-label\", \"aria-labelledby\", \"name\", \"focusThumbOnChange\"]);\n\n  var onChangeStart = useCallbackRef(onChangeStartProp);\n  var onChangeEnd = useCallbackRef(onChangeEndProp);\n  var getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  /**\n   * Enable the slider handle controlled and uncontrolled scenarios\n   */\n\n  var _useControllableState = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),\n    onChange: onChange\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      computedValue = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isDragging = _useBoolean2[0],\n      setDragging = _useBoolean2[1];\n\n  var prevIsDragging = usePrevious(isDragging);\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      isFocused = _useBoolean4[0],\n      setFocused = _useBoolean4[1];\n\n  var eventSourceRef = useRef(null);\n  var isInteractive = !(isDisabled || isReadOnly);\n  /**\n   * Constrain the value because it can't be less than min\n   * or greater than max\n   */\n\n  var value = clampValue(computedValue, min, max);\n  var valueRef = useLatestRef(value);\n  var prevRef = useRef(valueRef.current);\n  var reversedValue = max - value + min;\n  var trackValue = isReversed ? reversedValue : value;\n  var trackPercent = valueToPercent(trackValue, min, max);\n  var isVertical = orientation === \"vertical\";\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n\n  var trackRef = useRef(null);\n  var thumbRef = useRef(null);\n  var rootRef = useRef(null);\n  /**\n   * Generate unique ids for component parts\n   */\n\n  var _useIds = useIds(idProp, \"slider-thumb\", \"slider-track\"),\n      _useIds2 = _slicedToArray(_useIds, 2),\n      thumbId = _useIds2[0],\n      trackId = _useIds2[1];\n  /**\n   * Get relative value of slider from the event by tracking\n   * how far you clicked within the track to determine the value\n   *\n   * @todo - Refactor this later on to use info from pan session\n   */\n\n\n  var getValueFromPointer = useCallback(function (event) {\n    var _event$touches$, _event$touches;\n\n    if (!trackRef.current) return;\n    eventSourceRef.current = \"pointer\";\n    var trackRect = getBox(trackRef.current).borderBox;\n\n    var _ref = (_event$touches$ = (_event$touches = event.touches) == null ? void 0 : _event$touches[0]) != null ? _event$touches$ : event,\n        clientX = _ref.clientX,\n        clientY = _ref.clientY;\n\n    var diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;\n    var length = isVertical ? trackRect.height : trackRect.width;\n    var percent = diff / length;\n\n    if (isReversed) {\n      percent = 1 - percent;\n    }\n\n    var nextValue = percentToValue(percent, min, max);\n\n    if (step) {\n      nextValue = parseFloat(roundValueToStep(nextValue, min, step));\n    }\n\n    nextValue = clampValue(nextValue, min, max);\n    return nextValue;\n  }, [isVertical, isReversed, max, min, step]);\n  var tenSteps = (max - min) / 10;\n  var oneStep = step || (max - min) / 100;\n  var constrain = useCallback(function (value) {\n    if (!isInteractive) return;\n    value = parseFloat(roundValueToStep(value, min, oneStep));\n    value = clampValue(value, min, max);\n    setValue(value);\n  }, [oneStep, max, min, setValue, isInteractive]);\n  var actions = useMemo(function () {\n    return {\n      stepUp: function stepUp(step) {\n        if (step === void 0) {\n          step = oneStep;\n        }\n\n        var next = isReversed ? value - step : value + step;\n        constrain(next);\n      },\n      stepDown: function stepDown(step) {\n        if (step === void 0) {\n          step = oneStep;\n        }\n\n        var next = isReversed ? value + step : value - step;\n        constrain(next);\n      },\n      reset: function reset() {\n        return constrain(defaultValue || 0);\n      },\n      stepTo: function stepTo(value) {\n        return constrain(value);\n      }\n    };\n  }, [constrain, isReversed, value, oneStep, defaultValue]);\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowRight: function ArrowRight() {\n        return actions.stepUp();\n      },\n      ArrowUp: function ArrowUp() {\n        return actions.stepUp();\n      },\n      ArrowLeft: function ArrowLeft() {\n        return actions.stepDown();\n      },\n      ArrowDown: function ArrowDown() {\n        return actions.stepDown();\n      },\n      PageUp: function PageUp() {\n        return actions.stepUp(tenSteps);\n      },\n      PageDown: function PageDown() {\n        return actions.stepDown(tenSteps);\n      },\n      Home: function Home() {\n        return constrain(min);\n      },\n      End: function End() {\n        return constrain(max);\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n      eventSourceRef.current = \"keyboard\";\n    }\n  }, [actions, constrain, max, min, tenSteps]);\n  /**\n   * ARIA (Optional): To define a human readable representation of the value,\n   * we allow users pass aria-valuetext.\n   */\n\n  var valueText = (_getAriaValueText = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _getAriaValueText : ariaValueText;\n  /**\n   * Measure the dimensions of the thumb so\n   * we can center it within the track properly\n   */\n\n  var thumbBoxModel = useDimensions(thumbRef);\n  /**\n   * Compute styles for all component parts.\n   */\n\n  var _useMemo = useMemo(function () {\n    var _thumbBoxModel$border;\n\n    var thumbRect = (_thumbBoxModel$border = thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox) != null ? _thumbBoxModel$border : {\n      width: 0,\n      height: 0\n    };\n    return getPartsStyle({\n      isReversed: isReversed,\n      orientation: orientation,\n      thumbRect: thumbRect,\n      trackPercent: trackPercent\n    });\n  }, [isReversed, orientation, thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox, trackPercent]),\n      thumbStyle = _useMemo.thumbStyle,\n      rootStyle = _useMemo.rootStyle,\n      trackStyle = _useMemo.trackStyle,\n      innerTrackStyle = _useMemo.innerTrackStyle;\n\n  var focusThumb = useCallback(function () {\n    if (thumbRef.current && focusThumbOnChange) {\n      setTimeout(function () {\n        return focus(thumbRef.current);\n      });\n    }\n  }, [focusThumbOnChange]);\n  useUpdateEffect(function () {\n    focusThumb();\n\n    if (eventSourceRef.current === \"keyboard\") {\n      onChangeEndProp == null ? void 0 : onChangeEndProp(valueRef.current);\n    }\n  }, [value, onChangeEndProp]);\n\n  var setValueFromPointer = function setValueFromPointer(event) {\n    var nextValue = getValueFromPointer(event);\n\n    if (nextValue != null && nextValue !== valueRef.current) {\n      setValue(nextValue);\n    }\n  };\n\n  usePanGesture(rootRef, {\n    onPanSessionStart: function onPanSessionStart(event) {\n      if (!isInteractive) return;\n      setValueFromPointer(event);\n    },\n    onPanSessionEnd: function onPanSessionEnd() {\n      if (!isInteractive) return;\n\n      if (!prevIsDragging && prevRef.current !== valueRef.current) {\n        onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);\n        prevRef.current = valueRef.current;\n      }\n    },\n    onPanStart: function onPanStart() {\n      if (!isInteractive) return;\n      setDragging.on();\n      onChangeStart == null ? void 0 : onChangeStart(valueRef.current);\n    },\n    onPan: function onPan(event) {\n      if (!isInteractive) return;\n      setValueFromPointer(event);\n    },\n    onPanEnd: function onPanEnd() {\n      if (!isInteractive) return;\n      setDragging.off();\n      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);\n    }\n  });\n  var getRootProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, htmlProps, {\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: _extends({}, props.style, rootStyle)\n    });\n  }, [htmlProps, isDisabled, isFocused, rootStyle]);\n  var getTrackProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, trackRef),\n      id: trackId,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: _extends({}, props.style, trackStyle)\n    });\n  }, [isDisabled, trackId, trackStyle]);\n  var getInnerTrackProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      style: _extends({}, props.style, innerTrackStyle)\n    });\n  }, [innerTrackStyle]);\n  var getThumbProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, thumbRef),\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : undefined,\n      id: thumbId,\n      \"data-active\": dataAttr(isDragging),\n      \"aria-valuetext\": valueText,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabel ? undefined : ariaLabelledBy,\n      style: _extends({}, props.style, thumbStyle),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off)\n    });\n  }, [ariaLabel, ariaLabelledBy, isDisabled, isDragging, isReadOnly, isInteractive, max, min, onKeyDown, orientation, setFocused.off, setFocused.on, thumbId, thumbStyle, value, valueText]);\n  var getMarkerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var isInRange = !(props.value < min || props.value > max);\n    var isHighlighted = value >= props.value;\n    var markerPercent = valueToPercent(props.value, min, max);\n\n    var markerStyle = _extends({\n      position: \"absolute\",\n      pointerEvents: \"none\"\n    }, orient({\n      orientation: orientation,\n      vertical: {\n        bottom: isReversed ? 100 - markerPercent + \"%\" : markerPercent + \"%\"\n      },\n      horizontal: {\n        left: isReversed ? 100 - markerPercent + \"%\" : markerPercent + \"%\"\n      }\n    }));\n\n    return _extends({}, props, {\n      ref: ref,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(!isInRange),\n      \"data-highlighted\": dataAttr(isHighlighted),\n      style: _extends({}, props.style, markerStyle)\n    });\n  }, [isDisabled, isReversed, max, min, orientation, value]);\n  var getInputProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      type: \"hidden\",\n      value: value,\n      name: name\n    });\n  }, [name, value]);\n  return {\n    state: {\n      value: value,\n      isFocused: isFocused,\n      isDragging: isDragging\n    },\n    actions: actions,\n    getRootProps: getRootProps,\n    getTrackProps: getTrackProps,\n    getInnerTrackProps: getInnerTrackProps,\n    getThumbProps: getThumbProps,\n    getMarkerProps: getMarkerProps,\n    getInputProps: getInputProps\n  };\n}\n\nfunction orient(options) {\n  var orientation = options.orientation,\n      vertical = options.vertical,\n      horizontal = options.horizontal;\n  return orientation === \"vertical\" ? vertical : horizontal;\n}\n/**\n * The browser <input type=\"range\" /> calculates\n * the default value of a slider by using mid-point\n * between the min and the max.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\n */\n\n\nfunction getDefaultValue(min, max) {\n  return max < min ? min : min + (max - min) / 2;\n}","map":{"version":3,"mappings":"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","names":["useBoolean","useCallbackRef","useControllableState","useDimensions","useIds","useLatestRef","usePanGesture","usePrevious","useUpdateEffect","mergeRefs","ariaAttr","callAllHandlers","clampValue","dataAttr","focus","getBox","normalizeEventKey","percentToValue","roundValueToStep","valueToPercent","useCallback","useMemo","useRef","getPartsStyle","useSlider","props","min","max","onChange","valueProp","value","defaultValue","isReversed","orientation","idProp","id","isDisabled","isReadOnly","onChangeStartProp","onChangeStart","onChangeEndProp","onChangeEnd","step","getAriaValueTextProp","getAriaValueText","ariaValueText","ariaLabel","ariaLabelledBy","name","focusThumbOnChange","htmlProps","getDefaultValue","computedValue","setValue","isDragging","setDragging","prevIsDragging","isFocused","setFocused","eventSourceRef","isInteractive","valueRef","prevRef","current","reversedValue","trackValue","trackPercent","isVertical","trackRef","thumbRef","rootRef","thumbId","trackId","getValueFromPointer","event","trackRect","borderBox","touches","_event$touches","clientX","clientY","diff","bottom","left","length","height","width","percent","nextValue","parseFloat","tenSteps","oneStep","constrain","actions","stepUp","next","stepDown","reset","stepTo","onKeyDown","eventKey","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","preventDefault","stopPropagation","valueText","thumbBoxModel","thumbRect","thumbStyle","rootStyle","trackStyle","innerTrackStyle","focusThumb","setTimeout","setValueFromPointer","onPanSessionStart","onPanSessionEnd","onPanStart","on","onPan","onPanEnd","off","getRootProps","ref","tabIndex","style","getTrackProps","getInnerTrackProps","getThumbProps","role","undefined","onFocus","onBlur","getMarkerProps","isInRange","isHighlighted","markerPercent","markerStyle","position","pointerEvents","orient","vertical","horizontal","getInputProps","type","state","options"],"sources":["../../src/use-slider.ts"],"sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableState,\n  useDimensions,\n  useIds,\n  useLatestRef,\n  usePanGesture,\n  usePrevious,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  AnyPointerEvent,\n  ariaAttr,\n  callAllHandlers,\n  clampValue,\n  dataAttr,\n  focus,\n  getBox,\n  normalizeEventKey,\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n} from \"@chakra-ui/utils\"\nimport { CSSProperties, useCallback, useMemo, useRef } from \"react\"\nimport { getPartsStyle } from \"./slider-utils\"\n\nexport interface UseSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number\n  /**\n   * orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   */\n  isReversed?: boolean\n  /**\n   * function gets called whenever the user starts dragging the slider handle\n   */\n  onChangeStart?(value: number): void\n  /**\n   * function gets called whenever the user stops dragging the slider handle.\n   */\n  onChangeEnd?(value: number): void\n  /**\n   * function gets called whenever the slider handle is being dragged or clicked\n   */\n  onChange?(value: number): void\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string\n  /**\n   * If `true`, the slider will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   */\n  isReadOnly?: boolean\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider\n */\nexport function useSlider(props: UseSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed,\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Enable the slider handle controlled and uncontrolled scenarios\n   */\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? getDefaultValue(min, max),\n    onChange,\n  })\n\n  const [isDragging, setDragging] = useBoolean()\n  const prevIsDragging = usePrevious(isDragging)\n\n  const [isFocused, setFocused] = useBoolean()\n  const eventSourceRef = useRef<\"pointer\" | \"keyboard\" | null>(null)\n\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  /**\n   * Constrain the value because it can't be less than min\n   * or greater than max\n   */\n  const value = clampValue(computedValue, min, max)\n  const valueRef = useLatestRef(value)\n\n  const prevRef = useRef(valueRef.current)\n\n  const reversedValue = max - value + min\n  const trackValue = isReversed ? reversedValue : value\n  const trackPercent = valueToPercent(trackValue, min, max)\n\n  const isVertical = orientation === \"vertical\"\n\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n  const trackRef = useRef<any>(null)\n  const thumbRef = useRef<any>(null)\n  const rootRef = useRef<any>(null)\n\n  /**\n   * Generate unique ids for component parts\n   */\n  const [thumbId, trackId] = useIds(idProp, `slider-thumb`, `slider-track`)\n\n  /**\n   * Get relative value of slider from the event by tracking\n   * how far you clicked within the track to determine the value\n   *\n   * @todo - Refactor this later on to use info from pan session\n   */\n\n  const getValueFromPointer = useCallback(\n    (event) => {\n      if (!trackRef.current) return\n      eventSourceRef.current = \"pointer\"\n      const trackRect = getBox(trackRef.current).borderBox\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical\n        ? trackRect.bottom - clientY\n        : clientX - trackRect.left\n\n      const length = isVertical ? trackRect.height : trackRect.width\n      let percent = diff / length\n\n      if (isReversed) {\n        percent = 1 - percent\n      }\n\n      let nextValue = percentToValue(percent, min, max)\n\n      if (step) {\n        nextValue = parseFloat(roundValueToStep(nextValue, min, step))\n      }\n\n      nextValue = clampValue(nextValue, min, max)\n\n      return nextValue\n    },\n    [isVertical, isReversed, max, min, step],\n  )\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  const constrain = useCallback(\n    (value: number) => {\n      if (!isInteractive) return\n      value = parseFloat(roundValueToStep(value, min, oneStep))\n      value = clampValue(value, min, max)\n      setValue(value)\n    },\n    [oneStep, max, min, setValue, isInteractive],\n  )\n\n  const actions = useMemo(\n    () => ({\n      stepUp: (step = oneStep) => {\n        const next = isReversed ? value - step : value + step\n        constrain(next)\n      },\n      stepDown: (step = oneStep) => {\n        const next = isReversed ? value + step : value - step\n        constrain(next)\n      },\n      reset: () => constrain(defaultValue || 0),\n      stepTo: (value: number) => constrain(value),\n    }),\n    [constrain, isReversed, value, oneStep, defaultValue],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => actions.stepUp(),\n        ArrowUp: () => actions.stepUp(),\n        ArrowLeft: () => actions.stepDown(),\n        ArrowDown: () => actions.stepDown(),\n        PageUp: () => actions.stepUp(tenSteps),\n        PageDown: () => actions.stepDown(tenSteps),\n        Home: () => constrain(min),\n        End: () => constrain(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        eventSourceRef.current = \"keyboard\"\n      }\n    },\n    [actions, constrain, max, min, tenSteps],\n  )\n\n  /**\n   * ARIA (Optional): To define a human readable representation of the value,\n   * we allow users pass aria-valuetext.\n   */\n  const valueText = getAriaValueText?.(value) ?? ariaValueText\n\n  /**\n   * Measure the dimensions of the thumb so\n   * we can center it within the track properly\n   */\n  const thumbBoxModel = useDimensions(thumbRef)\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { thumbStyle, rootStyle, trackStyle, innerTrackStyle } = useMemo(() => {\n    const thumbRect = thumbBoxModel?.borderBox ?? { width: 0, height: 0 }\n    return getPartsStyle({\n      isReversed,\n      orientation,\n      thumbRect,\n      trackPercent,\n    })\n  }, [isReversed, orientation, thumbBoxModel?.borderBox, trackPercent])\n\n  const focusThumb = useCallback(() => {\n    if (thumbRef.current && focusThumbOnChange) {\n      setTimeout(() => focus(thumbRef.current))\n    }\n  }, [focusThumbOnChange])\n\n  useUpdateEffect(() => {\n    focusThumb()\n    if (eventSourceRef.current === \"keyboard\") {\n      onChangeEndProp?.(valueRef.current)\n    }\n  }, [value, onChangeEndProp])\n\n  const setValueFromPointer = (event: AnyPointerEvent) => {\n    const nextValue = getValueFromPointer(event)\n    if (nextValue != null && nextValue !== valueRef.current) {\n      setValue(nextValue)\n    }\n  }\n\n  usePanGesture(rootRef, {\n    onPanSessionStart(event) {\n      if (!isInteractive) return\n      setValueFromPointer(event)\n    },\n    onPanSessionEnd() {\n      if (!isInteractive) return\n      if (!prevIsDragging && prevRef.current !== valueRef.current) {\n        onChangeEnd?.(valueRef.current)\n        prevRef.current = valueRef.current\n      }\n    },\n    onPanStart() {\n      if (!isInteractive) return\n      setDragging.on()\n      onChangeStart?.(valueRef.current)\n    },\n    onPan(event) {\n      if (!isInteractive) return\n      setValueFromPointer(event)\n    },\n    onPanEnd() {\n      if (!isInteractive) return\n      setDragging.off()\n      onChangeEnd?.(valueRef.current)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: {\n        ...props.style,\n        ...rootStyle,\n      },\n    }),\n    [htmlProps, isDisabled, isFocused, rootStyle],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, trackRef),\n      id: trackId,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: {\n        ...props.style,\n        ...trackStyle,\n      },\n    }),\n    [isDisabled, trackId, trackStyle],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      style: {\n        ...props.style,\n        ...innerTrackStyle,\n      },\n    }),\n    [innerTrackStyle],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, thumbRef),\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : undefined,\n      id: thumbId,\n      \"data-active\": dataAttr(isDragging),\n      \"aria-valuetext\": valueText,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabel ? undefined : ariaLabelledBy,\n      style: {\n        ...props.style,\n        ...thumbStyle,\n      },\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    }),\n    [\n      ariaLabel,\n      ariaLabelledBy,\n      isDisabled,\n      isDragging,\n      isReadOnly,\n      isInteractive,\n      max,\n      min,\n      onKeyDown,\n      orientation,\n      setFocused.off,\n      setFocused.on,\n      thumbId,\n      thumbStyle,\n      value,\n      valueText,\n    ],\n  )\n\n  const getMarkerProps: PropGetter<any, { value?: any }> = useCallback(\n    (props = {}, ref = null) => {\n      const isInRange = !(props.value < min || props.value > max)\n      const isHighlighted = value >= props.value\n      const markerPercent = valueToPercent(props.value, min, max)\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation,\n          vertical: {\n            bottom: isReversed\n              ? `${100 - markerPercent}%`\n              : `${markerPercent}%`,\n          },\n          horizontal: {\n            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`,\n          },\n        }),\n      }\n\n      return {\n        ...props,\n        ref,\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value],\n  )\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      type: \"hidden\",\n      value,\n      name,\n    }),\n    [name, value],\n  )\n\n  return {\n    state: {\n      value,\n      isFocused,\n      isDragging,\n    },\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n  }\n}\n\nexport type UseSliderReturn = ReturnType<typeof useSlider>\n\nfunction orient(options: {\n  orientation: UseSliderProps[\"orientation\"]\n  vertical: CSSProperties\n  horizontal: CSSProperties\n}) {\n  const { orientation, vertical, horizontal } = options\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n\n/**\n * The browser <input type=\"range\" /> calculates\n * the default value of a slider by using mid-point\n * between the min and the max.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\n */\nfunction getDefaultValue(min: number, max: number) {\n  return max < min ? min : min + (max - min) / 2\n}\n"]},"metadata":{},"sourceType":"module"}