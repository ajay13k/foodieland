{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\n\nvar useIsFirstRender = function useIsFirstRender() {\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n};\n\nexport var Skeleton = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Skeleton\", props);\n  var isFirstRender = useIsFirstRender();\n\n  var _omitThemingProps = omitThemingProps(props),\n      isLoaded = _omitThemingProps.isLoaded,\n      fadeDuration = _omitThemingProps.fadeDuration,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\"]);\n\n  var _className = cx(\"chakra-skeleton\", className);\n\n  if (isLoaded) {\n    var animation = isFirstRender ? \"none\" : fade + \" \" + fadeDuration + \"s\";\n    return /*#__PURE__*/React.createElement(chakra.div, _extends({\n      ref: ref,\n      className: _className,\n      __css: {\n        animation: animation\n      }\n    }, rest));\n  }\n\n  return /*#__PURE__*/React.createElement(StyledSkeleton, _extends({\n    ref: ref,\n    className: _className\n  }, rest, {\n    __css: styles\n  }));\n});\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8\n};\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\";\n}\n\nfunction range(count) {\n  return Array(count).fill(1).map(function (_, index) {\n    return index + 1;\n  });\n}\n\nvar defaultNoOfLines = 3;\nexport var SkeletonText = function SkeletonText(props) {\n  var _props$noOfLines = props.noOfLines,\n      noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      _props$skeletonHeight = props.skeletonHeight,\n      skeletonHeight = _props$skeletonHeight === void 0 ? \"0.5rem\" : _props$skeletonHeight,\n      className = props.className,\n      startColor = props.startColor,\n      endColor = props.endColor,\n      isLoaded = props.isLoaded,\n      fadeDuration = props.fadeDuration,\n      speed = props.speed,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"noOfLines\", \"spacing\", \"skeletonHeight\", \"className\", \"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"children\"]);\n\n  var noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  var numbers = range(noOfLinesValue);\n\n  var getWidth = function getWidth(index) {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n\n    return \"100%\";\n  };\n\n  var _className = cx(\"chakra-skeleton__group\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest), numbers.map(function (number, index) {\n    if (isLoaded && index > 0) {\n      // skip other lines\n      return null;\n    }\n\n    var sizeProps = isLoaded ? null : {\n      mb: number === numbers.length ? \"0\" : spacing,\n      width: getWidth(number),\n      height: skeletonHeight\n    };\n    return /*#__PURE__*/React.createElement(Skeleton, _extends({\n      key: numbers.length.toString() + number,\n      startColor: startColor,\n      endColor: endColor,\n      isLoaded: isLoaded,\n      fadeDuration: fadeDuration,\n      speed: speed\n    }, sizeProps), // allows animating the children\n    index === 0 ? children : undefined);\n  }));\n};\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\";\n}\n\nexport var SkeletonCircle = function SkeletonCircle(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? \"2rem\" : _ref$size,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"size\"]);\n\n  return /*#__PURE__*/React.createElement(Skeleton, _extends({\n    borderRadius: \"full\",\n    boxSize: size\n  }, rest));\n};\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\";\n}","map":{"version":3,"mappings":"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","names":["useBreakpointValue","chakra","forwardRef","keyframes","omitThemingProps","useStyleConfig","cx","__DEV__","React","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","from","opacity","to","useIsFirstRender","isFirstRender","useRef","useEffect","current","Skeleton","props","ref","styles","isLoaded","fadeDuration","className","rest","_className","animation","div","__css","defaultProps","speed","displayName","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","noOfLines","spacing","skeletonHeight","startColor","endColor","children","noOfLinesValue","numbers","getWidth","length","number","sizeProps","mb","width","height","key","toString","undefined","SkeletonCircle","size","borderRadius","boxSize"],"sources":["../../src/skeleton.tsx"],"sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst useIsFirstRender = () => {\n  const isFirstRender = React.useRef(true)\n\n  React.useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    const animation = isFirstRender ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\n\nconst defaultNoOfLines = 3\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n"]},"metadata":{},"sourceType":"module"}