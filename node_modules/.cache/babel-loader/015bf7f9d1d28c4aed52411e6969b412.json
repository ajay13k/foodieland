{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { getProgressProps, progress, stripe } from \"./progress.utils\";\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/docs/feedback/progress\n */\n\nexport var ProgressLabel = function ProgressLabel(props) {\n  var styles = useStyles();\n\n  var labelStyles = _extends({\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }, styles.label);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    __css: labelStyles\n  }));\n};\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\";\n}\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\n\n\nvar ProgressFilledTrack = function ProgressFilledTrack(props) {\n  var min = props.min,\n      max = props.max,\n      value = props.value,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, [\"min\", \"max\", \"value\", \"isIndeterminate\"]);\n\n  var progress = getProgressProps({\n    value: value,\n    min: min,\n    max: max,\n    isIndeterminate: isIndeterminate\n  });\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    height: \"100%\"\n  }, styles.filledTrack);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    style: _extends({\n      width: progress.percent + \"%\"\n    }, rest.style)\n  }, progress.bind, rest, {\n    __css: trackStyles\n  }));\n};\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\n\n\nexport var Progress = function Progress(props) {\n  var _styles$track;\n\n  var _omitThemingProps = omitThemingProps(props),\n      value = _omitThemingProps.value,\n      _omitThemingProps$min = _omitThemingProps.min,\n      min = _omitThemingProps$min === void 0 ? 0 : _omitThemingProps$min,\n      _omitThemingProps$max = _omitThemingProps.max,\n      max = _omitThemingProps$max === void 0 ? 100 : _omitThemingProps$max,\n      hasStripe = _omitThemingProps.hasStripe,\n      isAnimated = _omitThemingProps.isAnimated,\n      children = _omitThemingProps.children,\n      propBorderRadius = _omitThemingProps.borderRadius,\n      isIndeterminate = _omitThemingProps.isIndeterminate,\n      ariaLabel = _omitThemingProps[\"aria-label\"],\n      ariaLabelledBy = _omitThemingProps[\"aria-labelledby\"],\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"value\", \"min\", \"max\", \"hasStripe\", \"isAnimated\", \"children\", \"borderRadius\", \"isIndeterminate\", \"aria-label\", \"aria-labelledby\"]);\n\n  var styles = useMultiStyleConfig(\"Progress\", props);\n  var borderRadius = propBorderRadius != null ? propBorderRadius : (_styles$track = styles.track) == null ? void 0 : _styles$track.borderRadius;\n  var stripAnimation = {\n    animation: stripe + \" 1s linear infinite\"\n  };\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n\n  var shouldAddStripe = !isIndeterminate && hasStripe;\n  var shouldAnimateStripe = shouldAddStripe && isAnimated;\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n\n  var css = _extends({}, shouldAnimateStripe && stripAnimation, isIndeterminate && {\n    position: \"absolute\",\n    willChange: \"left\",\n    minWidth: \"50%\",\n    animation: progress + \" 1s ease infinite normal none running\"\n  });\n\n  var trackStyles = _extends({\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, styles.track);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    borderRadius: borderRadius,\n    __css: trackStyles\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(ProgressFilledTrack, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    min: min,\n    max: max,\n    value: value,\n    isIndeterminate: isIndeterminate,\n    css: css,\n    borderRadius: borderRadius\n  }), children));\n};\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\";\n}","map":{"version":3,"mappings":"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","names":["chakra","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","__DEV__","React","getProgressProps","progress","stripe","ProgressLabel","props","styles","labelStyles","top","left","width","textAlign","position","transform","label","div","__css","displayName","ProgressFilledTrack","min","max","value","isIndeterminate","rest","trackStyles","height","filledTrack","style","percent","bind","Progress","hasStripe","isAnimated","children","propBorderRadius","borderRadius","ariaLabel","ariaLabelledBy","track","_styles$track","stripAnimation","animation","shouldAddStripe","shouldAnimateStripe","css","willChange","minWidth","overflow"],"sources":["../../src/progress.tsx"],"sourcesContent":["import {\n  chakra,\n  Interpolation,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  getProgressProps,\n  GetProgressPropsOptions,\n  progress,\n  stripe,\n} from \"./progress.utils\"\n\nexport interface ProgressLabelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/docs/feedback/progress\n */\nexport const ProgressLabel: React.FC<ProgressLabelProps> = (props) => {\n  const styles = useStyles()\n  const labelStyles: SystemStyleObject = {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n    ...styles.label,\n  }\n  return <chakra.div {...props} __css={labelStyles} />\n}\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\"\n}\n\nexport interface ProgressFilledTrackProps\n  extends HTMLChakraProps<\"div\">,\n    GetProgressPropsOptions {}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\nconst ProgressFilledTrack: React.FC<ProgressFilledTrackProps> = (props) => {\n  const { min, max, value, isIndeterminate, ...rest } = props\n  const progress = getProgressProps({ value, min, max, isIndeterminate })\n\n  const styles = useStyles()\n  const trackStyles = {\n    height: \"100%\",\n    ...styles.filledTrack,\n  }\n\n  return (\n    <chakra.div\n      style={{\n        width: `${progress.percent}%`,\n        ...rest.style,\n      }}\n      {...progress.bind}\n      {...rest}\n      __css={trackStyles}\n    />\n  )\n}\n\nexport interface ProgressTrackProps extends HTMLChakraProps<\"div\"> {}\n\ninterface ProgressOptions {\n  /**\n   * The `value` of the progress indicator.\n   * If `undefined` the progress bar will be in `indeterminate` state\n   */\n  value?: number\n  /**\n   * The minimum value of the progress\n   */\n  min?: number\n  /**\n   * The maximum value of the progress\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated\n   */\n  isAnimated?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface ProgressProps\n  extends ProgressOptions,\n    ThemingProps<\"Progress\">,\n    HTMLChakraProps<\"div\"> {}\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\nexport const Progress: React.FC<ProgressProps> = (props) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Progress\", props)\n\n  const borderRadius =\n    propBorderRadius ??\n    (styles.track?.borderRadius as string | number | undefined)\n\n  const stripAnimation = { animation: `${stripe} 1s linear infinite` }\n\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n  const shouldAddStripe = !isIndeterminate && hasStripe\n\n  const shouldAnimateStripe = shouldAddStripe && isAnimated\n\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n  const css: Interpolation<any> = {\n    ...(shouldAnimateStripe && stripAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`,\n    }),\n  }\n\n  const trackStyles: SystemStyleObject = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.div borderRadius={borderRadius} __css={trackStyles} {...rest}>\n      <StylesProvider value={styles}>\n        <ProgressFilledTrack\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          min={min}\n          max={max}\n          value={value}\n          isIndeterminate={isIndeterminate}\n          css={css}\n          borderRadius={borderRadius}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\"\n}\n"]},"metadata":{},"sourceType":"module"}