{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { PopoverProvider, usePopoverContext } from \"./popover-context\";\nimport { PopoverTransition } from \"./popover-transition\";\nimport { usePopover } from \"./use-popover\";\nexport { usePopoverContext };\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\n\nexport var Popover = function Popover(props) {\n  var styles = useMultiStyleConfig(\"Popover\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var context = usePopover(rest);\n  return /*#__PURE__*/React.createElement(PopoverProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: context.isOpen,\n    onClose: context.onClose,\n    forceUpdate: context.forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\";\n}\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\n\nexport var PopoverTrigger = function PopoverTrigger(props) {\n  // enforce a single child\n  var child = React.Children.only(props.children);\n\n  var _usePopoverContext = usePopoverContext(),\n      getTriggerProps = _usePopoverContext.getTriggerProps;\n\n  return /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props, child.ref));\n};\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\";\n}\n\nexport var PopoverContent = /*#__PURE__*/forwardRef(function (props, ref) {\n  var rootProps = props.rootProps,\n      contentProps = _objectWithoutPropertiesLoose(props, [\"rootProps\"]);\n\n  var _usePopoverContext2 = usePopoverContext(),\n      getPopoverProps = _usePopoverContext2.getPopoverProps,\n      getPopoverPositionerProps = _usePopoverContext2.getPopoverPositionerProps;\n\n  var styles = useStyles();\n\n  var contentStyles = _extends({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, styles.content);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getPopoverPositionerProps(rootProps), {\n    __css: styles.popper,\n    className: \"chakra-popover__popper\"\n  }), /*#__PURE__*/React.createElement(PopoverTransition, _extends({}, getPopoverProps(contentProps, ref), {\n    className: cx(\"chakra-popover__content\", props.className),\n    __css: contentStyles\n  })));\n});\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\";\n}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\n\n\nexport var PopoverHeader = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext3 = usePopoverContext(),\n      getHeaderProps = _usePopoverContext3.getHeaderProps;\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({}, getHeaderProps(props, ref), {\n    className: cx(\"chakra-popover__header\", props.className),\n    __css: styles.header\n  }));\n});\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\";\n}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\n\nexport var PopoverBody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext4 = usePopoverContext(),\n      getBodyProps = _usePopoverContext4.getBodyProps;\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getBodyProps(props, ref), {\n    className: cx(\"chakra-popover__body\", props.className),\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\";\n}\n\nexport var PopoverFooter = function PopoverFooter(props) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({}, props, {\n    className: cx(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  }));\n};\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\";\n}\n\nexport var PopoverCloseButton = function PopoverCloseButton(props) {\n  var _usePopoverContext5 = usePopoverContext(),\n      onClose = _usePopoverContext5.onClose;\n\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    borderRadius: \"md\",\n    top: \"0.25rem\",\n    insetEnd: \"0.5rem\",\n    padding: \"0.5rem\"\n  }, props));\n};\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\";\n}\n\nexport var PopoverArrow = function PopoverArrow(props) {\n  var _ref;\n\n  var bg = props.bg,\n      bgColor = props.bgColor,\n      backgroundColor = props.backgroundColor;\n\n  var _usePopoverContext6 = usePopoverContext(),\n      getArrowProps = _usePopoverContext6.getArrowProps,\n      getArrowInnerProps = _usePopoverContext6.getArrowInnerProps;\n\n  var styles = useStyles();\n  var arrowBg = (_ref = bg != null ? bg : bgColor) != null ? _ref : backgroundColor;\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getArrowProps(), {\n    className: \"chakra-popover__arrow-positioner\"\n  }), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-popover__arrow\", props.className)\n  }, getArrowInnerProps(props), {\n    __css: _extends({}, styles.arrow, {\n      \"--popper-arrow-bg\": arrowBg ? \"colors.\" + arrowBg + \", \" + arrowBg : undefined\n    })\n  })));\n};\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\";\n}","map":{"version":3,"mappings":"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","names":["CloseButton","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","runIfFn","__DEV__","React","PopoverProvider","usePopoverContext","PopoverTransition","usePopover","Popover","props","styles","children","rest","context","value","isOpen","onClose","forceUpdate","displayName","PopoverTrigger","child","Children","only","getTriggerProps","cloneElement","ref","PopoverContent","rootProps","contentProps","_objectWithoutPropertiesLoose","getPopoverProps","getPopoverPositionerProps","contentStyles","position","display","flexDirection","content","div","__css","popper","className","PopoverHeader","getHeaderProps","header","PopoverBody","getBodyProps","body","PopoverFooter","footer","PopoverCloseButton","size","onClick","borderRadius","top","insetEnd","padding","PopoverArrow","bg","bgColor","backgroundColor","getArrowProps","getArrowInnerProps","arrowBg","arrow","undefined"],"sources":["../../src/popover.tsx"],"sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { PopoverProvider, usePopoverContext } from \"./popover-context\"\nimport { PopoverTransition, PopoverTransitionProps } from \"./popover-transition\"\nimport { usePopover, UsePopoverProps } from \"./use-popover\"\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n  rootProps?: HTMLChakraProps<\"div\">\n}\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  (props, ref) => {\n    const { rootProps, ...contentProps } = props\n\n    const { getPopoverProps, getPopoverPositionerProps } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.div\n        {...getPopoverPositionerProps(rootProps)}\n        __css={styles.popper}\n        className=\"chakra-popover__popper\"\n      >\n        <PopoverTransition\n          {...getPopoverProps(contentProps, ref)}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  (props, ref) => {\n    const { getHeaderProps } = usePopoverContext()\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...getHeaderProps(props, ref)}\n        className={cx(\"chakra-popover__header\", props.className)}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">((props, ref) => {\n  const { getBodyProps } = usePopoverContext()\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...getBodyProps(props, ref)}\n      className={cx(\"chakra-popover__body\", props.className)}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      insetEnd=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { bg, bgColor, backgroundColor } = props\n  const { getArrowProps, getArrowInnerProps } = usePopoverContext()\n  const styles = useStyles()\n  const arrowBg = bg ?? bgColor ?? backgroundColor\n  return (\n    <chakra.div\n      {...getArrowProps()}\n      className=\"chakra-popover__arrow-positioner\"\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowInnerProps(props)}\n        __css={{\n          ...styles.arrow,\n          \"--popper-arrow-bg\": arrowBg\n            ? `colors.${arrowBg}, ${arrowBg}`\n            : undefined,\n        }}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"]},"metadata":{},"sourceType":"module"}