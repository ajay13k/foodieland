{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\";\nvar STATUSES = {\n  info: {\n    icon: InfoIcon,\n    colorScheme: \"blue\"\n  },\n  warning: {\n    icon: WarningIcon,\n    colorScheme: \"orange\"\n  },\n  success: {\n    icon: CheckIcon,\n    colorScheme: \"green\"\n  },\n  error: {\n    icon: WarningIcon,\n    colorScheme: \"red\"\n  }\n};\n\nvar _createContext = createContext({\n  name: \"AlertContext\",\n  errorMessage: \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    AlertProvider = _createContext2[0],\n    useAlertContext = _createContext2[1];\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\n\n\nexport var Alert = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$colorScheme;\n\n  var _omitThemingProps = omitThemingProps(props),\n      _omitThemingProps$sta = _omitThemingProps.status,\n      status = _omitThemingProps$sta === void 0 ? \"info\" : _omitThemingProps$sta,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"status\"]);\n\n  var colorScheme = (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : STATUSES[status].colorScheme;\n  var styles = useMultiStyleConfig(\"Alert\", _extends({}, props, {\n    colorScheme: colorScheme\n  }));\n\n  var alertStyles = _extends({\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\"\n  }, styles.container);\n\n  return /*#__PURE__*/React.createElement(AlertProvider, {\n    value: {\n      status: status\n    }\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"alert\",\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-alert\", props.className),\n    __css: alertStyles\n  }))));\n});\nexport var AlertTitle = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__title\", props.className),\n    __css: styles.title\n  }));\n});\nexport var AlertDescription = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n\n  var descriptionStyles = _extends({\n    display: \"inline\"\n  }, styles.description);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__desc\", props.className),\n    __css: descriptionStyles\n  }));\n});\nexport var AlertIcon = function AlertIcon(props) {\n  var _useAlertContext = useAlertContext(),\n      status = _useAlertContext.status;\n\n  var BaseIcon = STATUSES[status].icon;\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    display: \"inherit\"\n  }, props, {\n    className: cx(\"chakra-alert__icon\", props.className),\n    __css: styles.icon\n  }), /*#__PURE__*/React.createElement(BaseIcon, {\n    w: \"100%\",\n    h: \"100%\"\n  }));\n};","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","createContext","React","CheckIcon","InfoIcon","WarningIcon","STATUSES","info","icon","colorScheme","warning","success","error","name","errorMessage","AlertProvider","useAlertContext","Alert","props","ref","status","rest","styles","alertStyles","width","display","alignItems","position","overflow","container","value","div","role","className","__css","AlertTitle","title","AlertDescription","descriptionStyles","description","AlertIcon","BaseIcon","span","w","h"],"sources":["../../src/alert.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\"\n\nconst STATUSES = {\n  info: { icon: InfoIcon, colorScheme: \"blue\" },\n  warning: { icon: WarningIcon, colorScheme: \"orange\" },\n  success: { icon: CheckIcon, colorScheme: \"green\" },\n  error: { icon: WarningIcon, colorScheme: \"red\" },\n}\n\nexport type AlertStatus = keyof typeof STATUSES\n\ninterface AlertContext {\n  status: AlertStatus\n}\n\nconst [AlertProvider, useAlertContext] = createContext<AlertContext>({\n  name: \"AlertContext\",\n  errorMessage:\n    \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\",\n})\n\ninterface AlertOptions {\n  /**\n   * The status of the alert\n   */\n  status?: AlertStatus\n}\n\nexport interface AlertProps\n  extends HTMLChakraProps<\"div\">,\n    AlertOptions,\n    ThemingProps<\"Alert\"> {}\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\nexport const Alert = forwardRef<AlertProps, \"div\">((props, ref) => {\n  const { status = \"info\", ...rest } = omitThemingProps(props)\n  const colorScheme = props.colorScheme ?? STATUSES[status].colorScheme\n\n  const styles = useMultiStyleConfig(\"Alert\", { ...props, colorScheme })\n\n  const alertStyles: SystemStyleObject = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container,\n  }\n\n  return (\n    <AlertProvider value={{ status }}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"alert\"\n          ref={ref}\n          {...rest}\n          className={cx(\"chakra-alert\", props.className)}\n          __css={alertStyles}\n        />\n      </StylesProvider>\n    </AlertProvider>\n  )\n})\n\nexport interface AlertTitleProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertTitle = forwardRef<AlertTitleProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-alert__title\", props.className)}\n      __css={styles.title}\n    />\n  )\n})\n\nexport interface AlertDescriptionProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertDescription = forwardRef<AlertDescriptionProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    const descriptionStyles: SystemStyleObject = {\n      display: \"inline\",\n      ...styles.description,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-alert__desc\", props.className)}\n        __css={descriptionStyles}\n      />\n    )\n  },\n)\n\nexport interface AlertIconProps extends HTMLChakraProps<\"span\"> {}\n\nexport const AlertIcon: React.FC<AlertIconProps> = (props) => {\n  const { status } = useAlertContext()\n  const { icon: BaseIcon } = STATUSES[status]\n  const styles = useStyles()\n\n  return (\n    <chakra.span\n      display=\"inherit\"\n      {...props}\n      className={cx(\"chakra-alert__icon\", props.className)}\n      __css={styles.icon}\n    >\n      <BaseIcon w=\"100%\" h=\"100%\" />\n    </chakra.span>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}