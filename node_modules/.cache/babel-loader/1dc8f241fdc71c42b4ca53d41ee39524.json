{"ast":null,"code":"/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport var findById = function findById(arr, id) {\n  return arr.find(function (toast) {\n    return toast.id === id;\n  });\n};\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\n\nexport function findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(function (toast) {\n    return toast.id === id;\n  }) : -1;\n  return {\n    position: position,\n    index: index\n  };\n}\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\n\nexport var getToastPosition = function getToastPosition(toasts, id) {\n  var _Object$values$flat$f;\n\n  return (_Object$values$flat$f = Object.values(toasts).flat().find(function (toast) {\n    return toast.id === id;\n  })) == null ? void 0 : _Object$values$flat$f.position;\n};\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\n\nexport var isVisible = function isVisible(toasts, id) {\n  return !!getToastPosition(toasts, id);\n};\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\n\nexport function getToastStyle(position) {\n  var isRighty = position.includes(\"right\");\n  var isLefty = position.includes(\"left\");\n  var alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: alignItems\n  };\n}","map":{"version":3,"mappings":"AAEA;AACA;AACA;AACA;AACA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAsBC,EAAtB;EAAA,OACtBD,GAAG,CAACE,IAAJF,CAAUG,eAAD;IAAA,OAAWA,KAAK,CAACF,EAANE,KAAaF,EAAxB;EAAA,CAATD,CADsB;AAAA,CAAjB;AAGP;AACA;AACA;AACA;;AACA,OAAO,SAASI,SAAT,CAAmBC,MAAnB,EAAuCJ,EAAvC,EAAoD;EACzD,IAAMK,QAAQ,GAAGC,gBAAgB,CAACF,MAAD,EAASJ,EAAT,CAAjC;EAEA,IAAMO,KAAK,GAAGF,QAAQ,GAClBD,MAAM,CAACC,QAAD,CAAND,CAAiBI,SAAjBJ,CAA4BF,eAAD;IAAA,OAAWA,KAAK,CAACF,EAANE,KAAaF,EAAxB;EAAA,CAA3BI,CADkB,GAElB,CAAC,CAFL;EAIA,OAAO;IACLC,QADK,EACLA,QADK;IAELE;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;;AACA,OAAO,IAAMD,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,MAAD,EAAqBJ,EAArB;EAAA;;EAAA,gCAC9BS,MAAM,CAACC,MAAPD,CAAcL,MAAdK,EACGE,IADHF,GAEGR,IAFHQ,CAESP,eAAD;IAAA,OAAWA,KAAK,CAACF,EAANE,KAAaF,EAAxB;EAAA,CAFRS,CAD8B,qBAC9BG,sBAEqCP,QAHP;AAAzB;AAKP;AACA;AACA;AACA;;AACA,OAAO,IAAMQ,SAAS,GAAG,SAAZA,SAAY,CAACT,MAAD,EAAqBJ,EAArB;EAAA,OACvB,CAAC,CAACM,gBAAgB,CAACF,MAAD,EAASJ,EAAT,CADK;AAAA,CAAlB;AAGP;AACA;AACA;AACA;;AACA,OAAO,SAASc,aAAT,CAAuBT,QAAvB,EAAqE;EAC1E,IAAMU,QAAQ,GAAGV,QAAQ,CAACW,QAATX,CAAkB,OAAlBA,CAAjB;EACA,IAAMY,OAAO,GAAGZ,QAAQ,CAACW,QAATX,CAAkB,MAAlBA,CAAhB;EAEA,IAAIa,UAAU,GAAG,QAAjB;EACA,IAAIH,QAAJ,EAAcG,UAAU,GAAG,UAAbA;EACd,IAAID,OAAJ,EAAaC,UAAU,GAAG,YAAbA;EAEb,OAAO;IACLC,OAAO,EAAE,MADJ;IAELC,aAAa,EAAE,QAFV;IAGLF;EAHK,CAAP;AAKD","names":["findById","arr","id","find","toast","findToast","toasts","position","getToastPosition","index","findIndex","Object","values","flat","_Object$values$flat$f","isVisible","getToastStyle","isRighty","includes","isLefty","alignItems","display","flexDirection"],"sources":["../../src/toast.utils.ts"],"sourcesContent":["import { ToastPosition, ToastOptions, ToastState, ToastId } from \"./toast.types\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport const findById = (arr: ToastOptions[], id: ToastId) =>\n  arr.find((toast) => toast.id === id)\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id === id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport const getToastPosition = (toasts: ToastState, id: ToastId) =>\n  Object.values(toasts)\n    .flat()\n    .find((toast) => toast.id === id)?.position\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\nexport const isVisible = (toasts: ToastState, id: ToastId) =>\n  !!getToastPosition(toasts, id)\n\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\nexport function getToastStyle(position: ToastPosition): React.CSSProperties {\n  const isRighty = position.includes(\"right\")\n  const isLefty = position.includes(\"left\")\n\n  let alignItems = \"center\"\n  if (isRighty) alignItems = \"flex-end\"\n  if (isLefty) alignItems = \"flex-start\"\n\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}