{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUnmountEffect, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { addItem, callAllHandlers, dataAttr, determineLazyBehavior, focus, getNextItemFromSearch, getOwnerDocument, isActiveElement, isArray, isString, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nvar _createDescendantCont = createDescendantContext(),\n    _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n    MenuDescendantsProvider = _createDescendantCont2[0],\n    useMenuDescendantsContext = _createDescendantCont2[1],\n    useMenuDescendants = _createDescendantCont2[2],\n    useMenuDescendant = _createDescendantCont2[3];\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\n\nexport { MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant };\n\nvar _createContext = createContext({\n  strict: false,\n  name: \"MenuContext\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    MenuProvider = _createContext2[0],\n    useMenuContext = _createContext2[1];\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\n\n\nexport { MenuProvider, useMenuContext };\nexport function useMenu(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      id = _props.id,\n      _props$closeOnSelect = _props.closeOnSelect,\n      closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n      _props$closeOnBlur = _props.closeOnBlur,\n      closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n      _props$autoSelect = _props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect,\n      isLazy = _props.isLazy,\n      isOpenProp = _props.isOpen,\n      defaultIsOpen = _props.defaultIsOpen,\n      onCloseProp = _props.onClose,\n      onOpenProp = _props.onOpen,\n      _props$placement = _props.placement,\n      placement = _props$placement === void 0 ? \"bottom-start\" : _props$placement,\n      _props$lazyBehavior = _props.lazyBehavior,\n      lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n      popperProps = _objectWithoutPropertiesLoose(props, [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\"]);\n\n  var _useDisclosure = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen: defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp\n  }),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose,\n      onToggle = _useDisclosure.onToggle;\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n\n  var menuRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  useOutsideClick({\n    ref: menuRef,\n    handler: function handler(event) {\n      var _buttonRef$current;\n\n      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper(_extends({}, popperProps, {\n    enabled: isOpen,\n    placement: placement\n  }));\n\n  var _React$useState = React.useState(-1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedIndex = _React$useState2[0],\n      setFocusedIndex = _React$useState2[1];\n  /**\n   * Context to register all menu item nodes\n   */\n\n\n  var descendants = useMenuDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(function () {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var _useIds = useIds(id, \"menu-button\", \"menu-list\"),\n      _useIds2 = _slicedToArray(_useIds, 2),\n      buttonId = _useIds2[0],\n      menuId = _useIds2[1];\n\n  var openAndFocusMenu = React.useCallback(function () {\n    onOpen();\n    focus(menuRef.current, {\n      nextTick: true,\n      selectTextIfInput: false\n    });\n  }, [onOpen, menuRef]);\n  var timeoutIds = React.useRef(new Set([]));\n  useUnmountEffect(function () {\n    timeoutIds.current.forEach(function (id) {\n      return clearTimeout(id);\n    });\n    timeoutIds.current.clear();\n  });\n  var openAndFocusFirstItem = React.useCallback(function () {\n    onOpen();\n    var id = setTimeout(function () {\n      var first = descendants.firstEnabled();\n      if (first) setFocusedIndex(first.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var openAndFocusLastItem = React.useCallback(function () {\n    onOpen();\n    var id = setTimeout(function () {\n      var last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var refocus = React.useCallback(function () {\n    var _menuRef$current, _descendants$item;\n\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var node = (_descendants$item = descendants.item(focusedIndex)) == null ? void 0 : _descendants$item.node;\n\n    if (node) {\n      focus(node, {\n        selectTextIfInput: false\n      });\n    }\n  }, [isOpen, focusedIndex, descendants]);\n  return {\n    openAndFocusMenu: openAndFocusMenu,\n    openAndFocusFirstItem: openAndFocusFirstItem,\n    openAndFocusLastItem: openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    descendants: descendants,\n    popper: popper,\n    buttonId: buttonId,\n    menuId: menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen: isOpen,\n    onToggle: onToggle,\n    onOpen: onOpen,\n    onClose: onClose,\n    menuRef: menuRef,\n    buttonRef: buttonRef,\n    focusedIndex: focusedIndex,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    autoSelect: autoSelect,\n    setFocusedIndex: setFocusedIndex,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior\n  };\n}\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport function useMenuButton(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var menu = useMenuContext();\n  var isOpen = menu.isOpen,\n      onClose = menu.onClose,\n      autoSelect = menu.autoSelect,\n      popper = menu.popper,\n      openAndFocusFirstItem = menu.openAndFocusFirstItem,\n      openAndFocusLastItem = menu.openAndFocusLastItem,\n      openAndFocusMenu = menu.openAndFocusMenu;\n  var onClick = React.useCallback(function () {\n    if (isOpen) {\n      onClose();\n    } else {\n      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;\n      action();\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);\n  var onKeyDown = React.useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _extends({}, props, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n\nfunction isTargetMenuItem(event) {\n  var _target$getAttribute;\n\n  var target = event.target; // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n\n  return !!((_target$getAttribute = target.getAttribute(\"role\")) != null && _target$getAttribute.startsWith(\"menuitem\"));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\n\nexport function useMenuList(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n\n  var focusedIndex = menu.focusedIndex,\n      setFocusedIndex = menu.setFocusedIndex,\n      menuRef = menu.menuRef,\n      isOpen = menu.isOpen,\n      onClose = menu.onClose,\n      menuId = menu.menuId,\n      isLazy = menu.isLazy,\n      lazyBehavior = menu.lazyBehavior;\n  var descendants = useMenuDescendantsContext();\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var createTypeaheadHandler = useShortcut({\n    preventDefault: function preventDefault(event) {\n      return event.key !== \" \" && isTargetMenuItem(event);\n    }\n  });\n  var onKeyDown = React.useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: function Tab(event) {\n        return event.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: function ArrowDown() {\n        var next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: function ArrowUp() {\n        var prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    var fn = keyMap[eventKey];\n\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    /**\n     * Typeahead: Based on current character pressed,\n     * find the next item to be selected\n     */\n\n\n    var onTypeahead = createTypeaheadHandler(function (character) {\n      var nextItem = getNextItemFromSearch(descendants.values(), character, function (item) {\n        var _item$node$textConten, _item$node;\n\n        return (_item$node$textConten = item == null ? void 0 : (_item$node = item.node) == null ? void 0 : _item$node.textContent) != null ? _item$node$textConten : \"\";\n      }, descendants.item(focusedIndex));\n\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n\n    if (isTargetMenuItem(event)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  var hasBeenOpened = React.useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior,\n    isSelected: isOpen\n  });\n  return _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _useMenuContext = useMenuContext(),\n      popper = _useMenuContext.popper,\n      isOpen = _useMenuContext.isOpen;\n\n  return popper.getPopperProps(_extends({}, props, {\n    style: _extends({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuItem(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var _props2 = props,\n      onMouseEnterProp = _props2.onMouseEnter,\n      onMouseMoveProp = _props2.onMouseMove,\n      onMouseLeaveProp = _props2.onMouseLeave,\n      onClickProp = _props2.onClick,\n      isDisabled = _props2.isDisabled,\n      isFocusable = _props2.isFocusable,\n      closeOnSelect = _props2.closeOnSelect,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\"]);\n\n  var menu = useMenuContext();\n  var setFocusedIndex = menu.setFocusedIndex,\n      focusedIndex = menu.focusedIndex,\n      menuCloseOnSelect = menu.closeOnSelect,\n      onClose = menu.onClose,\n      menuRef = menu.menuRef,\n      isOpen = menu.isOpen,\n      menuId = menu.menuId;\n  var ref = React.useRef(null);\n  var id = menuId + \"-menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var _useMenuDescendant = useMenuDescendant({\n    disabled: isDisabled && !isFocusable\n  }),\n      index = _useMenuDescendant.index,\n      register = _useMenuDescendant.register;\n\n  var onMouseEnter = React.useCallback(function (event) {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = React.useCallback(function (event) {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = React.useCallback(function (event) {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = React.useCallback(function (event) {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event)) return;\n    /**\n     * Close menu and parent menus, allowing the MenuItem\n     * to override its parent menu's `closeOnSelect` prop.\n     */\n\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(function () {\n    if (!isOpen) return;\n\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true,\n        selectTextIfInput: false\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current);\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled: isDisabled,\n    isFocusable: isFocusable\n  });\n  return _extends({}, htmlProps, clickableProps, {\n    id: id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOption(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var _props3 = props,\n      _props3$type = _props3.type,\n      type = _props3$type === void 0 ? \"radio\" : _props3$type,\n      isChecked = _props3.isChecked,\n      rest = _objectWithoutPropertiesLoose(props, [\"type\", \"isChecked\"]);\n\n  var ownProps = useMenuItem(rest, ref);\n  return _extends({}, ownProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOptionGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props4 = props,\n      children = _props4.children,\n      _props4$type = _props4.type,\n      type = _props4$type === void 0 ? \"radio\" : _props4$type,\n      valueProp = _props4.value,\n      defaultValue = _props4.defaultValue,\n      onChangeProp = _props4.onChange,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n\n  var _useControllableState = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      value = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n\n  var onChange = React.useCallback(function (selectedValue) {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    var onClick = function onClick(event) {\n      onChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/React.cloneElement(child, {\n      type: type,\n      onClick: onClick,\n      isChecked: isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var _useMenuContext2 = useMenuContext(),\n      isOpen = _useMenuContext2.isOpen,\n      onClose = _useMenuContext2.onClose;\n\n  return {\n    isOpen: isOpen,\n    onClose: onClose\n  };\n}","map":{"version":3,"mappings":"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","names":["useClickable","createDescendantContext","useControllableState","useDisclosure","useFocusOnHide","useId","useIds","useOutsideClick","useShortcut","useUnmountEffect","useUpdateEffect","usePopper","createContext","getValidChildren","mergeRefs","addItem","callAllHandlers","dataAttr","determineLazyBehavior","focus","getNextItemFromSearch","getOwnerDocument","isActiveElement","isArray","isString","normalizeEventKey","removeItem","React","MenuDescendantsProvider","useMenuDescendantsContext","useMenuDescendants","useMenuDescendant","strict","name","MenuProvider","useMenuContext","useMenu","props","id","closeOnSelect","closeOnBlur","autoSelect","isLazy","isOpenProp","isOpen","defaultIsOpen","onCloseProp","onClose","onOpenProp","onOpen","placement","lazyBehavior","popperProps","onToggle","menuRef","useRef","buttonRef","ref","handler","event","current","_buttonRef$current","contains","target","popper","enabled","useState","focusedIndex","setFocusedIndex","descendants","focusRef","visible","shouldFocus","buttonId","menuId","openAndFocusMenu","useCallback","nextTick","selectTextIfInput","timeoutIds","Set","forEach","clearTimeout","clear","openAndFocusFirstItem","setTimeout","first","firstEnabled","index","add","openAndFocusLastItem","last","lastEnabled","refocus","doc","hasFocusWithin","_menuRef$current","activeElement","shouldRefocus","node","item","_descendants$item","onTransitionEnd","forceUpdate","orientation","useMenuButton","externalRef","menu","onClick","action","onKeyDown","eventKey","keyMap","Enter","ArrowDown","ArrowUp","preventDefault","stopPropagation","referenceRef","isTargetMenuItem","getAttribute","_target$getAttribute","startsWith","useMenuList","Error","createTypeaheadHandler","key","Tab","Escape","next","nextEnabled","prev","prevEnabled","fn","onTypeahead","character","nextItem","values","_item$node","textContent","indexOf","hasBeenOpened","shouldRenderChildren","hasBeenSelected","isSelected","children","tabIndex","role","style","transformOrigin","useMenuPositioner","getPopperProps","visibility","useMenuItem","onMouseEnterProp","onMouseEnter","onMouseMoveProp","onMouseMove","onMouseLeaveProp","onMouseLeave","onClickProp","isDisabled","isFocusable","htmlProps","menuCloseOnSelect","disabled","register","isFocused","trulyDisabled","clickableProps","useMenuOption","type","isChecked","rest","ownProps","useMenuOptionGroup","valueProp","value","defaultValue","onChangeProp","onChange","isRadio","fallback","setValue","selectedValue","nextValue","includes","validChildren","clones","map","child","cloneElement","useMenuState"],"sources":["../../src/use-menu.ts"],"sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  UseDisclosureProps,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUnmountEffect,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  addItem,\n  callAllHandlers,\n  dataAttr,\n  determineLazyBehavior,\n  focus,\n  getNextItemFromSearch,\n  getOwnerDocument,\n  isActiveElement,\n  isArray,\n  isString,\n  LazyBehavior,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps extends UsePopperProps, UseDisclosureProps {\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    ...popperProps\n  } = props\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n  })\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = React.useRef<HTMLDivElement>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    ref: menuRef,\n    handler: (event) => {\n      if (\n        isOpen &&\n        closeOnBlur &&\n        !buttonRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    ...popperProps,\n    enabled: isOpen,\n    placement,\n  })\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = React.useCallback(() => {\n    onOpen()\n    focus(menuRef.current, {\n      nextTick: true,\n      selectTextIfInput: false,\n    })\n  }, [onOpen, menuRef])\n\n  const timeoutIds = React.useRef<Set<number>>(new Set([]))\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  const openAndFocusFirstItem = React.useCallback(() => {\n    onOpen()\n    const id = setTimeout(() => {\n      const first = descendants.firstEnabled()\n      if (first) setFocusedIndex(first.index)\n    })\n    timeoutIds.current.add(id)\n  }, [onOpen, setFocusedIndex, descendants])\n\n  const openAndFocusLastItem = React.useCallback(() => {\n    onOpen()\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [onOpen, setFocusedIndex, descendants])\n\n  const refocus = React.useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    if (node) {\n      focus(node, { selectTextIfInput: false })\n    }\n  }, [isOpen, focusedIndex, descendants])\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu,\n  } = menu\n\n  const onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      const action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu\n      action()\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu])\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(event: Pick<MouseEvent, \"target\">) {\n  const target = event.target as HTMLElement\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return !!target.getAttribute(\"role\")?.startsWith(\"menuitem\")\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) => event.key !== \" \" && isTargetMenuItem(event),\n  })\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = React.useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n  } = menu\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = React.useCallback(\n    (event) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = React.useCallback(\n    (event) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = React.useCallback(\n    (event) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, { nextTick: true, selectTextIfInput: false })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current)\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = React.useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}