{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createTransform } from \"./create-transform\";\nimport { logical, toConfig } from \"./prop-config\";\nimport { transformFunctions as transforms } from \"./transform-functions\";\nexport { transforms };\nexport * from \"./types\";\nexport var t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", transforms.px),\n  space: toConfig(\"space\", transforms.px),\n  spaceT: toConfig(\"space\", transforms.px),\n  degreeT: function degreeT(property) {\n    return {\n      property: property,\n      transform: transforms.degree\n    };\n  },\n  prop: function prop(property, scale, transform) {\n    return _extends({\n      property: property,\n      scale: scale\n    }, scale && {\n      transform: createTransform({\n        scale: scale,\n        transform: transform\n      })\n    });\n  },\n  propT: function propT(property, transform) {\n    return {\n      property: property,\n      transform: transform\n    };\n  },\n  sizes: toConfig(\"sizes\", transforms.px),\n  sizesT: toConfig(\"sizes\", transforms.fraction),\n  shadows: toConfig(\"shadows\"),\n  logical: logical,\n  blur: toConfig(\"blur\", transforms.blur)\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AACA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,OAAT,EAA8BC,QAA9B,QAA8C,eAA9C;AACA,SAASC,kBAAkB,IAAIC,UAA/B,QAAiD,uBAAjD;AAEA,SAASA,UAAT;AAEA,cAAc,SAAd;AAEA,OAAO,IAAMC,CAAC,GAAG;EACfC,YAAY,EAAEJ,QAAQ,CAAC,cAAD,CADP;EAEfK,YAAY,EAAEL,QAAQ,CAAC,cAAD,CAFP;EAGfM,MAAM,EAAEN,QAAQ,CAAC,QAAD,CAHD;EAIfO,OAAO,EAAEP,QAAQ,CAAC,SAAD,CAJF;EAKfQ,KAAK,EAAER,QAAQ,CAAC,OAAD,EAAUE,UAAU,CAACO,EAArB,CALA;EAMfC,KAAK,EAAEV,QAAQ,CAAC,OAAD,EAAUE,UAAU,CAACO,EAArB,CANA;EAOfE,MAAM,EAAEX,QAAQ,CAAC,OAAD,EAAUE,UAAU,CAACO,EAArB,CAPD;EAQfG,OARe,mBAQPC,QARO,EAQ2B;IACxC,OAAO;MAAEA,QAAF,EAAEA,QAAF;MAAYC,SAAS,EAAEZ,UAAU,CAACa;IAAlC,CAAP;EATa;EAWfC,IAXe,gBAYbH,QAZa,EAabI,KAba,EAcbH,SAda,EAeb;IACA;MACED,QADF,EACEA,QADF;MAEEI;IAFF,GAGMA,KAAK,IAAI;MACXH,SAAS,EAAEhB,eAAe,CAAC;QAAEmB,KAAF,EAAEA,KAAF;QAASH;MAAT,CAAD;IADf,CAHf;EAhBa;EAwBfI,KAxBe,iBAwBTL,QAxBS,EAwByBC,SAxBzB,EAwB8D;IAC3E,OAAO;MAAED,QAAF,EAAEA,QAAF;MAAYC;IAAZ,CAAP;EAzBa;EA2BfK,KAAK,EAAEnB,QAAQ,CAAC,OAAD,EAAUE,UAAU,CAACO,EAArB,CA3BA;EA4BfW,MAAM,EAAEpB,QAAQ,CAAC,OAAD,EAAUE,UAAU,CAACmB,QAArB,CA5BD;EA6BfC,OAAO,EAAEtB,QAAQ,CAAC,SAAD,CA7BF;EA8BfD,OA9Be,EA8BfA,OA9Be;EA+BfwB,IAAI,EAAEvB,QAAQ,CAAC,MAAD,EAASE,UAAU,CAACqB,IAApB;AA/BC,CAAV","names":["createTransform","logical","toConfig","transformFunctions","transforms","t","borderWidths","borderStyles","colors","borders","radii","px","space","spaceT","degreeT","property","transform","degree","prop","scale","propT","sizes","sizesT","fraction","shadows","blur"],"sources":["../../../src/utils/index.ts"],"sourcesContent":["import type { ThemeScale } from \"../create-theme-vars\"\nimport { createTransform } from \"./create-transform\"\nimport { logical, PropConfig, toConfig } from \"./prop-config\"\nimport { transformFunctions as transforms } from \"./transform-functions\"\n\nexport { transforms }\n\nexport * from \"./types\"\n\nexport const t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", transforms.px),\n  space: toConfig(\"space\", transforms.px),\n  spaceT: toConfig(\"space\", transforms.px),\n  degreeT(property: PropConfig[\"property\"]) {\n    return { property, transform: transforms.degree }\n  },\n  prop(\n    property: PropConfig[\"property\"],\n    scale?: ThemeScale,\n    transform?: PropConfig[\"transform\"],\n  ) {\n    return {\n      property,\n      scale,\n      ...(scale && {\n        transform: createTransform({ scale, transform }),\n      }),\n    }\n  },\n  propT(property: PropConfig[\"property\"], transform?: PropConfig[\"transform\"]) {\n    return { property, transform }\n  },\n  sizes: toConfig(\"sizes\", transforms.px),\n  sizesT: toConfig(\"sizes\", transforms.fraction),\n  shadows: toConfig(\"shadows\"),\n  logical,\n  blur: toConfig(\"blur\", transforms.blur),\n}\n"]},"metadata":{},"sourceType":"module"}