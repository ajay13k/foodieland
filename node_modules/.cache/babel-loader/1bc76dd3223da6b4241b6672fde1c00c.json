{"ast":null,"code":"export function getOwnerWindow(node) {\n  var _getOwnerDocument$def, _getOwnerDocument;\n\n  return node instanceof Element ? (_getOwnerDocument$def = (_getOwnerDocument = getOwnerDocument(node)) == null ? void 0 : _getOwnerDocument.defaultView) != null ? _getOwnerDocument$def : window : window;\n}\nexport function getOwnerDocument(node) {\n  var _node$ownerDocument;\n\n  return node instanceof Element ? (_node$ownerDocument = node.ownerDocument) != null ? _node$ownerDocument : document : document;\n}\nexport function canUseDOM() {\n  return !!(typeof window !== \"undefined\" && window.document && window.document.createElement);\n}\nexport var isBrowser = canUseDOM();\nexport var dataAttr = function dataAttr(condition) {\n  return condition ? \"\" : undefined;\n};\nexport var ariaAttr = function ariaAttr(condition) {\n  return condition ? true : undefined;\n};\nexport var cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n\n  return classNames.filter(Boolean).join(\" \");\n};\nexport function getActiveElement(node) {\n  var doc = getOwnerDocument(node);\n  return doc == null ? void 0 : doc.activeElement;\n}\nexport function contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\nexport function addDomEvent(target, eventName, handler, options) {\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    target.removeEventListener(eventName, handler, options);\n  };\n}\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\n\nexport function normalizeEventKey(event) {\n  var key = event.key,\n      keyCode = event.keyCode;\n  var isArrowKey = keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0;\n  var eventKey = isArrowKey ? \"Arrow\" + key : key;\n  return eventKey;\n}\nexport function getRelatedTarget(event) {\n  var _event$target, _ref, _event$relatedTarget;\n\n  var target = (_event$target = event.target) != null ? _event$target : event.currentTarget;\n  var activeElement = getActiveElement(target);\n  var originalTarget = event.nativeEvent.explicitOriginalTarget;\n  return (_ref = (_event$relatedTarget = event.relatedTarget) != null ? _event$relatedTarget : originalTarget) != null ? _ref : activeElement;\n}\nexport function isRightClick(event) {\n  return event.button !== 0;\n}","map":{"version":3,"mappings":"AAEA,OAAO,SAASA,cAAT,CAAwBC,IAAxB,EAA2D;EAAA;;EAChE,OAAOA,IAAI,YAAYC,OAAhBD,iDACHE,gBAAgB,CAACF,IAAD,CADb,qBACHG,kBAAwBC,WADrB,oCACoCC,MADpCL,GAEHK,MAFJ;AAGD;AAED,OAAO,SAASH,gBAAT,CAA0BF,IAA1B,EAA+D;EAAA;;EACpE,OAAOA,IAAI,YAAYC,OAAhBD,0BAA0BA,IAAI,CAACM,aAA/B,kCAAgDC,QAAhDP,GAA2DO,QAAlE;AACD;AAED,OAAO,SAASC,SAAT,GAA8B;EACnC,OAAO,CAAC,EACN,OAAOH,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACE,QADP,IAEAF,MAAM,CAACE,QAAPF,CAAgBI,aAHV,CAAR;AAKD;AAED,OAAO,IAAMC,SAAS,GAAGF,SAAS,EAA3B;AAEP,OAAO,IAAMG,QAAQ,GAAIC,SAAZD,QAAYC,UAAD;EAAA,OACrBA,SAAS,GAAG,EAAH,GAAQC,SADI;AAAA,CAAjB;AAGP,OAAO,IAAMC,QAAQ,GAAIF,SAAZE,QAAYF,UAAD;EAAA,OACtBA,SAAS,GAAG,IAAH,GAAUC,SADG;AAAA,CAAjB;AAGP,OAAO,IAAME,EAAE,GAAG,SAALA,EAAK;EAAA,kCAAIC,UAAJ;IAAIA,UAAJ,MAAIA,GAAJC,eAAID;EAAJ;;EAAA,OAA0BA,UAAU,CAACE,MAAXF,CAAkBG,OAAlBH,EAA2BI,IAA3BJ,CAAgC,GAAhCA,CAA1B;AAAX;AAEP,OAAO,SAASK,gBAAT,CAA0BrB,IAA1B,EAA8C;EACnD,IAAMsB,GAAG,GAAGpB,gBAAgB,CAACF,IAAD,CAA5B;EACA,OAAOsB,GAAP,QAAOA,GAAP,MAAOA,MAAG,CAAEC,aAAZ;AACD;AAED,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA8CC,KAA9C,EAAkE;EACvE,IAAI,CAACD,MAAL,EAAa,OAAO,KAAP;EACb,OAAOA,MAAM,KAAKC,KAAXD,IAAoBA,MAAM,CAACD,QAAPC,CAAgBC,KAAhBD,CAA3B;AACD;AAED,OAAO,SAASE,WAAT,CACLC,MADK,EAELC,SAFK,EAGLC,OAHK,EAILC,OAJK,EAKL;EACAH,MAAM,CAACI,gBAAPJ,CAAwBC,SAAxBD,EAAmCE,OAAnCF,EAA4CG,OAA5CH;EACA,OAAO,YAAM;IACXA,MAAM,CAACK,mBAAPL,CAA2BC,SAA3BD,EAAsCE,OAAtCF,EAA+CG,OAA/CH;EADF;AAGD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASM,iBAAT,CACLC,KADK,EAEL;EACA,IAAQC,GAAR,GAAyBD,KAAzB,CAAQC,GAAR;EAAA,IAAaC,OAAb,GAAyBF,KAAzB,CAAaE,OAAb;EAEA,IAAMC,UAAU,GACdD,OAAO,IAAI,EAAXA,IAAiBA,OAAO,IAAI,EAA5BA,IAAkCD,GAAG,CAACG,OAAJH,CAAY,OAAZA,MAAyB,CAD7D;EAGA,IAAMI,QAAQ,GAAGF,UAAU,aAAWF,GAAX,GAAmBA,GAA9C;EAEA,OAAOI,QAAP;AACD;AAED,OAAO,SAASC,gBAAT,CACLN,KADK,EAEL;EAAA;;EACA,IAAMP,MAAM,oBAAIO,KAAK,CAACP,MAAV,4BAAoBO,KAAK,CAACO,aAAtC;EACA,IAAMnB,aAAa,GAAGF,gBAAgB,CAACO,MAAD,CAAtC;EACA,IAAMe,cAAc,GAAIR,KAAD,CAAeS,WAAdT,CAA0BU,sBAAlD;EACA,uCAAQV,KAAK,CAACW,aAAd,mCAA+BH,cAA/B,mBAAiDpB,aAAjD;AACD;AAED,OAAO,SAASwB,YAAT,CAAsBZ,KAAtB,EAAkE;EACvE,OAAOA,KAAK,CAACa,MAANb,KAAiB,CAAxB;AACD","names":["getOwnerWindow","node","Element","getOwnerDocument","_getOwnerDocument","defaultView","window","ownerDocument","document","canUseDOM","createElement","isBrowser","dataAttr","condition","undefined","ariaAttr","cx","classNames","arguments","filter","Boolean","join","getActiveElement","doc","activeElement","contains","parent","child","addDomEvent","target","eventName","handler","options","addEventListener","removeEventListener","normalizeEventKey","event","key","keyCode","isArrowKey","indexOf","eventKey","getRelatedTarget","currentTarget","originalTarget","nativeEvent","explicitOriginalTarget","relatedTarget","isRightClick","button"],"sources":["../../src/dom.ts"],"sourcesContent":["import { Booleanish, EventKeys } from \"./types\"\n\nexport function getOwnerWindow(node?: HTMLElement | null): Window {\n  return node instanceof Element\n    ? getOwnerDocument(node)?.defaultView ?? window\n    : window\n}\n\nexport function getOwnerDocument(node?: HTMLElement | null): Document {\n  return node instanceof Element ? node.ownerDocument ?? document : document\n}\n\nexport function canUseDOM(): boolean {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport const isBrowser = canUseDOM()\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getOwnerDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement | null, child: HTMLElement) {\n  if (!parent) return false\n  return parent === child || parent.contains(child)\n}\n\nexport function addDomEvent(\n  target: EventTarget,\n  eventName: string,\n  handler: EventListener,\n  options?: AddEventListenerOptions,\n) {\n  target.addEventListener(eventName, handler, options)\n  return () => {\n    target.removeEventListener(eventName, handler, options)\n  }\n}\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(\n  event: Pick<KeyboardEvent, \"key\" | \"keyCode\">,\n) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport function getRelatedTarget(\n  event: Pick<FocusEvent, \"relatedTarget\" | \"target\" | \"currentTarget\">,\n) {\n  const target = (event.target ?? event.currentTarget) as HTMLElement\n  const activeElement = getActiveElement(target)\n  const originalTarget = (event as any).nativeEvent.explicitOriginalTarget\n  return (event.relatedTarget ?? originalTarget ?? activeElement) as HTMLElement\n}\n\nexport function isRightClick(event: Pick<MouseEvent, \"button\">): boolean {\n  return event.button !== 0\n}\n"]},"metadata":{},"sourceType":"module"}