{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { Global, ThemeContext, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport * as React from \"react\";\nexport var ThemeProvider = function ThemeProvider(props) {\n  var _props$cssVarsRoot = props.cssVarsRoot,\n      cssVarsRoot = _props$cssVarsRoot === void 0 ? \":host, :root\" : _props$cssVarsRoot,\n      theme = props.theme,\n      children = props.children;\n  var computedTheme = React.useMemo(function () {\n    return toCSSVar(theme);\n  }, [theme]);\n  return /*#__PURE__*/React.createElement(EmotionThemeProvider, {\n    theme: computedTheme\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      return _defineProperty({}, cssVarsRoot, theme.__cssVars);\n    }\n  }), children);\n};\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\");\n  }\n\n  return theme;\n}\n\nvar _createContext = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    StylesProvider = _createContext2[0],\n    useStyles = _createContext2[1];\n\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = function GlobalStyle() {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme: theme,\n        colorMode: colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"mappings":";;AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SACEC,GADF,EAGEC,QAHF,QAKO,0BALP;AAMA,SAAeC,WAAW,IAAIC,GAA9B,EAAmCC,OAAnC,QAAkD,kBAAlD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SACEC,MADF,EAGEC,YAHF,EAIEC,aAAa,IAAIC,oBAJnB,QAMO,gBANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAUA,OAAO,IAAMF,aAAa,GAAIG,SAAjBH,aAAiBG,MAAD,EAA+B;EAC1D,yBAA0DA,KAA1D,CAAQC,WAAR;EAAA,IAAQA,WAAR,mCAAsB,cAAtB;EAAA,IAAsCC,KAAtC,GAA0DF,KAA1D,CAAsCE,KAAtC;EAAA,IAA6CC,QAA7C,GAA0DH,KAA1D,CAA6CG,QAA7C;EACA,IAAMC,aAAa,GAAGL,KAAK,CAACM,OAANN,CAAc;IAAA,OAAMT,QAAQ,CAACY,KAAD,CAAd;EAAA,CAAdH,EAAqC,CAACG,KAAD,CAArCH,CAAtB;EACA,oBACEA,oBAACD,oBAAD;IAAsBI,KAAK,EAAEE;EAA7B,gBACEL,oBAACJ,MAAD;IAAQW,MAAM,EAAGJ,qBAAD;MAAA,2BAAoBD,WAApB,EAAkCC,KAAK,CAACK,SAAxC;IAAA;EAAhB,EADF,EAEGJ,QAFH,CADF;AAHK;AAWP,OAAO,SAASK,QAAT,GAA6C;EAClD,IAAMN,KAAK,GAAGH,KAAK,CAACU,UAANV,CACXH,YADWG,CAAd;;EAGA,IAAI,CAACG,KAAL,EAAY;IACV,MAAMQ,KAAK,CACT,kHADS,CAAX;EAGD;;EAED,OAAOR,KAAP;AACD;;AAED,qBAAoCR,aAAa,CAA0B;EACzEiB,IAAI,EAAE,eADmE;EAEzEC,YAAY,EACV;AAHuE,CAA1B,CAAjD;AAAA;AAAA,IAAOC,cAAP;AAAA,IAAuBC,SAAvB;;AAKA,SAASD,cAAT,EAAyBC,SAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;EAC/B,oBAAsB3B,YAAY,EAAlC;EAAA,IAAQ4B,SAAR,iBAAQA,SAAR;;EACA,oBACEjB,oBAACJ,MAAD;IACEW,MAAM,EAAGJ,qBAAD,EAAgB;MACtB,IAAMe,eAAe,GAAGzB,GAAG,CAACU,KAAD,EAAQ,eAAR,CAA3B;MACA,IAAMgB,YAAY,GAAGzB,OAAO,CAACwB,eAAD,EAAkB;QAAEf,KAAF,EAAEA,KAAF;QAASc;MAAT,CAAlB,CAA5B;MACA,IAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;MACnB,IAAMb,MAAM,GAAGjB,GAAG,CAAC6B,YAAD,CAAH7B,CAAkBa,KAAlBb,CAAf;MACA,OAAOiB,MAAP;IACD;EAPH,EADF;AAFK","names":["useColorMode","css","toCSSVar","memoizedGet","get","runIfFn","createContext","Global","ThemeContext","ThemeProvider","EmotionThemeProvider","React","props","cssVarsRoot","theme","children","computedTheme","useMemo","styles","__cssVars","useTheme","useContext","Error","name","errorMessage","StylesProvider","useStyles","GlobalStyle","colorMode","styleObjectOrFn","globalStyles","undefined"],"sources":["../../src/providers.tsx"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport {\n  css,\n  SystemStyleObject,\n  toCSSVar,\n  WithCSSVar,\n} from \"@chakra-ui/styled-system\"\nimport { Dict, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeContext,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  cssVarsRoot?: string\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { cssVarsRoot = \":host, :root\", theme, children } = props\n  const computedTheme = React.useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <Global styles={(theme: any) => ({ [cssVarsRoot]: theme.__cssVars })} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}