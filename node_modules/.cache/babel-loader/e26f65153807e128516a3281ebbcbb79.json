{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport { memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useMediaQuery } from \"./use-media-query\";\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      _useMediaQuery2 = _slicedToArray(_useMediaQuery, 1),\n      show = _useMediaQuery2[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nexport var Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nexport var Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return get(theme, \"breakpoints.\" + value, value);\n};\n\nexport function useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAAeC,WAAW,IAAIC,GAA9B,EAAmCC,OAAnC,QAAkD,kBAAlD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAQA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAqC,GAAIC,SAAzCD,UAAyCC,MAAD,EAAW;EACvD,IAAQC,UAAR,GAAuCD,KAAvC,CAAQC,UAAR;EAAA,IAAoBC,IAApB,GAAuCF,KAAvC,CAAoBE,IAApB;EAAA,IAA0BC,QAA1B,GAAuCH,KAAvC,CAA0BG,QAA1B;;EACA,qBAAeL,aAAa,CAACG,UAAD,CAA5B;EAAA;EAAA,IAAOG,IAAP;;EACA,IAAMC,SAAS,GAAGH,IAAI,GAAG,CAACE,IAAJ,GAAWA,IAAjC;EAEA,IAAME,QAAQ,GAAGD,SAAS,GAAGF,QAAH,GAAc,IAAxC;EACA,OAAOG,QAAP;AANF;;AAWA,OAAO,IAAMC,IAAyB,GAAIP,SAA7BO,IAA6BP,MAAD,EAAW;EAClD,IAAQG,QAAR,GAAqBH,KAArB,CAAQG,QAAR;EACA,IAAMK,KAAK,GAAGC,QAAQ,CAACT,KAAD,CAAtB;EACA,oBACEH,oBAACE,UAAD;IAAYE,UAAU,EAAEO,KAAxB;IAA+BN,IAAI;EAAnC,GACGC,QADH,CADF;AAHK;;AAUP,IAAIP,OAAJ,EAAa;EACXW,IAAI,CAACG,WAALH,GAAmB,MAAnBA;AACD;;AASD,OAAO,IAAMI,IAAyB,GAAIX,SAA7BW,IAA6BX,MAAD,EAAW;EAClD,IAAQG,QAAR,GAAqBH,KAArB,CAAQG,QAAR;EACA,IAAMK,KAAK,GAAGC,QAAQ,CAACT,KAAD,CAAtB;EACA,oBAAOH,oBAACE,UAAD;IAAYE,UAAU,EAAEO;EAAxB,GAAgCL,QAAhC,CAAP;AAHK;;AAMP,IAAIP,OAAJ,EAAa;EACXe,IAAI,CAACD,WAALC,GAAmB,MAAnBA;AACD;;AAED,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAcC,KAAd;EAAA,OACpBnB,GAAG,CAACkB,KAAD,mBAAuBC,KAAvB,EAAgCA,KAAhC,CADiB;AAAA,CAAtB;;AASA,OAAO,SAASL,QAAT,CAAkBT,KAAlB,EAAwC;EAC7C,wBAA0CA,KAA1C,CAAQC,UAAR;EAAA,IAAQA,UAAR,kCAAqB,EAArB;EAAA,IAAyBc,KAAzB,GAA0Cf,KAA1C,CAAyBe,KAAzB;EAAA,IAAgCC,KAAhC,GAA0ChB,KAA1C,CAAgCgB,KAAhC;EAEA,IAAMH,KAAK,GAAGpB,QAAQ,EAAtB;EACA,IAAMwB,OAAO,GAAGL,aAAa,CAACC,KAAD,EAAQE,KAAR,CAA7B;EACA,IAAMG,OAAO,GAAGN,aAAa,CAACC,KAAD,EAAQG,KAAR,CAA7B;EAEA,IAAIR,KAAK,GAAGP,UAAZ;;EAEA,IAAIgB,OAAJ,EAAa;IACXT,KAAK,oBAAkBS,OAAlB,MAALT;EADF,OAEO,IAAIU,OAAJ,EAAa;IAClBV,KAAK,oBAAkBU,OAAlB,MAALV;EACD;;EAED,OAAOA,KAAP;AACD","names":["useTheme","memoizedGet","get","__DEV__","React","useMediaQuery","Visibility","props","breakpoint","hide","children","show","isVisible","rendered","Hide","query","useQuery","displayName","Show","getBreakpoint","theme","value","below","above","bpBelow","bpAbove"],"sources":["../../src/media-query.tsx"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { Dict, memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useMediaQuery } from \"./use-media-query\"\n\ninterface VisibilityProps {\n  breakpoint: string\n  hide?: boolean\n  children: React.ReactNode\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nconst Visibility: React.FC<VisibilityProps> = (props) => {\n  const { breakpoint, hide, children } = props\n  const [show] = useMediaQuery(breakpoint)\n  const isVisible = hide ? !show : show\n\n  const rendered = isVisible ? children : null\n  return rendered as React.ReactElement\n}\n\nexport type HideProps = ShowProps\n\nexport const Hide: React.FC<HideProps> = (props) => {\n  const { children } = props\n  const query = useQuery(props)\n  return (\n    <Visibility breakpoint={query} hide>\n      {children}\n    </Visibility>\n  )\n}\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\"\n}\n\nexport interface ShowProps {\n  breakpoint?: string\n  below?: string\n  above?: string\n  children?: React.ReactNode\n}\n\nexport const Show: React.FC<ShowProps> = (props) => {\n  const { children } = props\n  const query = useQuery(props)\n  return <Visibility breakpoint={query}>{children}</Visibility>\n}\n\nif (__DEV__) {\n  Show.displayName = \"Show\"\n}\n\nconst getBreakpoint = (theme: Dict, value: any) =>\n  get(theme, `breakpoints.${value}`, value)\n\nexport interface UseQueryProps {\n  breakpoint?: string\n  below?: string\n  above?: string\n}\n\nexport function useQuery(props: UseQueryProps) {\n  const { breakpoint = \"\", below, above } = props\n\n  const theme = useTheme()\n  const bpBelow = getBreakpoint(theme, below)\n  const bpAbove = getBreakpoint(theme, above)\n\n  let query = breakpoint\n\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`\n  }\n\n  return query\n}\n"]},"metadata":{},"sourceType":"module"}