{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroupContext } from \"./checkbox-group\";\nimport { CheckboxIcon } from \"./checkbox-icon\";\nimport { useCheckbox } from \"./use-checkbox\";\nvar CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0\n  }\n});\nvar Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\"\n    }\n  }\n});\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\n\nexport var Checkbox = /*#__PURE__*/forwardRef(function (props, ref) {\n  var group = useCheckboxGroupContext();\n\n  var mergedProps = _extends({}, group, props);\n\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n\n  var _ownProps$spacing = ownProps.spacing,\n      spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n      className = ownProps.className,\n      children = ownProps.children,\n      iconColor = ownProps.iconColor,\n      iconSize = ownProps.iconSize,\n      _ownProps$icon = ownProps.icon,\n      icon = _ownProps$icon === void 0 ? /*#__PURE__*/React.createElement(CheckboxIcon, null) : _ownProps$icon,\n      isCheckedProp = ownProps.isChecked,\n      _ownProps$isDisabled = ownProps.isDisabled,\n      isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n      onChangeProp = ownProps.onChange,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\"]);\n\n  var isChecked = isCheckedProp;\n\n  if (group != null && group.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  var onChange = onChangeProp;\n\n  if (group != null && group.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  var _useCheckbox = useCheckbox(_extends({}, rest, {\n    isDisabled: isDisabled,\n    isChecked: isChecked,\n    onChange: onChange\n  })),\n      state = _useCheckbox.state,\n      getInputProps = _useCheckbox.getInputProps,\n      getCheckboxProps = _useCheckbox.getCheckboxProps,\n      getLabelProps = _useCheckbox.getLabelProps,\n      getRootProps = _useCheckbox.getRootProps;\n\n  var iconStyles = React.useMemo(function () {\n    return _extends({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      transition: \"transform 200ms\",\n      fontSize: iconSize,\n      color: iconColor\n    }, styles.icon);\n  }, [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon]);\n  var clonedIcon = /*#__PURE__*/React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /*#__PURE__*/React.createElement(Label, _extends({\n    __css: styles.container,\n    className: cx(\"chakra-checkbox\", className)\n  }, getRootProps()), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-checkbox__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(CheckboxControl, _extends({\n    __css: styles.control,\n    className: \"chakra-checkbox__control\"\n  }, getCheckboxProps()), clonedIcon), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-checkbox__label\"\n  }, getLabelProps(), {\n    __css: _extends({\n      marginStart: spacing\n    }, styles.label)\n  }), children));\n});\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAIEC,gBAJF,EASEC,mBATF,QAUO,mBAVP;AAWA,SAASC,OAAT,EAAkBC,EAAlB,EAA4BC,OAA5B,QAA2C,kBAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA8C,gBAA9C;AAEA,IAAMC,eAAe,GAAGX,MAAM,CAAC,MAAD,EAAS;EACrCY,SAAS,EAAE;IACTC,OAAO,EAAE,aADA;IAETC,UAAU,EAAE,QAFH;IAGTC,cAAc,EAAE,QAHP;IAITC,aAAa,EAAE,KAJN;IAKTC,UAAU,EAAE,MALH;IAMTC,UAAU,EAAE;EANH;AAD0B,CAAT,CAA9B;AAWA,IAAMC,KAAK,GAAGnB,MAAM,CAAC,OAAD,EAAU;EAC5BY,SAAS,EAAE;IACTQ,MAAM,EAAE,SADC;IAETP,OAAO,EAAE,aAFA;IAGTC,UAAU,EAAE,QAHH;IAITE,aAAa,EAAE,KAJN;IAKTK,QAAQ,EAAE,UALD;IAMTC,SAAS,EAAE;MACTF,MAAM,EAAE;IADC;EANF;AADiB,CAAV,CAApB;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,QAAQ,gBAAGtB,UAAU,CAAyB,UAACuB,KAAD,EAAQC,GAAR,EAAgB;EACzE,IAAMC,KAAK,GAAGlB,uBAAuB,EAArC;;EAEA,IAAMmB,WAAW,gBAAQD,KAAR,EAAkBF,KAAlB,CAAjB;;EACA,IAAMI,MAAM,GAAGzB,mBAAmB,CAAC,UAAD,EAAawB,WAAb,CAAlC;EAEA,IAAME,QAAQ,GAAG3B,gBAAgB,CAACsB,KAAD,CAAjC;;EAEA,wBAWIK,QAXJ,CACEC,OADF;EAAA,IACEA,OADF,kCACY,QADZ;EAAA,IAEEC,SAFF,GAWIF,QAXJ,CAEEE,SAFF;EAAA,IAGEC,QAHF,GAWIH,QAXJ,CAGEG,QAHF;EAAA,IAIEC,SAJF,GAWIJ,QAXJ,CAIEI,SAJF;EAAA,IAKEC,QALF,GAWIL,QAXJ,CAKEK,QALF;EAAA,qBAWIL,QAXJ,CAMEM,IANF;EAAA,IAMEA,IANF,+BAMM,aAAG5B,oBAACE,YAAD,OANT;EAAA,IAOa2B,aAPb,GAWIP,QAXJ,CAOEQ,SAPF;EAAA,2BAWIR,QAXJ,CAQES,UARF;EAAA,IAQEA,UARF,qCAQeZ,KAAH,QAAGA,GAAH,MAAGA,QAAK,CAAEY,UARtB;EAAA,IASYC,YATZ,GAWIV,QAXJ,CASEW,QATF;EAAA,IAUKC,IAVL,iCAWIZ,QAXJ;;EAaA,IAAIQ,SAAS,GAAGD,aAAhB;;EACA,IAAIV,KAAK,QAALA,SAAK,CAAEgB,KAAPhB,IAAgBG,QAAQ,CAACa,KAA7B,EAAoC;IAClCL,SAAS,GAAGX,KAAK,CAACgB,KAANhB,CAAYiB,QAAZjB,CAAqBG,QAAQ,CAACa,KAA9BhB,CAAZW;EACD;;EAED,IAAIG,QAAQ,GAAGD,YAAf;;EACA,IAAIb,KAAK,QAALA,SAAK,CAAEc,QAAPd,IAAmBG,QAAQ,CAACa,KAAhC,EAAuC;IACrCF,QAAQ,GAAGpC,OAAO,CAACsB,KAAK,CAACc,QAAP,EAAiBD,YAAjB,CAAlBC;EACD;;EAED,mBAMI9B,WAAW,cACV+B,IADU;IAEbH,UAFa,EAEbA,UAFa;IAGbD,SAHa,EAGbA,SAHa;IAIbG;EAJa,GANf;EAAA,IACEI,KADF,gBACEA,KADF;EAAA,IAEEC,aAFF,gBAEEA,aAFF;EAAA,IAGEC,gBAHF,gBAGEA,gBAHF;EAAA,IAIEC,aAJF,gBAIEA,aAJF;EAAA,IAKEC,YALF,gBAKEA,YALF;;EAaA,IAAMC,UAA6B,GAAG1C,KAAK,CAAC2C,OAAN3C,CACpC;IAAA;MACE4C,OAAO,EAAEP,KAAK,CAACP,SAANO,IAAmBA,KAAK,CAACQ,eAAzBR,GAA2C,CAA3CA,GAA+C,CAD1D;MAEES,SAAS,EACPT,KAAK,CAACP,SAANO,IAAmBA,KAAK,CAACQ,eAAzBR,GAA2C,UAA3CA,GAAwD,aAH5D;MAIEU,UAAU,EAAE,iBAJd;MAKEC,QAAQ,EAAErB,QALZ;MAMEsB,KAAK,EAAEvB;IANT,GAOKL,MAAM,CAACO,IAPZ;EAAA,CADoC5B,EAUpC,CAAC0B,SAAD,EAAYC,QAAZ,EAAsBU,KAAK,CAACP,SAA5B,EAAuCO,KAAK,CAACQ,eAA7C,EAA8DxB,MAAM,CAACO,IAArE,CAVoC5B,CAAtC;EAaA,IAAMkD,UAAU,gBAAGlD,KAAK,CAACmD,YAANnD,CAAmB4B,IAAnB5B,EAAyB;IAC1CoD,KAAK,EAAEV,UADmC;IAE1CG,eAAe,EAAER,KAAK,CAACQ,eAFmB;IAG1Cf,SAAS,EAAEO,KAAK,CAACP;EAHyB,CAAzB9B,CAAnB;EAMA,oBACEA,oBAACY,KAAD;IACEwC,KAAK,EAAE/B,MAAM,CAACgC,SADhB;IAEE7B,SAAS,EAAE1B,EAAE,CAAC,iBAAD,EAAoB0B,SAApB;EAFf,GAGMiB,YAAY,EAHlB,gBAKEzC;IAAOwB,SAAS,EAAC;EAAjB,GAA8Cc,aAAa,CAAC,EAAD,EAAKpB,GAAL,CAA3D,EALF,eAMElB,oBAACI,eAAD;IACEgD,KAAK,EAAE/B,MAAM,CAACiC,OADhB;IAEE9B,SAAS,EAAC;EAFZ,GAGMe,gBAAgB,EAHtB,GAKGW,UALH,CANF,EAaGzB,QAAQ,iBACPzB,oBAACP,MAAD,CAAQ8D,IAAR;IACE/B,SAAS,EAAC;EADZ,GAEMgB,aAAa,EAFnB;IAGEY,KAAK;MACHI,WAAW,EAAEjC;IADV,GAEAF,MAAM,CAACoC,KAFP;EAHP,IAQGhC,QARH,CAdJ,CADF;AA/DgC,EAA3B;;AA6FP,IAAI1B,OAAJ,EAAa;EACXiB,QAAQ,CAAC0C,WAAT1C,GAAuB,UAAvBA;AACD","names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAll","cx","__DEV__","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","CheckboxControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","Label","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","isCheckedProp","isChecked","isDisabled","onChangeProp","onChange","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","iconStyles","useMemo","opacity","isIndeterminate","transform","transition","fontSize","color","clonedIcon","cloneElement","__css","container","control","span","marginStart","label","displayName"],"sources":["../../src/checkbox.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const iconStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform:\n        state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      transition: \"transform 200ms\",\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <Label\n      __css={styles.container}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input className=\"chakra-checkbox__input\" {...getInputProps({}, ref)} />\n      <CheckboxControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </CheckboxControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </Label>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"]},"metadata":{},"sourceType":"module"}