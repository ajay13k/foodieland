{"ast":null,"code":"import _slicedToArray from \"/home/ajay/Documents/foodieland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nexport function useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var env = useEnvironment();\n  var mediaQueries = React.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n\n  var _React$useState = React.useState(function () {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(function (_ref) {\n      var breakpoint = _ref.breakpoint;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentBreakpoint = _React$useState2[0],\n      setCurrentBreakpoint = _React$useState2[1];\n\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n            handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}","map":{"version":3,"mappings":"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","names":["useEnvironment","useTheme","React","createMediaQueries","useBreakpoint","defaultBreakpoint","breakpoints","env","mediaQueries","useMemo","base","useState","undefined","mediaQuery","find","breakpoint","currentBreakpoint","setCurrentBreakpoint","current","update","useCallback","query","matches","useEffect","listeners","Set","forEach","_ref2","_objectWithoutPropertiesLoose","window","matchMedia","handleChange","addListener","add","removeListener","clear"],"sources":["../../src/use-breakpoint.ts"],"sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n  const env = useEnvironment()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = env.window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update, env.window])\n\n  return current\n}\n"]},"metadata":{},"sourceType":"module"}